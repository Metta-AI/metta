name: Build and publish mettagrid

on:
  workflow_dispatch:
    inputs:
      publish:
        description: "Publish to TestPyPI (set to 'yes' to publish)"
        required: false
        default: "yes"
      target:
        description: "Publish target (testpypi or pypi)"
        required: false
        default: testpypi
        type: choice
        options:
          - testpypi
          - pypi

permissions:
  contents: read
  id-token: write

env:
  # Build only CPython 3.11 wheels, matching the strict requires-python
  CIBW_BUILD: cp311-*
  # Skip musllinux unless explicitly needed
  CIBW_SKIP: "*musllinux*"
  # Disable cibuildwheel's test install phase due to strict python pin
  CIBW_TEST_SKIP: "*"
  # Ensure our custom backend picks the CI config in Bazel
  CI: "true"

jobs:
  sdist:
    name: Build sdist
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11.7
        uses: actions/setup-python@v5
        with:
          python-version: "3.11.7"

      - name: Install build tooling
        run: python -m pip install --upgrade pip build

      - name: Build sdist
        run: |
          # Build sdist and place output in repo-level dist/
          python -m build --sdist --outdir dist packages/mettagrid
          ls -l dist

      - name: Upload sdist artifact
        uses: actions/upload-artifact@v4
        with:
          name: mettagrid-sdist
          path: dist/*

  wheels-linux:
    name: Linux wheels (x86_64)
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build manylinux_2_28 wheel via Docker
        run: |
          set -euxo pipefail
          docker pull quay.io/pypa/manylinux_2_28_x86_64
          docker run --rm \
            -e CI=true \
            -v "${GITHUB_WORKSPACE}:/work" \
            -w /work \
            quay.io/pypa/manylinux_2_28_x86_64 \
            bash -lc '
              set -euxo pipefail
              PY=/opt/python/cp311-cp311/bin/python
              $PY -m pip install --upgrade pip build auditwheel
              (dnf install -y curl || microdnf install -y curl || yum install -y curl || true)
              curl -sSL -o /usr/local/bin/bazelisk https://github.com/bazelbuild/bazelisk/releases/download/v1.19.0/bazelisk-linux-amd64
              chmod +x /usr/local/bin/bazelisk
              ln -sf /usr/local/bin/bazelisk /usr/local/bin/bazel
              $PY -m build --wheel --outdir /work/dist /work/packages/mettagrid
              ls -l /work/dist
              auditwheel repair -w /work/dist /work/dist/mettagrid-*.whl
              # Remove the original non-manylinux wheel to avoid accidental upload
              rm -f /work/dist/*-linux_*.whl || true
              ls -l /work/dist
            '

      - name: Upload wheels artifact
        uses: actions/upload-artifact@v4
        with:
          name: mettagrid-wheels-linux
          path: dist/*

  wheels-macos:
    name: macOS wheels (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-13
            arch: x86_64
          - os: macos-14
            arch: arm64
    defaults:
      run:
        shell: bash
    env:
      CIBW_OUTPUT_DIR: wheelhouse
      CIBW_ARCHS_MACOS: ${{ matrix.arch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11.7"

      - name: Set up Bazelisk
        uses: bazelbuild/setup-bazelisk@v3

      - name: Install build tooling
        run: python -m pip install --upgrade pip build

      - name: Build wheel
        run: |
          python -m build --wheel --outdir dist packages/mettagrid
          ls -l dist

      - name: Upload wheels artifact
        uses: actions/upload-artifact@v4
        with:
          name: mettagrid-wheels-macos-${{ matrix.arch }}
          path: dist/*

  wheels-windows:
    name: Windows wheels (x86_64)
    # Disabled to save CI resources until Windows build is fixed
    if: false
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    env:
      CIBW_BUILD: cp311-win_amd64
      CIBW_OUTPUT_DIR: wheelhouse
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11.7"

      - name: Set up Bazelisk
        uses: bazelbuild/setup-bazelisk@v3

      - name: Install build tooling
        run: python -m pip install --upgrade pip build

      - name: Build wheel
        run: |
          python -m build --wheel --outdir dist packages/mettagrid
          ls -l dist

      - name: Upload wheels artifact
        uses: actions/upload-artifact@v4
        with:
          name: mettagrid-wheels-windows
          path: dist/*

  publish:
    name: Publish
    needs:
      - sdist
      - wheels-linux
      - wheels-macos
    if: ${{ inputs.publish == 'yes' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Download sdist
        uses: actions/download-artifact@v4
        with:
          name: mettagrid-sdist
          path: dist

      - name: Download Linux wheels
        uses: actions/download-artifact@v4
        with:
          name: mettagrid-wheels-linux
          path: dist

      - name: Download macOS x86_64 wheels
        uses: actions/download-artifact@v4
        with:
          name: mettagrid-wheels-macos-x86_64
          path: dist

      - name: Download macOS arm64 wheels
        uses: actions/download-artifact@v4
        with:
          name: mettagrid-wheels-macos-arm64
          path: dist

      # Windows wheels are currently experimental and may fail to build.
      # We publish Linux and macOS wheels (and sdist) without blocking on Windows.

      - name: Verify no universal or plain-linux wheels were produced
        run: |
          shopt -s nullglob
          BAD=(dist/*py3-none-any.whl)
          if [ ${#BAD[@]} -gt 0 ]; then
            echo "Error: Found universal wheels (py3-none-any) which is not allowed for mettagrid:"
            ls -l dist/*py3-none-any.whl || true
            exit 1
          fi
          BAD_LINUX=(dist/*-linux_*.whl)
          if [ ${#BAD_LINUX[@]} -gt 0 ]; then
            echo "Error: Found plain linux-tagged wheels; expected manylinux/musllinux:"
            ls -l dist/*-linux_*.whl || true
            exit 1
          fi

      - name: Inspect artifacts
        run: |
          echo "Artifacts in dist/:"
          ls -l dist

      - name: Twine check
        run: |
          python -m pip install --upgrade pip twine
          python -m twine check dist/*

      - name: Publish to TestPyPI (Trusted Publishing)
        if: ${{ inputs.target == 'testpypi' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true

      - name: Publish to PyPI (Trusted Publishing)
        if: ${{ inputs.target == 'pypi' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          skip-existing: false
