name: "Setup uv"
description: "Set up uv and activate the environment"
inputs:
  install-mode:
    description: "Installation mode: 'testing', 'runtime', 'linting', or 'minimal'"
    required: false
    default: "testing"
  extra-dependencies:
    description: "Extra pip dependencies to install (newline-separated list)"
    required: false
    default: ""

  # NOTE: This action automatically sets UV_NO_SYNC=1 to prevent uv from syncing ALL project dependencies
  # when workflows/actions run `uv run` commands

runs:
  using: "composite"
  steps:
    - name: Install uv with built-in caching
      uses: astral-sh/setup-uv@v6
      with:
        version: "0.7.3"
        enable-cache: true
        prune-cache: false
        cache-suffix: "${{ inputs.install-mode }}${{ inputs.extra-dependencies != '' && format('-{0}', inputs.extra-dependencies) || '' }}"
        cache-dependency-glob: |
          uv.lock
          **/pyproject.toml
          .github/actions/setup-uv/dependencies-*.txt

    - name: Install Bazel
      if: inputs.install-mode != 'minimal'
      shell: bash
      run: |
        curl -L https://github.com/bazelbuild/bazelisk/releases/latest/download/bazelisk-linux-amd64 -o bazel
        chmod +x bazel
        if command -v sudo &> /dev/null; then
          sudo mv bazel /usr/local/bin/bazel
        else
          mv bazel /usr/local/bin/bazel
        fi
        bazel --version

    - name: Create virtual environment with uv
      shell: bash
      env:
        UV_NO_SYNC: "1"
      run: |
        # Export environment variables
        echo "VIRTUAL_ENV=$(pwd)/.venv" >> $GITHUB_ENV
        echo "$(pwd)/.venv/bin" >> $GITHUB_PATH
        echo "UV_NO_SYNC=1" >> $GITHUB_ENV

        # Always create fresh venv (using cached packages from uv store)
        echo "ðŸš€ Creating fresh virtual environment..."
        echo "Creating venv"
        uv venv
        echo "Virtual environment created"

        # Handle different installation modes
        case "${{ inputs.install-mode }}" in

          "minimal")
            # don't install any packages
            ;;

          "testing")
            uv sync
            uv pip install -r .github/actions/setup-uv/dependencies-testing.txt
            ;;

          "linting")
            echo "Installing dependencies for linting"
            uv pip install -r .github/actions/setup-uv/dependencies-linting.txt
            echo "Installed dependencies for linting"
            ;;

          # used in the mettascope tests where we run code to generate outputs but do not run tests
          "runtime")
            uv sync --no-dev
            ;;

        esac

        # Install extra dependencies if provided (inline or from files)
        if [ -n "${{ inputs.extra-dependencies }}" ]; then
          echo "Installing extra dependencies (inline):"
          echo "${{ inputs.extra-dependencies }}" | while read -r dep; do
            if [ -n "$dep" ]; then
              echo "Installing $dep"
              uv pip install -- "$dep"
            fi
          done
        else
          echo "No extra inline pip dependencies specified"
        fi
