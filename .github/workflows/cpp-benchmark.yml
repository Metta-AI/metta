name: cpp-benchmark
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
on:
  pull_request:
    types: [opened, synchronize, ready_for_review]
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch: {}
jobs:
  cpp-benchmark:
    if: github.event.pull_request.draft == false || github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      checks: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check for C++ file changes
        id: check_files
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const { data: changedFiles } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            
            const hasRelevantChanges = changedFiles.some(file => {
              return file.filename.includes('deps/mettagrid/');
            });
            
            core.setOutput('has_relevant_changes', hasRelevantChanges);
      
      - name: Set relevant changes for push events
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        run: echo "HAS_RELEVANT_CHANGES=true" >> $GITHUB_ENV
      
      - name: Get main branch head SHA
        if: steps.check_files.outputs.has_relevant_changes == 'true' || github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        id: get-main-sha
        run: |
          echo "MAIN_SHA=$(git rev-parse origin/main)" >> $GITHUB_OUTPUT
          
      - name: Setup C++
        if: steps.check_files.outputs.has_relevant_changes == 'true' || github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        uses: ./.github/actions/cpp-setup
        
      - name: Build and run benchmarks
        if: steps.check_files.outputs.has_relevant_changes == 'true' || github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        run: |
          make check-bench-tools
          mkdir -p benchmark_output
          # Redirect benchmark output to JSON
          for bench_exec in $(find build/benchmarks -type f -executable); do
            echo "Running benchmark $bench_exec..."
            $bench_exec --benchmark_format=json > benchmark_output/$(basename $bench_exec).json
          done
          
      - name: Install Bencher CLI
        if: steps.check_files.outputs.has_relevant_changes == 'true' || github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        uses: bencherdev/bencher@main
        
      - name: Validate Bencher Token
        if: steps.check_files.outputs.has_relevant_changes == 'true' || github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        env:
          BENCHER_API_TOKEN: ${{ secrets.BENCHER_API_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Bencher token length: ${#BENCHER_API_TOKEN}"
          echo "Bencher token SHA256: $(echo -n "$BENCHER_API_TOKEN" | sha256sum)"
          
      - name: Upload to Bencher (Main Branch Baseline)
        if: github.ref == 'refs/heads/main' && (steps.check_files.outputs.has_relevant_changes == 'true' || github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        env:
          BENCHER_API_TOKEN: ${{ secrets.BENCHER_API_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for file in benchmark_output/*.json; do
            bencher run \
              --project mettagrid-sv3f5i2k \
              --token "$BENCHER_API_TOKEN" \
              --branch main \
              --threshold-measure latency \
              --threshold-test t_test \
              --threshold-max-sample-size 64 \
              --threshold-upper-boundary 0.99 \
              --thresholds-reset \
              --testbed ubuntu-latest \
              --adapter google_benchmark \
              --github-actions "$GITHUB_TOKEN" \
              --file "$file" > /dev/null
          done
          
      - name: Upload to Bencher (PR Performance Changes)
        if: github.event_name == 'pull_request' && !github.event.pull_request.head.repo.fork && steps.check_files.outputs.has_relevant_changes == 'true'
        env:
          BENCHER_API_TOKEN: ${{ secrets.BENCHER_API_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for file in benchmark_output/*.json; do
            bencher run \
              --project mettagrid-sv3f5i2k \
              --token "$BENCHER_API_TOKEN" \
              --branch "$GITHUB_HEAD_REF" \
              --start-point "main" \
              --start-point-hash "${{ steps.get-main-sha.outputs.MAIN_SHA }}" \
              --start-point-clone-thresholds \
              --start-point-reset \
              --testbed ubuntu-latest \
              --adapter google_benchmark \
              --github-actions "$GITHUB_TOKEN" \
              --file "$file" > /dev/null
          done
          
      - name: Skip benchmarking (no relevant changes)
        if: github.event_name == 'pull_request' && steps.check_files.outputs.has_relevant_changes != 'true'
        run: |
          echo "No files in deps/mettagrid were changed. Skipping benchmarks."
          echo "This check passes automatically when no relevant files are changed."