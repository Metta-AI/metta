name: Build and publish mettagrid

on:
  push:
    tags:
      - mettagrid-v*
  workflow_dispatch:
    inputs:
      publish:
        description: "Enable publishing step (builds will be created regardless)"
        required: false
        default: "yes"
        type: choice
        options:
          - "yes"
          - "no"
      target:
        description: "Where to publish: testpypi (safe testing) or pypi (live release)"
        required: false
        default: testpypi
        type: choice
        options:
          - testpypi
          - pypi
      version:
        description: "Optional version to build on manual runs (e.g. 0.2.0.10 or mettagrid-v0.2.0.10)"
        required: false
        default: ""
        type: string

permissions:
  contents: read
  id-token: write

jobs:
  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    env:
      METTAGRID_RELEASE_TAG: ${{ startsWith(github.ref, 'refs/tags/mettagrid-v') && github.ref_name || '' }}
      METTAGRID_MANUAL_VERSION: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version || '' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Export release version
        if: github.event_name == 'workflow_dispatch' || env.METTAGRID_RELEASE_TAG != '' || env.METTAGRID_MANUAL_VERSION != ''
        run: |
          version=""
          if [[ -n "$METTAGRID_RELEASE_TAG" ]]; then
            version="${METTAGRID_RELEASE_TAG#mettagrid-v}"
          elif [[ -n "$METTAGRID_MANUAL_VERSION" ]]; then
            version="${METTAGRID_MANUAL_VERSION#mettagrid-v}"
          fi
          if [[ -z "$version" ]] && [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]]; then
            echo "Manual dispatch requires a --version input (e.g. 0.2.0.10 or mettagrid-v0.2.0.10)."
            exit 1
          fi
          if [[ -n "$version" ]]; then
            echo "SETUPTOOLS_SCM_PRETEND_VERSION=$version" >> "$GITHUB_ENV"
          fi
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11.7"
      - run: pipx run build --sdist --outdir dist packages/mettagrid
      - name: Verify sdist version
        run: |
          sdist=$(ls dist/mettagrid-*.tar.gz)
          version=$(basename "$sdist")
          version=${version#mettagrid-}
          version=${version%.tar.gz}
          version=${version%%+*}
          if [ "$version" = "0.0.0" ]; then
            echo "Detected fallback sdist version 0.0.0. Aborting."
            exit 1
          fi
          if [ -n "${SETUPTOOLS_SCM_PRETEND_VERSION:-}" ]; then
            expected="${SETUPTOOLS_SCM_PRETEND_VERSION}"
            if [ "$version" != "$expected" ]; then
              echo "Expected sdist version $expected but found $version"
              exit 1
            fi
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-13, macos-14]
    env:
      METTAGRID_RELEASE_TAG: ${{ startsWith(github.ref, 'refs/tags/mettagrid-v') && github.ref_name || '' }}
      METTAGRID_MANUAL_VERSION: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version || '' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Export release version
        if: github.event_name == 'workflow_dispatch' || env.METTAGRID_RELEASE_TAG != '' || env.METTAGRID_MANUAL_VERSION != ''
        run: |
          version=""
          if [[ -n "$METTAGRID_RELEASE_TAG" ]]; then
            version="${METTAGRID_RELEASE_TAG#mettagrid-v}"
          elif [[ -n "$METTAGRID_MANUAL_VERSION" ]]; then
            version="${METTAGRID_MANUAL_VERSION#mettagrid-v}"
          fi
          if [[ -z "$version" ]] && [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]]; then
            echo "Manual dispatch requires a --version input (e.g. 0.2.0.10 or mettagrid-v0.2.0.10)."
            exit 1
          fi
          if [[ -n "$version" ]]; then
            echo "SETUPTOOLS_SCM_PRETEND_VERSION=$version" >> "$GITHUB_ENV"
          fi
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11.7"

      # Install Bazel on macOS
      - uses: bazelbuild/setup-bazelisk@v3
        if: runner.os == 'macOS'

      - uses: pypa/cibuildwheel@v2.16.5
        env:
          CIBW_BUILD: cp311-*
          CIBW_SKIP: "*-musllinux* *i686"
          CIBW_ARCHS_MACOS: ${{ matrix.os == 'macos-14' && 'arm64' || 'x86_64' }}
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
          CIBW_BEFORE_ALL_LINUX: |
            curl -sSL -o /usr/local/bin/bazelisk https://github.com/bazelbuild/bazelisk/releases/download/v1.19.0/bazelisk-linux-amd64
            chmod +x /usr/local/bin/bazelisk
            ln -sf /usr/local/bin/bazelisk /usr/local/bin/bazel
          CI: "true"
        with:
          package-dir: packages/mettagrid
          output-dir: wheelhouse
      - name: Verify wheel versions
        run: |
          expected="${SETUPTOOLS_SCM_PRETEND_VERSION:-}" # populated for tags or manual runs
          for wheel in wheelhouse/mettagrid-*.whl; do
            base=$(basename "$wheel")
            version=${base#mettagrid-}
            version=${version%%-*}
            version=${version%%+*}
            if [ "$version" = "0.0.0" ]; then
              echo "Detected fallback wheel version 0.0.0 in $base. Aborting."
              exit 1
            fi
            if [ -n "$expected" ] && [ "$version" != "$expected" ]; then
              echo "Expected wheel version $expected but found $version in $base"
              exit 1
            fi
          done

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: wheelhouse/*.whl

  publish:
    needs: [build-sdist, build-wheels]
    if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.publish == 'yes' }}
    runs-on: ubuntu-latest
    env:
      PUBLISH_TARGET: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.target || 'pypi' }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: List artifacts
        run: ls -l dist/

      - name: Check distributions
        run: pipx run twine check dist/*

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: ${{ env.PUBLISH_TARGET == 'testpypi' && 'https://test.pypi.org/legacy/' || '' }}
          skip-existing: ${{ env.PUBLISH_TARGET == 'testpypi' }}
