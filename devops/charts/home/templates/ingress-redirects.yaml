{{- $host := .Values.host -}}
{{- $links := .Values.links -}}

{{- range $link := $links -}}
{{- if $link.short_urls }}
{{- range $short_url := $link.short_urls }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: home-redirect-{{ $short_url | replace "/" "-" | replace "_" "-" | lower }}
  annotations:
    {{- if and $link.auth_username_url $.Values.oauth2_proxy.enabled }}
    # OAuth authentication to capture user email and extract username
    nginx.ingress.kubernetes.io/auth-signin: https://{{ $host }}/oauth2/start?rd=$escaped_request_uri
    nginx.ingress.kubernetes.io/auth-url: https://{{ $host }}/oauth2/auth
    nginx.ingress.kubernetes.io/auth-response-headers: X-Auth-Request-Email
    # Use server-side redirect with username substitution
    nginx.ingress.kubernetes.io/configuration-snippet: |
      # Get the email from auth response header
      set $user_email $upstream_http_x_auth_request_email;

      # Extract username (part before @) from email using regex
      if ($user_email ~ "^([^@]+)@") {
        set $username $1;
      }

      # Start with the URL template
      set $target_url "{{ $link.auth_username_url }}";

      # Replace $USERNAME placeholder with actual username
      if ($target_url ~ "(.*)(\$USERNAME)(.*)") {
        set $target_url $1$username$3;
      }

      # Perform the redirect
      return 302 $target_url;
    {{- else }}
    nginx.ingress.kubernetes.io/temporal-redirect: {{ $link.url | quote }}
    {{- end }}
    cert-manager.io/cluster-issuer: {{ $.Values.cert_manager_issuer | required "cert_manager_issuer is required" }}
spec:
  ingressClassName: nginx
  rules:
    - host: {{ $host }}
      http:
        paths:
          - path: /{{ $short_url }}
            pathType: Exact
            backend:
              service:
                name: home
                port:
                  number: 80
  tls:
    - hosts:
        - {{ $host }}
      secretName: home-tls
{{- end }}
{{- end }}
{{- end }}
