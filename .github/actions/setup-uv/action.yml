name: "Setup uv"
description: "Set up uv and activate the environment"
inputs:
  install-mode:
    description: "Installation mode: 'testing', 'runtime', 'linting', or 'minimal'"
    required: false
    default: "testing"
  extra-dependencies:
    description: "Extra pip dependencies to install (newline-separated list)"
    required: false
    default: ""
  dependencies-files:
    description: "Paths to pip dependencies.txt files relative to calling action directory (newline-separated)"
    required: false
    default: ""

  # NOTE: This action automatically sets UV_NO_SYNC=1 to prevent uv from syncing ALL project dependencies
  # when workflows/actions run `uv run` commands

runs:
  using: "composite"
  steps:
    - name: Install uv with built-in caching
      uses: astral-sh/setup-uv@v6
      with:
        version: "0.7.3"
        enable-cache: true
        # disabling cache saves 30 sec on testing but costs 40 sec in other modes
        prune-cache: false
        # we hash in the action script in case the install-mode content has changed
        cache-suffix: "${{ inputs.install-mode }}-${{ hashFiles(inputs.extra-dependencies) }}-${{ hashFiles(inputs.dependencies-files) }}"
        cache-dependency-glob: |
          ${{ (inputs.install-mode == 'testing' || inputs.install-mode == 'runtime') && 'uv.lock' || '' }}
          ${{ inputs.install-mode == 'linting' && '.github/actions/setup-uv/dependencies-linting.txt' || '' }}
          ${{ inputs.install-mode == 'testing' && '.github/actions/setup-uv/dependencies-testing.txt' || '' }}
          ${{ (inputs.install-mode == 'testing' || inputs.install-mode == 'runtime') && '**/pyproject.toml' || '' }}
          ${{ inputs.dependencies-files }}

    - name: Debug dependencies and cache
      shell: bash
      run: |
        echo "🔍 Dependency files found:"
        find . -name "pyproject.toml" -o -name "uv.lock" | sort | head -20
        echo ""
        echo "🔍 UV cache investigation:"
        echo "Cache directory: $(uv cache dir)"
        echo "Cache size: $(du -sh $(uv cache dir) 2>/dev/null || echo 'N/A')"
        ls -la $(uv cache dir) 2>/dev/null || echo "Cache dir doesn't exist yet"
        echo ""
        echo "🔍 Environment info:"
        echo "RUNNER_OS: ${{ runner.os }}"
        echo "Cache suffix: ${{ inputs.install-mode }}"

    - name: Create virtual environment with uv
      shell: bash
      env:
        UV_NO_SYNC: "1"
      run: |
        # Export environment variables
        echo "VIRTUAL_ENV=$(pwd)/.venv" >> $GITHUB_ENV
        echo "$(pwd)/.venv/bin" >> $GITHUB_PATH
        echo "UV_NO_SYNC=1" >> $GITHUB_ENV

        # Always create fresh venv (using cached packages from uv store)
        echo "🚀 Creating fresh virtual environment..."
        echo "Creating venv"
        uv venv
        echo "Virtual environment created"

        # Handle different installation modes
        case "${{ inputs.install-mode }}" in

          "minimal")
            # don't install any packages
            ;;

          "testing")
            uv sync
            uv pip install -r .github/actions/setup-uv/dependencies-testing.txt
            ;;

          "linting")
            echo "Installing dependencies for linting"
            uv pip install -r .github/actions/setup-uv/dependencies-linting.txt
            echo "Installed dependencies for linting"
            ;;

          # used in the mettascope tests where we run code to generate outputs but do not run tests
          "runtime")
            uv sync --no-dev
            ;;

        esac

        # Install extra dependencies if provided (inline or from files)
        if [ -n "${{ inputs.extra-dependencies }}" ]; then
          echo "Installing extra dependencies (inline):"
          echo "${{ inputs.extra-dependencies }}" | while read -r dep; do
            if [ -n "$dep" ]; then
              echo "  - $dep"
              uv pip install "$dep"
            fi
          done
        elif [ -n "${{ inputs.dependencies-files }}" ]; then
          echo "Installing dependencies from files:"
          echo "${{ inputs.dependencies-files }}" | while read -r dep_file; do
            if [ -n "$dep_file" ] && [ -f "${{ github.action_path }}/$dep_file" ]; then
              echo "Installing from $dep_file:"
              uv pip install -r "${{ github.action_path }}/$safe_file"
            elif [ -n "$dep_file" ]; then
              echo "Dependencies file not found: ${{ github.action_path }}/$dep_file"
            fi
          done
        else
          echo "No extra dependencies specified - skipping dependency installation"
        fi
