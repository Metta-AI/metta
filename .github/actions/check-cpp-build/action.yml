name: "Check C++ Build Quality"
description: "Check build output for errors, warnings, and runtime issues"
inputs:
  errors:
    description: "Number of build errors"
    required: true
  warnings:
    description: "Number of build warnings"
    required: true
  runtime_issues:
    description: "Number of runtime issues"
    required: false
    default: "0"
  max_warnings:
    description: "Maximum allowed warnings"
    required: false
    default: "50"
  build_type:
    description: 'Type of build (e.g., "MettaGrid", "Benchmark")'
    required: false
    default: "Build"
  full_output:
    description: "Full build output for debugging"
    required: false
    default: ""
  print_full_output:
    description: "Whether to print full output on failure"
    required: false
    default: "true"

runs:
  using: "composite"
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        errors="${{ inputs.errors }}"
        warnings="${{ inputs.warnings }}"
        runtime_issues="${{ inputs.runtime_issues }}"

        # Fail if any of the values are not set or not numeric
        if [ -z "$errors" ] || [ -z "$warnings" ] || [ -z "$runtime_issues" ]; then
          echo "❌ Missing value for errors, warnings, or runtime issues!"
          exit 1
        fi

        if ! [[ "$errors" =~ ^[0-9]+$ ]] || ! [[ "$warnings" =~ ^[0-9]+$ ]] || ! [[ "$runtime_issues" =~ ^[0-9]+$ ]]; then
          echo "❌ Non-numeric value for errors, warnings, or runtime issues!"
          exit 1
        fi

    - name: Check C++ build quality
      shell: bash
      run: |
        errors=${{ inputs.errors }}
        warnings=${{ inputs.warnings }}
        runtime_issues=${{ inputs.runtime_issues }}
        max_warnings=${{ inputs.max_warnings }}
        build_type="${{ inputs.build_type }}"

        echo "::group::$build_type Quality Check"
        echo "================== $build_type Summary =================="
        echo "Errors:          $errors"
        echo "Warnings:        $warnings"
        echo "Runtime Issues:  $runtime_issues"
        echo "Max Warnings:    $max_warnings"
        echo "======================================================"

        # Set exit code
        exit_code=0

        if [ "$errors" -gt 0 ]; then
          echo "❌ $build_type has build errors!"
          exit_code=1
        elif [ "$runtime_issues" -gt 0 ]; then
          echo "❌ $build_type has runtime issues (segfaults, test failures)!"
          exit_code=1
        elif [ "$warnings" -gt "$max_warnings" ]; then
          echo "⚠️ Too many warnings in $build_type ($warnings > $max_warnings)"
          exit_code=1
        else
          echo "✅ $build_type quality check passed"
        fi
        echo "::endgroup::"

        # Print full output if requested and build failed
        if [ "$exit_code" -ne 0 ] && [ "${{ inputs.print_full_output }}" == "true" ] && [ -n "${{ inputs.full_output }}" ]; then
          echo ""
          echo "::group::Full Build Output (on failure)"
          echo "${{ inputs.full_output }}"
          echo "::endgroup::"
        fi

        exit $exit_code
