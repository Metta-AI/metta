name: 'PR Assignment Action'
description: 'Assign and request reviews for PRs based on configurable rules'

inputs:
  pr-number:
    description: 'PR number to process'
    required: true
  possible-assignees:
    description: 'Comma-separated list of users to randomly select assignees from'
    required: false
    default: ''
  possible-reviewers:
    description: 'Comma-separated list of users to randomly select reviewers from'
    required: false
    default: ''
  forced-assignees:
    description: 'Comma-separated list of users who will always be assigned'
    required: false
    default: ''
  forced-reviewers:
    description: 'Comma-separated list of users who will always be requested as reviewers'
    required: false
    default: ''
  forced-labels:
    description: 'Comma-separated list of labels that will replace any labels currently set on the PR'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Assign and request reviews for PR
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
        PR_NUMBER: ${{ inputs.pr-number }}
        REPO: ${{ github.repository }}
        POSSIBLE_ASSIGNEES: ${{ inputs.possible-assignees }}
        POSSIBLE_REVIEWERS: ${{ inputs.possible-reviewers }}
        FORCED_ASSIGNEES: ${{ inputs.forced-assignees }}
        FORCED_REVIEWERS: ${{ inputs.forced-reviewers }}
        FORCED_LABELS: ${{ inputs.forced-labels }}
      run: |
        # Get PR author
        PR_AUTHOR=$(gh pr view $PR_NUMBER --json author --repo $REPO | jq -r '.author.login')
        echo "Processing PR #$PR_NUMBER by @$PR_AUTHOR"
        
        # Function to randomly select from a comma-separated list
        select_random() {
          local list=$1
          local exclude=$2
          
          if [ -z "$list" ]; then
            echo ""
            return
          fi
          
          # Convert comma-separated list to array
          IFS=',' read -ra ITEMS <<< "$list"
          
          # Filter out excluded users
          if [ ! -z "$exclude" ]; then
            FILTERED_ITEMS=()
            for item in "${ITEMS[@]}"; do
              item=$(echo "$item" | xargs)  # Trim whitespace
              if [ "$item" != "$exclude" ]; then
                FILTERED_ITEMS+=("$item")
              fi
            done
            
            # If all users were filtered out, return empty
            if [ ${#FILTERED_ITEMS[@]} -eq 0 ]; then
              echo ""
              return
            fi
            
            # Use filtered array instead
            RANDOM_INDEX=$(( RANDOM % ${#FILTERED_ITEMS[@]} ))
            echo "${FILTERED_ITEMS[$RANDOM_INDEX]}" | xargs
            return
          fi
          
          # No exclusion, use all items
          RANDOM_INDEX=$(( RANDOM % ${#ITEMS[@]} ))
          echo "${ITEMS[$RANDOM_INDEX]}" | xargs
        }
        
        # Function to process a list into a format for GitHub CLI
        format_for_gh() {
          local list=$1
          local formatted=""
          
          # Convert comma-separated list to array
          IFS=',' read -ra ITEMS <<< "$list"
          
          # Format each item for GitHub CLI
          for item in "${ITEMS[@]}"; do
            item=$(echo "$item" | xargs)  # Trim whitespace
            if [ ! -z "$formatted" ]; then
              formatted+=" "
            fi
            formatted+="\"$item\""
          done
          
          echo "$formatted"
        }
        
        # Initialize arrays to track actions taken
        ASSIGNED=()
        REVIEWED=()
        LABELED=()
        
        # Process forced assignees (always assigned)
        if [ ! -z "$FORCED_ASSIGNEES" ]; then
          FORMATTED_ASSIGNEES=$(format_for_gh "$FORCED_ASSIGNEES")
          echo "Adding forced assignees: $FORCED_ASSIGNEES"
          
          # Convert comma-separated list to array for tracking
          IFS=',' read -ra FORCED_ASSIGNEE_ARRAY <<< "$FORCED_ASSIGNEES"
          for assignee in "${FORCED_ASSIGNEE_ARRAY[@]}"; do
            ASSIGNED+=("$(echo $assignee | xargs)")
          done
          
          # Assign the PR
          eval "gh pr edit $PR_NUMBER --add-assignee $FORMATTED_ASSIGNEES --repo $REPO"
        fi
        
        # Process random assignee (if enabled and not empty)
        if [ ! -z "$POSSIBLE_ASSIGNEES" ]; then
          SELECTED_ASSIGNEE=$(select_random "$POSSIBLE_ASSIGNEES")
          echo "Selected random assignee: $SELECTED_ASSIGNEE"
          
          # Only assign if this person isn't already assigned
          if [[ ! " ${ASSIGNED[*]} " =~ " ${SELECTED_ASSIGNEE} " ]]; then
            ASSIGNED+=("$SELECTED_ASSIGNEE")
            
            # Assign the PR
            gh pr edit $PR_NUMBER --add-assignee "$SELECTED_ASSIGNEE" --repo $REPO
            echo "Successfully assigned PR #$PR_NUMBER to $SELECTED_ASSIGNEE"
          else
            echo "Assignee $SELECTED_ASSIGNEE already assigned as forced assignee, skipping"
          fi
        else
          echo "No possible assignees specified for random selection"
        fi
        
        # Process forced reviewers (always requested)
        if [ ! -z "$FORCED_REVIEWERS" ]; then
          FORMATTED_REVIEWERS=$(format_for_gh "$FORCED_REVIEWERS")
          echo "Adding forced reviewers: $FORCED_REVIEWERS"
          
          # Convert comma-separated list to array for tracking
          IFS=',' read -ra FORCED_REVIEWER_ARRAY <<< "$FORCED_REVIEWERS"
          for reviewer in "${FORCED_REVIEWER_ARRAY[@]}"; do
            REVIEWED+=("$(echo $reviewer | xargs)")
          done
          
          # Request reviews
          eval "gh pr edit $PR_NUMBER --add-reviewer $FORMATTED_REVIEWERS --repo $REPO"
        fi
        
        # Process random reviewer (if enabled and not empty)
        if [ ! -z "$POSSIBLE_REVIEWERS" ]; then
          # Skip author as reviewer by default
          SELECTED_REVIEWER=$(select_random "$POSSIBLE_REVIEWERS" "$PR_AUTHOR")
          echo "Selected random reviewer: $SELECTED_REVIEWER"
          
          # Only request review if someone was selected and isn't already reviewing
          if [ ! -z "$SELECTED_REVIEWER" ] && [[ ! " ${REVIEWED[*]} " =~ " ${SELECTED_REVIEWER} " ]]; then
            REVIEWED+=("$SELECTED_REVIEWER")
            
            # Request review
            gh pr edit $PR_NUMBER --add-reviewer "$SELECTED_REVIEWER" --repo $REPO
            echo "Successfully requested review from $SELECTED_REVIEWER for PR #$PR_NUMBER"
          elif [ ! -z "$SELECTED_REVIEWER" ]; then
            echo "Reviewer $SELECTED_REVIEWER already assigned as forced reviewer, skipping"
          fi
        else
          echo "No possible reviewers specified for random selection"
        fi
        
        # Process forced labels (replacing existing labels)
        if [ ! -z "$FORCED_LABELS" ]; then
          echo "Setting forced labels: $FORCED_LABELS"
          
          # First, get current labels to remove them
          CURRENT_LABELS=$(gh pr view $PR_NUMBER --json labels --repo $REPO | jq -r '.labels[].name')
          
          # Remove all existing labels
          for label in $CURRENT_LABELS; do
            gh pr edit $PR_NUMBER --remove-label "$label" --repo $REPO
            echo "Removed label: $label"
          done
          
          # Format and add forced labels
          FORMATTED_LABELS=$(format_for_gh "$FORCED_LABELS")
          eval "gh pr edit $PR_NUMBER --add-label $FORMATTED_LABELS --repo $REPO"
          
          # Track labels for comment
          IFS=',' read -ra FORCED_LABEL_ARRAY <<< "$FORCED_LABELS"
          for label in "${FORCED_LABEL_ARRAY[@]}"; do
            LABELED+=("$(echo $label | xargs)")
          done
        fi
        
        # Add a summary comment
        if [ ${#ASSIGNED[@]} -gt 0 ] || [ ${#REVIEWED[@]} -gt 0 ] || [ ${#LABELED[@]} -gt 0 ]; then
          COMMENT="PR automatically processed:\n"
          
          if [ ${#ASSIGNED[@]} -gt 0 ]; then
            COMMENT+="- Assigned to: "
            for assignee in "${ASSIGNED[@]}"; do
              COMMENT+="@$assignee "
            done
            COMMENT+="\n"
          fi
          
          if [ ${#REVIEWED[@]} -gt 0 ]; then
            COMMENT+="- Review requested from: "
            for reviewer in "${REVIEWED[@]}"; do
              COMMENT+="@$reviewer "
            done
            COMMENT+="\n"
          fi
          
          if [ ${#LABELED[@]} -gt 0 ]; then
            COMMENT+="- Labels set: "
            for label in "${LABELED[@]}"; do
              COMMENT+="\`$label\` "
            done
          fi
          
          gh pr comment $PR_NUMBER --body "$COMMENT" --repo $REPO
        fi