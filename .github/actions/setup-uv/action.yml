name: "Setup uv"
description: "Set up uv and activate the environment"
inputs:
  install-mode:
    description: "Installation mode: 'testing', 'runtime', 'linting', or 'minimal'"
    required: false
    default: "testing"

runs:
  using: "composite"
  steps:
    - name: Install uv with built-in caching
      uses: astral-sh/setup-uv@v6
      with:
        version: "0.7.3"
        enable-cache: true
        # disabling cache saves 30 sec on testing but costs 40 sec in other modes
        prune-cache: false
        # we hash in the action script in case the install-mode content has changed
        cache-suffix: "${{ inputs.install-mode }}"
        cache-dependency-glob: |
          uv.lock
          **/pyproject.toml
          .github/actions/setup-uv/dependencies-testing.txt
          .github/actions/setup-uv/dependencies-linting.txt

    - name: Debug dependencies and cache
      shell: bash
      run: |
        echo "🔍 Dependency files found:"
        find . -name "pyproject.toml" -o -name "uv.lock" | sort | head -20
        echo ""
        echo "🔍 UV cache investigation:"
        echo "Cache directory: $(uv cache dir)"
        echo "Cache size: $(du -sh $(uv cache dir) 2>/dev/null || echo 'N/A')"
        ls -la $(uv cache dir) 2>/dev/null || echo "Cache dir doesn't exist yet"
        echo ""
        echo "🔍 Environment info:"
        echo "RUNNER_OS: ${{ runner.os }}"
        echo "Cache suffix: ${{ inputs.install-mode }}"

    - name: Create virtual environment with uv
      shell: bash
      run: |
        # Export environment variables
        echo "VIRTUAL_ENV=$(pwd)/.venv" >> $GITHUB_ENV
        echo "$(pwd)/.venv/bin" >> $GITHUB_PATH

        # Always create fresh venv (using cached packages from uv store)
        echo "🚀 Creating fresh virtual environment..."
        echo "Creating venv"
        uv venv
        echo "Virtual environment created"

        # Handle different installation modes
        case "${{ inputs.install-mode }}" in

          "minimal")
            # don't install any packages
            ;;

          "testing")
            uv sync
            uv pip install -r .github/actions/setup-uv/dependencies-testing.txt
            ;;

          "linting")
            echo "Installing dependencies for linting"
            uv pip install -r .github/actions/setup-uv/dependencies-linting.txt
            echo "Installed dependencies for linting"
            ;;

          # used in the mettascope tests where we run code to generate outputs but do not run tests
          "runtime")
            uv sync --no-dev
            ;;

        esac
