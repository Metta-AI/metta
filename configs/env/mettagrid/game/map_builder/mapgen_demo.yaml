# This config shows the features of the mapgen system.
_target_: metta.map.mapgen.MapGen

# With mapgen, top-level width and height must be known in advance. We don't do layout based on children components.
# So this is not exactly the same as the old simple.yaml config, but it's very close.
width: 50
height: 40

# MapGen level is a tree of scenes, instantiated from scene classes.
# You can think of scenes as modules that are responsible for drawing or updating some part of the map.
# The term "scene" is borrowed from Godot.

# This is the root scene.
root:
  # Class of scene to instantiate.
  type: metta.map.scenes.room_grid.RoomGrid

  # Parameters to pass to the scene constructor.
  # This will draw 6 rooms in a 2x3 grid, all empty.
  params:
    rows: 2
    columns: 3

  # Most scenes can have children definitions.
  # Each child is created in the areas (slots) defined by the parent scene, so the specific areas are determined by the parent scene.
  #
  # You can think of the children config listed below as a list of SQL-like queries.
  # Each child on the list can match several areas and so it produce multiple scene instances.
  #
  # Children are applied in order, so you can also think of them as "paint" commands or layers.
  # Children that come later in the list will be rendered on top of the map that was rendered previously, and can erase or modify the map.
  children:
    - # First, let's turn two rooms into mazes.

      # Take only two areas; if not set, all matching areas are selected.
      limit: 2

      # Random mode is default, which means "take 2 random areas"; other modes are "first" and "last".
      # If `limit` is not set, `order_by` is ignored.
      order_by: random

      # Optionally lock selected areas; will be explained later.
      lock: lockname

      # Scene will be instantiated for each matched area.
      scene:
        type: metta.map.scenes.maze.MazeKruskal

        # Scenes can be nested arbitrarily.
        # MazeKruskal defines a 1x1 area at each of the four corners, so we can use these to place an agent and an altar.
        children:
          - where: # similar to SQL "WHERE" clause; selects areas based on their tags.
              # Each corner is tagged, so we can select them individually.
              # These tags are specific for MazeKruskal scene. Other scenes might have different tags.
              tags:
                - top-left
            scene:
              type: metta.map.scenes.inline_ascii.InlineAscii
              params:
                data: '@' # agent
          - where:
              tags:
                - bottom-right
            scene:
              type: metta.map.scenes.inline_ascii.InlineAscii
              params:
                data: '_' # altar

    - # No conditions, so all areas are selected.
      scene:
        type: metta.map.scenes.random.Random

        # Let's place some objects in each room.
        # Note that for the maze rooms, Random scene will take existing walls into account.
        params:
          objects:
            mine_red: 1
            generator_red: 2

    # What if we want to draw a custom scene in one room, but that room shouldn't have a maze? Let's use a lock.
    #
    # Lock will exclude the areas that were already selected by previous children that use the same lock name.
    # So this guarantees that the custom map will not overlap with the maze.
    - lock: lockname
      limit: 1

      scene:
        type: metta.map.scenes.inline_ascii.InlineAscii
        params:
          data: |
            ##########
            ....@.....
            ##########
          # Indenting in YAML is not easy, so we can specify row and column explicitly.
          # If not set, the map will be drawn in the top-left corner of the area.
          row: 2
          column: 3

    # Fill the remaining 3 rooms with agents.
    - lock: lockname
      scene:
        type: metta.map.scenes.random.Random
        params:
          agents: 1
