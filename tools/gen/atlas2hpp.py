#!/usr/bin/env -S uv run
"""
Convert the atlas json/png files to a C++ header.
"""

import argparse
import json
import os


def main():
    parser = argparse.ArgumentParser(
        description="Convert the atlas json/png files to a C++ header.",
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )
    parser.add_argument(
        "--srcdir", "-s", type=str, required=True, help="Source directory containing atlas.json and atlas.png"
    )
    parser.add_argument("--out", "-o", type=str, required=True, help="Output header file")
    args = parser.parse_args()

    with open(os.path.join(args.srcdir, "atlas.json"), "r") as f:
        map = json.load(f)

    with open(os.path.join(args.srcdir, "atlas.png"), "rb") as f:
        png = f.read()

    with open(args.out, "w") as f:
        f.write(f"// This file was generated by {os.path.basename(__file__)}\n\n")
        f.write("#pragma once\n\n")
        f.write("#include <raylib.h>\n\n")
        f.write("#include <string>\n")
        f.write("#include <unordered_map>\n")
        f.write("#include <vector>\n\n")

        # Sprite rectangles array.
        f.write("constexpr std::vector<Rectangle> hermes_sprites = {\n")
        for sprite in map["images"].values():
            f.write(f"    {{ {sprite[0]}, {sprite[1]}, {sprite[2]}, {sprite[3]} }},\n")
        f.write("};\n\n")

        # Lookup tables for sprite names to raylib rectangles.
        f.write("constexpr std::unordered_map<std::string, uint16_t> hermes_sprite_lookup = {\n")
        for i, name in enumerate(map["images"].keys()):
            f.write(f'    {{"{name}", {i}}},\n')
        f.write("};\n\n")

        # Binary blob of the sprite sheet image.
        f.write("constexpr uint8_t hermes_sprite_sheet[] = {\n")
        for i in range(0, len(png), 10):
            f.write("    ")
            f.write(", ".join(f"0x{byte:02x}" for byte in png[i : i + 10]))
            f.write("\n")
        f.write("};\n\n")


if __name__ == "__main__":
    main()
