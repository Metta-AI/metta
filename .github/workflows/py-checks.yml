name: "Python"
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'merge_group' && github.event.merge_group.head_ref || github.ref }}
  cancel-in-progress: true
on:
  pull_request:
    types: [opened, synchronize, ready_for_review]
  push:
    branches: [main]
  merge_group:
    types: [checks_requested]
    branches: [main]
  workflow_dispatch:
    inputs:
      run_lint:
        description: "Run lint checks"
        type: boolean
        default: true
      run_test:
        description: "Run tests"
        type: boolean
        default: true
      run_benchmark:
        description: "Run benchmarks (requires tests)"
        type: boolean
        default: true

# Set default permissions
permissions:
  checks: write
  pull-requests: write

jobs:
  # check if CI should run based on Graphite's stack position
  graphite-ci-optimizer:
    name: "Graphite CI Optimizer"
    if: |
      github.event.pull_request.draft == false || 
      github.event_name == 'push' || 
      github.event_name == 'workflow_dispatch' || 
      github.event_name == 'merge_group'
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.graphite_ci.outputs.skip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Graphite CI Optimizer
        id: graphite_ci
        uses: withgraphite/graphite-ci-action@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          graphite_token: ${{ secrets.GRAPHITE_TOKEN }}

  # check if any Python files have changed
  setup-checks:
    name: "Set up for Python checks"
    needs: graphite-ci-optimizer
    if: |
      (needs.graphite-ci-optimizer.outputs.should_skip == 'false') && 
      (github.event.pull_request.draft == false || 
       github.event_name == 'push' || 
       github.event_name == 'workflow_dispatch' || 
       github.event_name == 'merge_group')
    runs-on: ubuntu-latest
    outputs:
      has_relevant_changes: ${{ steps.check_py_files.outputs.has_relevant_changes }}
      run_lint: ${{ steps.determine_tasks.outputs.run_lint }}
      run_test: ${{ steps.determine_tasks.outputs.run_test }}
      run_benchmark: ${{ steps.determine_tasks.outputs.run_benchmark }}
      cache_key: ${{ steps.set-cache-key.outputs.cache_key }}
      cache_paths: ${{ steps.set-cache-paths.outputs.paths }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for Python file changes
        id: check_py_files
        uses: ./.github/actions/file-changes
        with:
          patterns: "**/*.py"
          specific_files: "requirements.txt,setup.py"
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set cache paths
        id: set-cache-paths
        run: |
          PATHS="venv
          mettagrid/**/*.so
          metta/**/*.so
          deps/**/*.py
          ~/.cache/pip
          "
          echo "paths<<EOF" >> $GITHUB_OUTPUT
          echo "$PATHS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Generate cache key
        id: set-cache-key
        run: |
          # Create a hash that combines all relevant files
          find mettagrid -type f \( -name "*.py" \) -exec sha256sum {} \; > /tmp/mettagrid_file_hashes.txt || true
          find deps -type f \( -name "*.py" \) -exec sha256sum {} \; > /tmp/deps_file_hashes.txt || true

          # Add more project directories if they exist
          find tests -type f \( -name "*.py" \) -exec sha256sum {} \; > /tmp/tests_file_hashes.txt || true
          find examples -type f \( -name "*.py" \) -exec sha256sum {} \; > /tmp/examples_file_hashes.txt || true

          # Hash configuration files
          find . -maxdepth 1 -type f \( -name "*.yaml" -o -name "*.yml" -o -name "*.json" -o -name "*.toml" \) -exec sha256sum {} \; > /tmp/config_file_hashes.txt || true

          # Add setup.py and requirements.txt if they exist
          if [ -f "setup.py" ]; then
            sha256sum setup.py >> /tmp/file_hashes.txt
          fi
          if [ -f "requirements.txt" ]; then
            sha256sum requirements.txt >> /tmp/file_hashes.txt
          fi
          if [ -f "pyproject.toml" ]; then
            sha256sum pyproject.toml >> /tmp/file_hashes.txt
          fi
          if [ -f "setup.cfg" ]; then
            sha256sum setup.cfg >> /tmp/file_hashes.txt
          fi

          # Add the cache paths to the hash calculation
          echo "${{ steps.set-cache-paths.outputs.paths }}" | sha256sum >> /tmp/file_hashes.txt

          # Combine all hash files
          cat /tmp/mettagrid_file_hashes.txt /tmp/deps_file_hashes.txt /tmp/tests_file_hashes.txt /tmp/examples_file_hashes.txt /tmp/config_file_hashes.txt /tmp/file_hashes.txt > /tmp/all_hashes.txt || true

          # Create the final hash
          if [ -s "/tmp/all_hashes.txt" ]; then
            HASH=$(sort /tmp/all_hashes.txt | sha256sum | cut -d' ' -f1)
          else
            HASH="empty"
          fi

          # Add Python version to the cache key
          PYTHON_VERSION=$(python --version 2>&1 | cut -d' ' -f2)
          CACHE_KEY="py-build-${PYTHON_VERSION}-${HASH}"

          echo "cache_key=${CACHE_KEY}" >> $GITHUB_OUTPUT
          echo "Created content-based hash key ${CACHE_KEY}"

      - name: Determine which tasks to run
        id: determine_tasks
        run: |
          # Default behavior based on event type and file changes
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Use workflow dispatch inputs for manual runs
            RUN_LINT="${{ github.event.inputs.run_lint }}"
            RUN_TEST="${{ github.event.inputs.run_test }}"
            RUN_BENCHMARK="${{ github.event.inputs.run_benchmark }}"
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ steps.check_py_files.outputs.has_relevant_changes }}" == "false" ]]; then
            # Skip everything for PRs with no relevant changes
            RUN_LINT="false"
            RUN_TEST="false"
            RUN_BENCHMARK="false"
            echo "::notice title=Skipping Tasks::Skipping all tasks because no relevant files have changed"
          else
            # Default to running everything for other events or when changes exist
            RUN_LINT="true"
            RUN_TEST="true"
            RUN_BENCHMARK="true"
          fi

          # Output the decisions
          echo "run_lint=${RUN_LINT}" >> $GITHUB_OUTPUT
          echo "run_test=${RUN_TEST}" >> $GITHUB_OUTPUT
          echo "run_benchmark=${RUN_BENCHMARK}" >> $GITHUB_OUTPUT

          echo "run lint? ${RUN_LINT}"
          echo "run test? ${RUN_TEST}"
          echo "run benchmark? ${RUN_BENCHMARK}"

  # setup python
  setup-py:
    name: "Build Python artifacts"
    needs: [graphite-ci-optimizer, setup-checks]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11.7"

      - name: Restore from build cache
        id: setup-cache-py
        uses: actions/cache@v3
        with:
          path: ${{ needs.setup-checks.outputs.cache_paths }}
          key: ${{ needs.setup-checks.outputs.cache_key }}

      - name: Install pip requirements (cache miss fallback)
        if: steps.setup-cache-py.outputs.cache-hit != 'true'
        shell: bash
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt -c requirements.txt

      - name: Install and compile deps (cache miss fallback)
        if: steps.setup-cache-py.outputs.cache-hit != 'true'
        shell: bash
        run: |
          source venv/bin/activate
          bash ./devops/setup_build.sh

  lint:
    name: "Python Lint"
    needs: [graphite-ci-optimizer, setup-checks, setup-py]
    if: |
      (needs.graphite-ci-optimizer.outputs.should_skip == 'false') && 
      (needs.setup-checks.outputs.run_lint == 'true')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11.7"

      - name: Install Ruff
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install ruff==0.11.5

      - name: Run Ruff linter
        run: |
          source venv/bin/activate
          ruff format --check .

      - name: Run Ruff formatting
        run: |
          source venv/bin/activate
          ruff check --exit-non-zero-on-fix .

  test:
    name: "Python Tests"
    needs: [graphite-ci-optimizer, setup-checks, setup-py]
    if: |
      (needs.graphite-ci-optimizer.outputs.should_skip == 'false') && 
      (needs.setup-checks.outputs.run_test == 'true')
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11.7"

      - name: Restore from build cache
        id: test-cache-py
        uses: actions/cache@v3
        with:
          path: ${{ needs.setup-checks.outputs.cache_paths }}
          key: ${{ needs.setup-checks.outputs.cache_key }}

      - name: Install pip requirements (cache miss fallback)
        if: steps.test-cache-py.outputs.cache-hit != 'true'
        shell: bash
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Install and compile deps (cache miss fallback)
        if: steps.test-cache-py.outputs.cache-hit != 'true'
        shell: bash
        run: |
          source venv/bin/activate
          bash ./devops/setup_build.sh

      - name: Run Pytest on core tests
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          source venv/bin/activate
          pytest --maxfail=1 --disable-warnings -q

      - name: Run Pytest on mettagrid tests
        env:
          HYDRA_FULL_ERROR: 1
          PYTHONPATH: ${{ github.workspace }}/mettagrid
        run: |
          source venv/bin/activate
          cd mettagrid
          pytest --maxfail=1 --disable-warnings -q

  smoke-test:
    name: "Training Smoke Test"
    needs: [graphite-ci-optimizer, setup-checks, setup-py]
    if: |
      (needs.graphite-ci-optimizer.outputs.should_skip == 'false')
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      CHECKPOINT_PATH: ./train_dir/github_test/checkpoints/
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11.7"

      - name: Restore from build cache
        id: benchmark-cache-py
        uses: actions/cache@v3
        with:
          path: ${{ needs.setup-checks.outputs.cache_paths }}
          key: ${{ needs.setup-checks.outputs.cache_key }}

      - name: Install pip requirements (cache miss fallback)
        if: steps.benchmark-cache-py.outputs.cache-hit != 'true'
        shell: bash
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Install and compile deps (cache miss fallback)
        if: steps.benchmark-cache-py.outputs.cache-hit != 'true'
        shell: bash
        run: |
          source venv/bin/activate
          bash ./devops/setup_build.sh

      - name: Check deps
        run: |
          source venv/bin/activate

          for dep in \
            "pufferlib" \
            "carbs" \
            "wandb_carbs"
          do
            echo "Checking import for $dep..."
            python -c "import $dep; print('✅ Found {} at {}'.format('$dep', __import__('$dep').__file__))" || {
              echo "❌ Failed to import $dep"
              exit 1
            }
          done

      - name: Check benchmark script
        run: |
          # Check if the file exists
          ls -la .github/scripts/benchmark.sh

          # Check if the function is defined
          type benchmark || echo "Function not defined after sourcing"

      - name: Training smoke test
        id: train
        env:
          HYDRA_FULL_ERROR: 1
          PYTHONPATH: ${{ github.workspace }}
          WANDB_API_KEY: set_but_not_used
          AWS_ACCESS_KEY_ID: set_but_not_used
          AWS_SECRET_ACCESS_KEY: set_but_not_used
        run: |
          source venv/bin/activate
          mkdir -p train_dir
          source .github/scripts/benchmark.sh
          benchmark "train" "python -m tools.train +hardware=github wandb=off"
          ls -la $CHECKPOINT_PATH || echo "Warning: Checkpoint directory not created"

      - name: Save training benchmark
        if: success()
        uses: ./.github/actions/save-benchmarks
        with:
          name: train_smoke_test
          metrics: '{"duration": ${{ steps.train.outputs.duration }}, "memory_usage": ${{ steps.train.outputs.memory_usage }}}'
          filename: smoke_test_train_benchmark_results.json

      - name: Upload training benchmark file
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: train-benchmark-results
          path: |
            smoke_test_train_benchmark_results.json
          retention-days: 1
          if-no-files-found: warn

      - name: Upload training output
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: train-output
          path: train_dir/
          retention-days: 1
          if-no-files-found: error

      - name: Download training output
        if: success()
        uses: actions/download-artifact@v4
        with:
          name: train-output
          path: train_dir/

      - name: Verify training artifacts
        if: success()
        run: |
          source venv/bin/activate
          ls -la train_dir/
          ls -la $CHECKPOINT_PATH || echo "Checkpoint directory not found!"

      - name: Replay smoke test
        id: replay
        if: success()
        env:
          HYDRA_FULL_ERROR: 1
          PYTHONPATH: ${{ github.workspace }}
          WANDB_API_KEY: set_but_not_used
          AWS_ACCESS_KEY_ID: set_but_not_used
          AWS_SECRET_ACCESS_KEY: set_but_not_used
        run: |
          source venv/bin/activate
          source .github/scripts/benchmark.sh
          benchmark "replay" "python -m tools.replay +hardware=github wandb=off"

      - name: Save replay benchmark
        uses: ./.github/actions/save-benchmarks
        with:
          name: replay_smoke_test
          metrics: '{"duration": ${{ steps.replay.outputs.duration }}, "memory_usage": ${{ steps.replay.outputs.memory_usage }}}'
          filename: smoke_test_replay_benchmark_results.json

      - name: Upload replay benchmark file
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: replay-benchmark-results
          path: |
            smoke_test_replay_benchmark_results.json
          retention-days: 1
          if-no-files-found: warn

      - name: Debug on failure
        if: failure()
        run: |
          source venv/bin/activate
          echo "Listing the contents of the workspace:"
          find train_dir -type f -name "*.py" | sort
          find train_dir -type d | sort

  benchmark:
    name: "Python Benchmarks"
    needs: [graphite-ci-optimizer, setup-checks, setup-py, test, smoke-test]
    if: |
      (needs.graphite-ci-optimizer.outputs.should_skip == 'false') && 
      (needs.setup-checks.outputs.run_benchmark == 'true') && 
      (needs.test.result == 'success' || github.event_name != 'pull_request' )
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11.7"

      - name: Restore from build cache
        id: benchmark-cache-py
        uses: actions/cache@v3
        with:
          path: ${{ needs.setup-checks.outputs.cache_paths }}
          key: ${{ needs.setup-checks.outputs.cache_key }}

      - name: Install pip requirements (cache miss fallback)
        if: steps.benchmark-cache-py.outputs.cache-hit != 'true'
        shell: bash
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Install and compile deps (cache miss fallback)
        if: steps.benchmark-cache-py.outputs.cache-hit != 'true'
        shell: bash
        run: |
          source venv/bin/activate
          bash ./devops/setup_build.sh

      - name: Download benchmark results from smoke-test train-benchmark-results job
        uses: actions/download-artifact@v4
        with:
          name: train-benchmark-results
          path: ./

      - name: Download benchmark results from smoke-test replay-benchmark-results job
        uses: actions/download-artifact@v4
        with:
          name: replay-benchmark-results
          path: ./

      - name: Run Main Python benchmarks
        env:
          HYDRA_FULL_ERROR: 1
          PYTHONPATH: ${{ github.workspace }}
        run: |
          source venv/bin/activate
          pytest  --benchmark-only --benchmark-json=main_benchmark_results.json

      - name: Run Mettagrid Python benchmarks
        env:
          HYDRA_FULL_ERROR: 1
          PYTHONPATH: ${{ github.workspace }}
        run: |
          source venv/bin/activate
          cd mettagrid
          pytest  --benchmark-only --benchmark-json=mettagrid_benchmark_results.json
          mv mettagrid_benchmark_results.json ../

      - name: Combine benchmark results
        run: |
          source venv/bin/activate
          python - <<EOF

          # Python Script to combine benchmark data
          import json
          import os

          # Function to safely load JSON, handling empty files
          def safe_load_json(file_path):
              try:
                  if os.path.exists(file_path):
                      with open(file_path, 'r') as f:
                          content = f.read().strip()
                          if content:  # Check if file has content
                              return json.loads(content)
                  return {}  # Return empty dict for non-existent or empty files
              except json.JSONDecodeError:
                  print(f"Warning: {file_path} contains invalid JSON or is empty. Using empty dict instead.")
                  return {}

          # List of benchmark files to combine
          benchmark_files = [
              'main_benchmark_results.json',
              'mettagrid_benchmark_results.json',
              'smoke_test_train_benchmark_results.json',
              'smoke_test_replay_benchmark_results.json'
          ]

          # Initialize combined results structure
          combined_results = {
              "machine_info": {},
              "commit_info": {},
              "benchmarks": []
          }

          # Load and combine all benchmark files
          valid_files_found = False
          for file_path in benchmark_files:
              results = safe_load_json(file_path)
              if not results:
                  print(f"Skipping empty or invalid file: {file_path}")
                  continue
              
              valid_files_found = True
              
              # Add benchmarks to the combined list
              if "benchmarks" in results and isinstance(results["benchmarks"], list):
                  combined_results["benchmarks"].extend(results["benchmarks"])
              
              # Use the first valid file's machine_info and commit_info if not already set
              if "machine_info" in results and not combined_results["machine_info"]:
                  combined_results["machine_info"] = results["machine_info"]
              
              if "commit_info" in results and not combined_results["commit_info"]:
                  combined_results["commit_info"] = results["commit_info"]

          # If no valid files were found, use an empty structure
          if not valid_files_found:
              print("No valid benchmark files found. Creating empty combined results.")
              combined_results = {}

          # Write combined results
          with open('combined_benchmark_results.json', 'w') as f:
              json.dump(combined_results, f, indent=2)

          print("Successfully combined benchmark results.")

          EOF

      - name: Install Bencher CLI
        uses: bencherdev/bencher@main

      - name: Validate Bencher Token
        env:
          BENCHER_API_TOKEN: ${{ secrets.BENCHER_API_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -z "$BENCHER_API_TOKEN" ]; then
            echo "Error: BENCHER_API_TOKEN is empty. Make sure the secret is properly set."
            exit 1
          fi
          echo "Bencher token length: ${#BENCHER_API_TOKEN}"
          echo "Bencher token SHA256: $(echo -n "$BENCHER_API_TOKEN" | sha256sum)"

      # Main Branch Upload section
      - name: Upload to Bencher (Main Branch Baseline)
        if: github.ref == 'refs/heads/main'
        env:
          BENCHER_API_TOKEN: ${{ secrets.BENCHER_API_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          bencher run \
            --project mettagrid-sv3f5i2k \
            --token "$BENCHER_API_TOKEN" \
            --branch main \
            --testbed ubuntu-latest \
            --threshold-measure latency \
            --threshold-test t_test \
            --threshold-max-sample-size 64 \
            --threshold-upper-boundary 0.99 \
            --thresholds-reset \
            --adapter python_pytest \
            --github-actions "$GITHUB_TOKEN" \
            --file combined_benchmark_results.json > /dev/null

      - name: Install jq
        run: |
          sudo apt-get install -y jq

      - name: Check if main branch has benchmark data
        if: github.event_name == 'pull_request' && !github.event.pull_request.head.repo.fork
        id: check-main-benchmark
        env:
          BENCHER_API_TOKEN: ${{ secrets.BENCHER_API_TOKEN }}
        run: |
          # Run the command and capture output in a variable
          bencher_result=$(bencher branch view mettagrid-sv3f5i2k main --token "$BENCHER_API_TOKEN")

          # Print the captured output
          echo "$bencher_result"

          # Save the output to a file for further processing
          echo "$bencher_result" > /tmp/branch_output.json

          # Continue with checking if branch exists and has data
          if [ $? -eq 0 ]; then
            echo "Branch exists, checking if it has benchmark data..."
            
            # Check if branch output contains a head key
            if jq -e '.head' /tmp/branch_output.json > /dev/null; then
              echo "main_benchmark_exists=true" >> $GITHUB_OUTPUT
              echo "Main branch has benchmark data. Will proceed with PR performance comparison."
            else
              echo "main_benchmark_exists=false" >> $GITHUB_OUTPUT
              echo "Warning: Main branch exists but does not have benchmark data yet. Will skip PR performance comparison."
            fi
          else
            echo "main_benchmark_exists=false" >> $GITHUB_OUTPUT
            echo "Warning: Main branch does not exist or cannot be accessed. Will skip PR performance comparison."
          fi

      # PR Performance Changes section - Only runs if main branch has benchmarks
      - name: Upload to Bencher (PR Performance Changes)
        if: |
          (github.event_name == 'pull_request') && 
          (!github.event.pull_request.head.repo.fork) && 
          (steps.check-main-benchmark.outputs.main_benchmark_exists == 'true')
        env:
          BENCHER_API_TOKEN: ${{ secrets.BENCHER_API_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          bencher run \
            --project mettagrid-sv3f5i2k \
            --token "$BENCHER_API_TOKEN" \
            --branch "$GITHUB_HEAD_REF" \
            --start-point "main" \
            --start-point-clone-thresholds \
            --start-point-reset \
            --testbed ubuntu-latest \
            --threshold-measure latency \
            --threshold-test percentage \
            --threshold-max-sample-size 64 \
            --threshold-upper-boundary 0.25 \
            --adapter python_pytest \
            --github-actions "$GITHUB_TOKEN" \
            --file combined_benchmark_results.json > /dev/null
