name: "Claude Assistant"

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  pull_request_review:
    types: [submitted]

permissions:
  contents: write
  pull-requests: write
  issues: write
  id-token: write
  actions: write

env:
  CLAUDE_MODEL: "claude-sonnet-4-20250514"

jobs:
  claude-response:
    if: contains(github.event.comment.body, '@claude')
    runs-on: ubuntu-latest
    outputs:
      action: ${{ steps.check_action.outputs.action }}
      review_types: ${{ steps.check_action.outputs.review_types }}
      pr_number: ${{ github.event.issue.number }}

    steps:
      - name: Debug - Workflow Context
        run: |
          echo "=== WORKFLOW DEBUG INFO ==="
          echo "Event: ${{ github.event_name }}"
          echo "Action: ${{ github.event.action }}"
          echo "Issue/PR Number: ${{ github.event.issue.number }}"
          echo "Comment Body: ${{ github.event.comment.body }}"
          echo "Comment Author: ${{ github.event.comment.user.login }}"
          echo "Repository: ${{ github.repository }}"
          echo "Is Pull Request: ${{ !!github.event.issue.pull_request }}"
          echo "==========================="

      - name: Check for action type
        id: check_action
        run: |
          echo "=== ACTION DETECTION DEBUG ==="
          echo "Full comment: ${{ github.event.comment.body }}"

          # Check for review commands first (must be on a PR)
          if [[ "${{ !!github.event.issue.pull_request }}" == "true" ]]; then
            if echo "${{ github.event.comment.body }}" | grep -q "@claude review"; then
              echo "✅ Detected: Review request"
              echo "action=review" >> $GITHUB_OUTPUT
              echo "fetch_depth=0" >> $GITHUB_OUTPUT

              # Extract review types from the comment
              # This regex captures everything after "review" until end of line or next @claude
              REVIEW_ARGS=$(echo "${{ github.event.comment.body }}" | sed -n 's/.*@claude review\s*\([^@]*\).*/\1/p' | head -1)
              echo "Review arguments: '$REVIEW_ARGS'"

              # Parse the review types
              REVIEW_TYPES=""

              # Check for special keywords first
              if echo "$REVIEW_ARGS" | grep -qw "all"; then
                echo "✅ Detected: All reviews requested"
                REVIEW_TYPES="readme,comments,types,einops"
              else
                # Parse comma-separated list
                # Remove brackets if present, normalize spacing
                PARSED_TYPES=$(echo "$REVIEW_ARGS" | sed 's/[\[\]]//g' | tr ',' '\n' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | grep -E '^(readme|comments|types|einops)$' | tr '\n' ',' | sed 's/,$//')

                if [ -z "$PARSED_TYPES" ]; then
                  echo "⚠️ No valid review types found, defaulting to all"
                  REVIEW_TYPES="readme,comments,types,einops"
                else
                  REVIEW_TYPES="$PARSED_TYPES"
                fi
              fi

              echo "review_types=$REVIEW_TYPES" >> $GITHUB_OUTPUT
              echo "✅ Review types to run: $REVIEW_TYPES"

            elif echo "${{ github.event.comment.body }}" | grep -q "@claude open-pr"; then
              echo "✅ Detected: PR creation request"
              echo "action=create_pr" >> $GITHUB_OUTPUT
              echo "fetch_depth=0" >> $GITHUB_OUTPUT
            else
              echo "✅ Detected: Regular comment request"
              echo "action=comment" >> $GITHUB_OUTPUT
              echo "fetch_depth=1" >> $GITHUB_OUTPUT
            fi
          else
            # Not on a PR, check for open-pr or default to comment
            if echo "${{ github.event.comment.body }}" | grep -q "@claude open-pr"; then
              echo "✅ Detected: PR creation request"
              echo "action=create_pr" >> $GITHUB_OUTPUT
              echo "fetch_depth=0" >> $GITHUB_OUTPUT
            else
              echo "✅ Detected: Regular comment request"
              echo "action=comment" >> $GITHUB_OUTPUT
              echo "fetch_depth=1" >> $GITHUB_OUTPUT
            fi
          fi
          echo "=============================="

      # Post acknowledgment for review requests
      - name: Post Review Acknowledgment
        if: steps.check_action.outputs.action == 'review'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const reviewTypes = '${{ steps.check_action.outputs.review_types }}'.split(',');

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🔍 **Starting Claude review...**\n\nI'll analyze:\n${reviewTypes.map(t => `- ${t.charAt(0).toUpperCase() + t.slice(1)}`).join('\n')}\n\nThis may take a few minutes. You can check the progress in the [Actions tab](${{ github.server_url }}/${{ github.repository }}/actions).`
            });

      # Only checkout and run Claude if not a review action
      - name: Checkout repository
        if: contains(fromJson('["comment", "create_pr"]'), steps.check_action.outputs.action)
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ steps.check_action.outputs.fetch_depth == '0' && 0 || 1 }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        if: steps.check_action.outputs.action == 'create_pr'
        run: |
          git config --global user.name "Claude Assistant"
          git config --global user.email "claude-assistant@users.noreply.github.com"

      - name: Debug - Check Secrets
        if: contains(fromJson('["comment", "create_pr"]'), steps.check_action.outputs.action)
        run: |
          echo "=== SECRETS DEBUG ==="
          if [ -n "${{ secrets.ANTHROPIC_API_KEY }}" ]; then
            echo "✅ ANTHROPIC_API_KEY is set"
          else
            echo "❌ ANTHROPIC_API_KEY is missing!"
          fi
          echo "=================="

      # Regular Claude responses for comments/questions
      - name: Claude Comment Response
        if: steps.check_action.outputs.action == 'comment'
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          model: ${{ env.CLAUDE_MODEL }}
          timeout_minutes: 30
          allowed_tools: "Bash(git status),Bash(git log --oneline -10),Bash(git show),Bash(git diff *),Bash(git branch -a),Bash(ruff check *),Bash(python -m *),Bash(./tools/*),View,GlobTool,GrepTool"
          custom_instructions: |
            Follow the project's coding standards defined in CLAUDE.md.
            Provide helpful analysis and suggestions for code improvements.
            Focus on code review, explanations, and suggestions rather than making changes.
            You have access to ruff for linting Python code if needed.

      # Determine target branch and generate new branch name
      - name: Determine branches
        if: steps.check_action.outputs.action == 'create_pr'
        id: branches
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let targetBranch = 'main'; // fallback
            let contextInfo = '';

            if (context.payload.issue.pull_request) {
              // Comment was made on a PR - target that PR's head branch
              console.log("Comment made on PR, fetching PR details...");
              const prResponse = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number
              });

              targetBranch = prResponse.data.head.ref;
              contextInfo = `PR #${context.issue.number} (${targetBranch})`;
              console.log(`Will target PR branch: ${targetBranch}`);
            } else {
              // Comment was made on an issue - use default branch
              const repoResponse = await github.rest.repos.get({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              targetBranch = repoResponse.data.default_branch;
              contextInfo = `issue #${context.issue.number} (${targetBranch})`;
              console.log(`Will target default branch: ${targetBranch}`);
            }

            // Generate unique branch name
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 19);
            const newBranch = `claude/auto-${context.issue.number}-${timestamp}`;

            console.log(`New branch: ${newBranch} -> ${targetBranch}`);

            // Set outputs
            core.setOutput('target_branch', targetBranch);
            core.setOutput('new_branch', newBranch);
            core.setOutput('context_info', contextInfo);

            return {
              targetBranch,
              newBranch,
              contextInfo
            };

      # Pre-create the branch before Claude runs
      - name: Setup branch for Claude
        if: steps.check_action.outputs.action == 'create_pr'
        run: |
          echo "=== SETTING UP BRANCH FOR CLAUDE ==="

          # Fetch all remote branches
          git fetch origin

          # Checkout and update the target branch
          git checkout ${{ steps.branches.outputs.target_branch }}
          git pull origin ${{ steps.branches.outputs.target_branch }}

          # Create and checkout the new branch
          git checkout -b ${{ steps.branches.outputs.new_branch }}

          echo "✅ Created branch: $(git branch --show-current)"
          echo "✅ Ready for Claude to make changes"

      # Claude PR creation with MCP tools instead of bash
      - name: Claude PR Creation
        if: steps.check_action.outputs.action == 'create_pr'
        uses: anthropics/claude-code-action@beta
        id: claude_pr
        continue-on-error: true
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          model: ${{ env.CLAUDE_MODEL }}
          timeout_minutes: 45
          direct_prompt: |
            You are working on branch: ${{ steps.branches.outputs.new_branch }}

            CRITICAL: You MUST use mcp__github_file_ops__commit_files to commit your changes.
            This tool will commit to the current branch (claude/auto-769-...).

            DO NOT use any git commands directly.
            DO NOT try to switch branches.

            After making all changes with Edit/Replace tools, use:
            mcp__github_file_ops__commit_files with a descriptive message.

            CONTEXT:
            - Working directory: /home/runner/work/metta/metta
            - Target branch: ${{ steps.branches.outputs.target_branch }}
            - Request from: ${{ steps.branches.outputs.context_info }}

            YOUR TASK: "${{ github.event.comment.body }}"

            WORKFLOW INSTRUCTIONS:
            1. Make all the requested code changes using Edit/Replace tools

            2. When all changes are complete, commit them using:
               mcp__github_file_ops__commit_files

               Use a descriptive commit message like:
               "feat: implement requested changes from ${{ steps.branches.outputs.context_info }}"

            IMPORTANT:
            - You are already on the correct branch - no git commands needed
            - Use Edit/Replace/Read tools to make changes
            - Use mcp__github_file_ops__commit_files to commit (this handles everything)
            - Do NOT try to use git commands or create a PR
            - The workflow will handle branch pushing and PR creation

          allowed_tools: "Edit,Replace,View,GlobTool,GrepTool,Read,Write,mcp__github_file_ops__commit_files,mcp__github__update_issue_comment"

      # Debug git state after Claude
      - name: Debug git state after Claude
        if: steps.check_action.outputs.action == 'create_pr' && steps.claude_pr.outcome == 'success'
        run: |
          echo "=== GIT STATE AFTER CLAUDE ==="
          echo "Current branch: $(git branch --show-current)"
          echo ""
          echo "Git status on current branch:"
          git status --short
          echo ""
          echo "Commits on current branch not on target:"
          git log --oneline origin/${{ steps.branches.outputs.target_branch }}..HEAD
          echo ""
          echo "=== CHECKING TARGET BRANCH ==="
          # Save current branch
          CURRENT_BRANCH=$(git branch --show-current)

          # Check target branch
          git checkout ${{ steps.branches.outputs.target_branch }}
          echo "Commits on target branch not on origin:"
          git log --oneline origin/${{ steps.branches.outputs.target_branch }}..HEAD

          # Return to original branch
          git checkout $CURRENT_BRANCH
          echo ""
          echo "=== ALL LOCAL BRANCHES ==="
          git branch -vv
          echo "================================"

      # Push the branch after Claude makes changes
      - name: Push branch if needed
        if: steps.check_action.outputs.action == 'create_pr' && steps.claude_pr.outcome == 'success'
        id: push_branch
        run: |
          echo "=== PUSHING BRANCH ==="

          # Check if there are any new commits
          COMMIT_COUNT=$(git rev-list --count origin/${{ steps.branches.outputs.target_branch }}..HEAD 2>/dev/null || echo "0")

          if [ "$COMMIT_COUNT" -gt "0" ]; then
            echo "✅ Found $COMMIT_COUNT new commits to push"

            # Push the branch
            git push -u origin ${{ steps.branches.outputs.new_branch }}

            echo "✅ Branch pushed successfully"
            echo "branch_pushed=true" >> $GITHUB_OUTPUT
            echo "has_commits=true" >> $GITHUB_OUTPUT
            echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT
          else
            echo "❌ No new commits found"
            echo "branch_pushed=false" >> $GITHUB_OUTPUT
            echo "has_commits=false" >> $GITHUB_OUTPUT
          fi

      # Create PR only if branch was pushed successfully
      - name: Create Pull Request
        if: steps.check_action.outputs.action == 'create_pr' && steps.push_branch.outputs.branch_pushed == 'true' && steps.push_branch.outputs.has_commits == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              console.log("=== CREATING PULL REQUEST ===");

              const targetBranch = "${{ steps.branches.outputs.target_branch }}";
              const newBranch = "${{ steps.branches.outputs.new_branch }}";
              const contextInfo = "${{ steps.branches.outputs.context_info }}";
              const commitCount = "${{ steps.push_branch.outputs.commit_count }}";

              console.log(`Creating PR: ${newBranch} -> ${targetBranch}`);
              console.log(`Context: ${contextInfo}`);

              // Get latest commit for PR title
              const { execSync } = require('child_process');
              const latestCommit = execSync('git log -1 --pretty=format:"%s"', { encoding: 'utf-8' }).trim();

              const prTitle = latestCommit.length > 50
                ? `${latestCommit.substring(0, 47)}...`
                : latestCommit;

              // Create the PR targeting the original branch
              const prResponse = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: prTitle,
                head: newBranch,
                base: targetBranch,
                body: [
                  "🤖 **Automated PR created by Claude**",
                  "",
                  "**Original request:**",
                  "> ${{ github.event.comment.body }}",
                  "",
                  `**Context:** This PR addresses the request from ${contextInfo}`,
                  `**Target:** This PR will merge into \`${targetBranch}\` (not main)`,
                  "",
                  "**Changes made:**",
                  `- ${commitCount} commit(s) with: ${latestCommit}`,
                  "",
                  `**Branch flow:** \`${newBranch}\` → \`${targetBranch}\``,
                  "",
                  "---",
                  "*This PR was automatically created by Claude Code Assistant. It targets the original feature branch for iterative development.*"
                ].join('\n')
              });

              console.log(`✅ Created PR #${prResponse.data.number}: ${prResponse.data.html_url}`);

              // Post success comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: [
                  "🚀 **PR Created Successfully!**",
                  "",
                  `I've implemented your request and created PR #${prResponse.data.number}:`,
                  `${prResponse.data.html_url}`,
                  "",
                  `**Branch flow:** \`${newBranch}\` → \`${targetBranch}\``,
                  `**Commits:** ${commitCount}`,
                  `**Changes:** ${latestCommit}`,
                  "",
                  context.payload.issue.pull_request
                    ? `This PR targets your feature branch \`${targetBranch}\` for iterative development! 🔄`
                    : "This PR is ready for review! 🎉"
                ].join('\n')
              });

            } catch (error) {
              console.error('Error creating PR:', error);

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: [
                  "❌ **Failed to create PR**",
                  "",
                  `Error: ${error.message}`,
                  "",
                  "**Debug info:**",
                  `- New branch: \`${{ steps.branches.outputs.new_branch }}\``,
                  `- Target branch: \`${{ steps.branches.outputs.target_branch }}\``,
                  `- Branch pushed: ${{ steps.push_branch.outputs.branch_pushed }}`,
                  `- Has commits: ${{ steps.push_branch.outputs.has_commits }}`,
                  `- Commit count: ${{ steps.push_branch.outputs.commit_count }}`,
                  "",
                  "Please check the Actions logs for more details."
                ].join('\n')
              });
            }

      # Handle case where Claude didn't complete the workflow
      - name: Handle workflow failure
        if: steps.check_action.outputs.action == 'create_pr' && (steps.push_branch.outputs.branch_pushed != 'true' || steps.push_branch.outputs.has_commits != 'true')
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let reason = "Unknown issue";

            if ("${{ steps.push_branch.outputs.has_commits }}" !== 'true') {
              reason = "No changes were committed";
            } else if ("${{ steps.push_branch.outputs.branch_pushed }}" !== 'true') {
              reason = "Failed to push the branch";
            }

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: [
                "⚠️ **Unable to create PR**",
                "",
                `**Reason:** ${reason}`,
                "",
                "**Debug info:**",
                `- Expected branch: \`${{ steps.branches.outputs.new_branch }}\``,
                `- Target branch: \`${{ steps.branches.outputs.target_branch }}\``,
                `- Has commits: ${{ steps.push_branch.outputs.has_commits }}`,
                `- Branch pushed: ${{ steps.push_branch.outputs.branch_pushed }}`,
                `- Claude execution: ${{ steps.claude_pr.outcome }}`,
                "",
                "**Possible solutions:**",
                "- Try a simpler, more specific request",
                "- Check if the changes conflict with existing code",
                "- Ensure Claude used mcp__github_file_ops__commit_files to commit",
                "",
                "You can view the full execution logs in the Actions tab for more details."
              ].join('\n')
            });

      # Add help message for unrecognized commands on PRs
      - name: Post Help Message
        if: steps.check_action.outputs.action == 'comment' && github.event.issue.pull_request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Check if the comment might have been trying to use a review command
            const comment = "${{ github.event.comment.body }}".toLowerCase();
            if (comment.includes('review')) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: [
                  "💡 **Claude Review Commands Available**",
                  "",
                  "I noticed you mentioned 'review'. Here's how to use review commands:",
                  "",
                  "**Syntax:** `@claude review <types>`",
                  "",
                  "**Examples:**",
                  "- `@claude review all` - Run all review types",
                  "- `@claude review einops` - Check for einops optimization opportunities",
                  "- `@claude review comments, types` - Review comments and type annotations",
                  "- `@claude review readme, einops, comments` - Run multiple specific reviews",
                  "",
                  "**Available review types:**",
                  "- `readme` - Verify README accuracy",
                  "- `comments` - Review code comments and docstrings",
                  "- `types` - Check type annotations",
                  "- `einops` - Suggest einops optimizations",
                  "- `all` - Run all review types",
                  "",
                  "You can also:",
                  "- `@claude open-pr` - Create a new PR with changes",
                  "- `@claude [question]` - Ask me anything about the code",
                  "",
                  "*Note: Review commands only work on pull requests.*"
                ].join('\n')
              });
            }

      - name: Final Debug Summary
        if: always()
        run: |
          echo "=== FINAL WORKFLOW SUMMARY ==="
          echo "Action type: ${{ steps.check_action.outputs.action }}"
          echo "New branch: ${{ steps.branches.outputs.new_branch }}"
          echo "Target branch: ${{ steps.branches.outputs.target_branch }}"
          echo "Context: ${{ steps.branches.outputs.context_info }}"
          echo "Branch pushed: ${{ steps.push_branch.outputs.branch_pushed }}"
          echo "Has commits: ${{ steps.push_branch.outputs.has_commits }}"
          echo "Commit count: ${{ steps.push_branch.outputs.commit_count }}"
          echo "Claude outcome: ${{ steps.claude_pr.outcome }}"
          echo "Workflow status: ${{ job.status }}"
          echo "=============================="

  # Call the orchestrator workflow as a job when review is requested
  run-orchestrator:
    needs: claude-response
    if: needs.claude-response.outputs.action == 'review'
    uses: ./.github/workflows/claude-review-orchestrator.yml
    secrets: inherit
    with:
      pr_number: ${{ needs.claude-response.outputs.pr_number }}
      run_readme: ${{ contains(needs.claude-response.outputs.review_types, 'readme') }}
      run_comments: ${{ contains(needs.claude-response.outputs.review_types, 'comments') }}
      run_types: ${{ contains(needs.claude-response.outputs.review_types, 'types') }}
      run_einops: ${{ contains(needs.claude-response.outputs.review_types, 'einops') }}
