name: 'Run Unified Bencher Analysis'
description: 'Run Bencher analysis with clean core KPI metrics only'
inputs:
  bencher_token:
    description: 'Bencher API token'
    required: true
  github_token:
    description: 'GitHub token'
    required: true
  benchmark_file:
    description: 'Unified benchmark results file (BMF format)'
    required: true
  project_id:
    description: 'Bencher project ID'
    default: 'mettagrid-sv3f5i2k'

runs:
  using: 'composite'
  steps:
    - name: Install Bencher CLI
      uses: bencherdev/bencher@main

    - name: Install jq
      shell: bash
      run: sudo apt-get install -y jq

    - name: Check main branch status
      id: check-main
      shell: bash
      env:
        BENCHER_API_TOKEN: ${{ inputs.bencher_token }}
      run: |
        if bencher branch view ${{ inputs.project_id }} main --token "$BENCHER_API_TOKEN" > /tmp/branch_output.json 2>/dev/null; then
          if jq -e '.head' /tmp/branch_output.json > /dev/null; then
            echo "main_exists=true" >> $GITHUB_OUTPUT
          else
            echo "main_exists=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "main_exists=false" >> $GITHUB_OUTPUT
        fi

    # Main branch: Upload baseline and configure clean KPI thresholds
    - name: Upload baseline with clean KPI thresholds (main branch)
      if: github.ref == 'refs/heads/main'
      shell: bash
      env:
        BENCHER_API_TOKEN: ${{ inputs.bencher_token }}
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        echo "üìä Uploading baseline data with clean KPI thresholds..."
        
        if [ -f "${{ inputs.benchmark_file }}" ] && [ -s "${{ inputs.benchmark_file }}" ]; then
          echo "üéØ Setting up core KPI thresholds..."
          
          # Core throughput KPIs - alert on ANY 20% change (bidirectional)
          declare -A THROUGHPUT_METRICS=(
            ["agent_steps_per_second"]="Agent throughput KPI"
            ["env_steps_per_second"]="Environment throughput KPI"  
            ["resets_per_second"]="Reset efficiency KPI"
            ["actions_per_second"]="Action processing KPI"
          )
          
          for metric in "${!THROUGHPUT_METRICS[@]}"; do
            echo "Setting bidirectional threshold for ${THROUGHPUT_METRICS[$metric]}: $metric"
            bencher run \
              --project ${{ inputs.project_id }} \
              --token "$BENCHER_API_TOKEN" \
              --branch main \
              --threshold-measure "$metric" \
              --threshold-test percentage \
              --threshold-max-sample-size 2 \
              --threshold-lower-boundary 0.20 \
              --threshold-upper-boundary 0.20 \
              --testbed ubuntu-latest \
              --adapter json \
              --github-actions "$GITHUB_TOKEN" \
              --file "${{ inputs.benchmark_file }}" 2>/dev/null || echo "No $metric data found"
          done
          
          # Latency KPIs - alert only on increases (regressions)
          declare -A LATENCY_METRICS=(
            ["cpu_time"]="CPU efficiency"
            ["latency"]="General latency"
          )
          
          for metric in "${!LATENCY_METRICS[@]}"; do
            echo "Setting upper threshold for ${LATENCY_METRICS[$metric]}: $metric"
            bencher run \
              --project ${{ inputs.project_id }} \
              --token "$BENCHER_API_TOKEN" \
              --branch main \
              --threshold-measure "$metric" \
              --threshold-test percentage \
              --threshold-max-sample-size 2 \
              --threshold-upper-boundary 0.20 \
              --testbed ubuntu-latest \
              --adapter json \
              --github-actions "$GITHUB_TOKEN" \
              --file "${{ inputs.benchmark_file }}" 2>/dev/null || echo "No $metric data found"
          done
          
          echo "‚úÖ Clean KPI thresholds configured"
        else
          echo "‚ö†Ô∏è  No benchmark file found: ${{ inputs.benchmark_file }}"
        fi

    # PR: Check for ANY significant changes in core KPIs
    - name: Check for significant KPI changes
      if: |
        github.event_name == 'pull_request' &&
        !github.event.pull_request.head.repo.fork &&
        steps.check-main.outputs.main_exists == 'true'
      shell: bash
      env:
        BENCHER_API_TOKEN: ${{ inputs.bencher_token }}
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        echo "üö® Checking for significant changes in core KPIs (¬±20% = alert + test failure)..."
        
        if [ -f "${{ inputs.benchmark_file }}" ]; then
          echo "Running KPI performance check with pre-configured thresholds..."
          
          # Single run that checks all core KPIs using their pre-configured thresholds
          # This will fail if ANY core KPI changes by 20% in either direction
          bencher run \
            --project ${{ inputs.project_id }} \
            --token "$BENCHER_API_TOKEN" \
            --branch "$GITHUB_HEAD_REF" \
            --start-point main \
            --start-point-reset \
            --start-point-clone-thresholds \
            --err \
            --testbed ubuntu-latest \
            --adapter json \
            --github-actions "$GITHUB_TOKEN" \
            --file "${{ inputs.benchmark_file }}"
            
          echo "‚úÖ No significant KPI changes detected"
        else
          echo "‚ö†Ô∏è  No benchmark file found: ${{ inputs.benchmark_file }}"
          exit 1
        fi