# This config shows the features of the mapgen system.
_target_: mettagrid.map.mapgen.MapGen

# With mapgen, top-level width and height must be known in advance. We don't do layout based on children components.
# So this is not exactly the same as the old simple.yaml config, but it's very close.
width: 50
height: 40

# Outer border width. Defaults to 1.
# This border will be added outside of width and height.
border_width: 2

# MapGen is a tree of nodes, instantiated from scenes.
# You can think of scenes as blueprints for nodes: parameters and the behavior that instantiate nodes.
# The terminology is inspired by Godot.

# This is the root scene.
root:
  # Class of scene to instantiate.
  _target_: mettagrid.map.scenes.room_grid.RoomGrid

  # Parameters to pass to the scene constructor.
  # This will draw 6 rooms in a 2x3 grid, all empty.
  rows: 2
  columns: 3
  border_width: 1

  # Most scenes can have children nodes.
  # Each child is created in the areas (slots) defined by the parent scene, so the specific areas are determined by the parent scene.
  #
  # You can think of the children config listed below as a list of SQL-like queries.
  # Each child on the list can match several areas and so produce multiple nodes.
  #
  # Children are applied in order, so you can also think of them as "paint" commands or layers.
  # Children that come later in the list will be rendered on top of the map that was rendered previously, and can erase or modify the map.
  children:
    - # First, let's turn two rooms into mazes.

      # Take only two areas; if not set, all matching areas are selected.
      limit: 2

      # Random mode is default, which means "take 2 random areas"; other modes are "first" and "last".
      # If `limit` is not set, `order_by` is ignored.
      order_by: random

      # Optionally lock selected areas; will be explained later.
      lock: lockname

      # Scene will be instantiated for each matched area.
      scene:
        _target_: mettagrid.map.scenes.maze.MazeKruskal

        # Scenes can be nested arbitrarily.
        # MazeKruskal defines a 1x1 area at each of the four corners, so we can use these to place an agent and an altar.
        children:
          - where: # similar to SQL "WHERE" clause; selects areas based on their tags.
              # Each corner is tagged, so we can select them individually.
              # These tags are specific for MazeKruskal scene. Other scenes might have different tags.
              tags:
                - top-left
            scene:
              _target_: mettagrid.map.scenes.inline_ascii.InlineAscii
              data: A
          - where:
              tags:
                - bottom-right
            scene:
              _target_: mettagrid.map.scenes.inline_ascii.InlineAscii
              data: a

    - # No conditions, so all areas are selected.
      scene:
        _target_: mettagrid.map.scenes.random.Random

        # Let's place some objects in each room.
        # Note that for the maze rooms, Random scene will take existing walls into account.
        objects:
          mine: 1
          generator: 2

    # What if we want to draw a custom scene in one room, but that room shouldn't have a maze? Let's use a lock.
    #
    # Lock will exclude the areas that were already selected by previous children that use the same lock name.
    # So this guarantees that the custom map will not overlap with the maze.
    - lock: lockname
      limit: 1

      scene:
        _target_: mettagrid.map.scenes.inline_ascii.InlineAscii
        data: |
          WWWWWWWWWW
               A    
          WWWWWWWWWW
        # Indenting in YAML is not easy, so we can specify row and column explicitly.
        # If not set, the map will be drawn in the top-left corner of the area.
        row: 2
        column: 3

    # Fill the remaining 3 rooms with agents.
    - lock: lockname
      scene:
        _target_: mettagrid.map.scenes.random.Random
        agents: 1
