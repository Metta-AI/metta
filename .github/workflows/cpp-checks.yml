name: "C++"
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'merge_group' && github.event.merge_group.head_ref || github.ref }}
  cancel-in-progress: true
on:
  pull_request:
    types: [opened, synchronize, ready_for_review]
    branches: [main]
  push:
    branches: [main]
  merge_group:
    types: [checks_requested]
    branches: [main]
  workflow_dispatch:
    inputs:
      run_lint:
        description: 'Run lint checks'
        type: boolean
        default: true
      run_test:
        description: 'Run tests'
        type: boolean
        default: true
      run_benchmark:
        description: 'Run benchmarks'
        type: boolean
        default: true

# Set default permissions
permissions:
  checks: write
  pull-requests: write

jobs:
  # First job: check if any C++ files have changed
  setup-cpp-checks:
    name: "Set up for C++ checks"
    if: |
      github.event.pull_request.draft == false || 
      github.event_name == 'push' || 
      github.event_name == 'workflow_dispatch' || 
      github.event_name == 'merge_group'
    runs-on: ubuntu-latest
    outputs:
      has_relevant_changes: ${{ steps.check_cpp_files.outputs.has_relevant_changes }}
      main_sha: ${{ steps.get-main-sha.outputs.MAIN_SHA }}
      run_lint: ${{ steps.determine_tasks.outputs.run_lint }}
      run_test: ${{ steps.determine_tasks.outputs.run_test }}
      run_benchmark: ${{ steps.determine_tasks.outputs.run_benchmark }}
      cache_key: ${{ steps.set-cache-key.outputs.cache_key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for C++ and Cython file changes
        id: check_cpp_files
        uses: ./.github/actions/file-changes
        with:
          patterns: "*.cpp,*.cxx,*.cc,*.h,*.hpp,*.pyx,*.pxd"
          directory_paths: "mettagrid/"
          specific_files: "requirements.txt,setup.py"
          github-token: ${{ secrets.GITHUB_TOKEN }}
         
      - name: Generate cache key
        id: set-cache-key
        run: |
          # Create a cache key based on commit SHA and relevant file hashes
          HASH=$(find mettagrid -type f \( -name "*.cpp" -o -name "*.h" -o -name "*.hpp" \) -exec sha256sum {} \; | sort | sha256sum | cut -d' ' -f1)
          echo "cache_key=${{ github.sha }}-${HASH}-cpp-build" >> $GITHUB_OUTPUT
         
      - name: Get main branch head SHA
        id: get-main-sha
        run: |
          git fetch origin main
          echo "MAIN_SHA=$(git rev-parse origin/main)" >> $GITHUB_OUTPUT
          echo "found main branch at commit $(git rev-parse origin/main)"
      
      - name: Determine which tasks to run
        id: determine_tasks
        run: |
          # Default behavior based on event type and file changes
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Use workflow dispatch inputs for manual runs
            RUN_LINT="${{ github.event.inputs.run_lint }}"
            RUN_TEST="${{ github.event.inputs.run_test }}"
            RUN_BENCHMARK="${{ github.event.inputs.run_benchmark }}"
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ steps.check_cpp_files.outputs.has_relevant_changes }}" == "false" ]]; then
            # Skip everything for PRs with no relevant changes
            RUN_LINT="false"
            RUN_TEST="false"
            RUN_BENCHMARK="false"
            echo "::notice title=Skipping Tasks::Skipping all tasks because no relevant files have changed"
          else
            # Default to running everything for other events or when changes exist
            RUN_LINT="true"
            RUN_TEST="true"
            RUN_BENCHMARK="true"
          fi
          
          # Output the decisions
          echo "run_lint=${RUN_LINT}" >> $GITHUB_OUTPUT
          echo "run_test=${RUN_TEST}" >> $GITHUB_OUTPUT
          echo "run_benchmark=${RUN_BENCHMARK}" >> $GITHUB_OUTPUT

          echo "lint? ${RUN_LINT}   -   test? ${RUN_TEST}   -   benchmark? ${RUN_BENCHMARK}"

  # Build and cache the C++ artifacts
  setup-cpp:
    name: "Setup C++"
    needs: setup-cpp-checks
    if: |
      needs.setup-cpp-checks.outputs.run_lint == 'true' || 
      needs.setup-cpp-checks.outputs.run_test == 'true' || 
      needs.setup-cpp-checks.outputs.run_benchmark == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install C++ dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y g++ cmake libgtest-dev libbenchmark-dev clang-format

      # Try to restore cache
      - name: Cache C++ build
        id: cache-cpp
        uses: actions/cache@v3
        with:
          path: |
            mettagrid/build
            ~/.cache/pip
          key: ${{ needs.setup-cpp-checks.outputs.cache_key }}
          restore-keys: |
            ${{ github.sha }}-cpp-build
            cpp-build-

      # Prebuild step only if cache miss
      - name: Prebuild C++ artifacts
        if: steps.cache-cpp.outputs.cache-hit != 'true'
        run: |
          cd mettagrid
          make build

  lint:
    name: "Lint"
    needs: [setup-cpp-checks, setup-cpp]
    if: needs.setup-cpp-checks.outputs.run_lint == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      # Restore the cached C++ build if needed
      - name: Cache C++ build
        uses: actions/cache@v3
        with:
          path: |
            mettagrid/build
            ~/.cache/pip
          key: ${{ needs.setup-cpp-checks.outputs.cache_key }}
          restore-keys: |
            ${{ github.sha }}-cpp-build
            cpp-build-

      - name: Run clang-format check
        run: |
          echo "Checking C++ formatting..."
          find . -type f \( -name "*.cpp" -o -name "*.h" -o -name "*.hpp" \) \
            -not -path "*/build/*" -not -path "*/venv/*" \
            -exec clang-format --dry-run --Werror {} +

  test:
    name: "Test"
    needs: [setup-cpp-checks, setup-cpp]
    if: needs.setup-cpp-checks.outputs.run_test == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      # Restore the cached C++ build
      - name: Cache C++ build
        uses: actions/cache@v3
        with:
          path: |
            mettagrid/build
            ~/.cache/pip
          key: ${{ needs.setup-cpp-checks.outputs.cache_key }}
          restore-keys: |
            ${{ github.sha }}-cpp-build
            cpp-build-

      - name: Build and run tests
        run: |
          cd mettagrid
          make test

  benchmark:
    name: "Benchmark"
    needs: [setup-cpp-checks, setup-cpp]
    if: needs.setup-cpp-checks.outputs.run_benchmark == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      # Restore the cached C++ build
      - name: Cache C++ build
        uses: actions/cache@v3
        with:
          path: |
            mettagrid/build
            ~/.cache/pip
          key: ${{ needs.setup-cpp-checks.outputs.cache_key }}
          restore-keys: |
            ${{ github.sha }}-cpp-build
            cpp-build-

      - name: Build and run benchmarks with JSON output
        run: |
          cd mettagrid
          mkdir -p benchmark_output
          echo "Running benchmarks with JSON output..."
          make bench-json
          echo "Benchmark output files:"
          ls -la benchmark_output/

      - name: Install Bencher CLI
        uses: bencherdev/bencher@main

      - name: Validate Bencher Token
        env:
          BENCHER_API_TOKEN: ${{ secrets.BENCHER_API_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -z "$BENCHER_API_TOKEN" ]; then
            echo "Error: BENCHER_API_TOKEN is empty. Make sure the secret is properly set."
            exit 1
          fi
          echo "Bencher token length: ${#BENCHER_API_TOKEN}"
          echo "Bencher token SHA256: $(echo -n "$BENCHER_API_TOKEN" | sha256sum)"

      # Main Branch Upload section
      - name: Upload to Bencher (Main Branch Baseline)
        if: github.ref == 'refs/heads/main'
        env:
          BENCHER_API_TOKEN: ${{ secrets.BENCHER_API_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd mettagrid/benchmark_output
          ls -al
          if ls *.json 1> /dev/null 2>&1; then
            for file in *.json; do
              bencher run \
                --project mettagrid-sv3f5i2k \
                --token "$BENCHER_API_TOKEN" \
                --branch main \
                --threshold-measure latency \
                --threshold-test t_test \
                --threshold-max-sample-size 64 \
                --threshold-upper-boundary 0.99 \
                --thresholds-reset \
                --testbed ubuntu-latest \
                --adapter cpp_google \
                --github-actions "$GITHUB_TOKEN" \
                --file "$file" > /dev/null
            done
          else
            echo "NO TEST RESULTS FOUND"
          fi

      # PR Performance Changes section
      - name: Upload to Bencher (PR Performance Changes)
        if: github.event_name == 'pull_request' && !github.event.pull_request.head.repo.fork
        env:
          BENCHER_API_TOKEN: ${{ secrets.BENCHER_API_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MAIN_SHA: ${{ needs.setup-cpp-checks.outputs.main_sha }}
        run: |
          cd mettagrid/benchmark_output
          ls -al
          if ls *.json 1> /dev/null 2>&1; then
            for file in *.json; do
              bencher run \
                --project mettagrid-sv3f5i2k \
                --token "$BENCHER_API_TOKEN" \
                --branch "$GITHUB_HEAD_REF" \
                --start-point "main" \
                --start-point-hash "$MAIN_SHA" \
                --start-point-clone-thresholds \
                --start-point-reset \
                --threshold-measure latency \
                --threshold-test t_test \
                --threshold-max-sample-size 64 \
                --threshold-upper-boundary 0.99 \
                --testbed ubuntu-latest \
                --adapter cpp_google \
                --github-actions "$GITHUB_TOKEN" \
                --err \
                --file "$file" > /dev/null
            done
          else
            echo "NO TEST RESULTS FOUND"
          fi