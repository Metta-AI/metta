// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User authentication tables (NextAuth.js)
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  authenticators Authenticator[]
  posts         Post[]
  userPaperInteractions UserPaperInteraction[]
  comments              Comment[]
  @@map("user")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@id([provider, providerAccountId])
  @@map("account")
}

model Session {
  sessionToken String   @id
  userId       String
  expires      DateTime
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("session")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  
  @@id([identifier, token])
  @@map("verificationToken")
}

model Authenticator {
  credentialID           String
  userId                 String
  providerAccountId      String
  credentialPublicKey    String
  counter                Int
  credentialDeviceType   String
  credentialBackedUp     Boolean
  transports             String?
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@id([userId, credentialID])
  @@unique([credentialID])
  @@map("authenticator")
}

// Posts table for social feed
model Post {
  id        String     @id @default(cuid())
  authorId  String
  title     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  content   String?
  postType  String     @default("user-post")
  queues    Int        @default(0)
  replies   Int        @default(0)
  paperId   String?
  author    User       @relation(fields: [authorId], references: [id])
  paper     Paper?     @relation(fields: [paperId], references: [id])
  comments  Comment[]
  @@map("post")
}

// Papers table for research content
model Paper {
  id                    String                 @id @default(cuid())
  title                 String
  abstract              String?
  institutions          String[]
  tags                  String[]
  link                  String?
  source                String?
  externalId            String?
  stars                 Int                    @default(0)
  starred               Boolean                @default(false)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @default(now()) @updatedAt
  llmAbstract           Json?                  // LLM-generated enhanced abstract
  llmAbstractGeneratedAt DateTime?             // When LLM abstract was generated
  paperAuthors          PaperAuthor[]
  posts                 Post[]
  userPaperInteractions UserPaperInteraction[]
  
  @@map("paper")
}

// User paper interactions table
model UserPaperInteraction {
  userId   String
  paperId  String
  starred  Boolean @default(false)
  readAt   DateTime?
  queued   Boolean @default(false)
  notes    String?
  
  // Relations
  user  User  @relation(fields: [userId], references: [id])
  paper Paper @relation(fields: [paperId], references: [id])
  
  @@id([userId, paperId])
  @@map("user_paper_interaction")
}

// Comment model for post discussions
model Comment {
  id        String   @id @default(cuid())
  postId    String
  authorId  String
  content   String
  parentId  String?  // For nested replies
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  
  // Relations
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  author   User      @relation(fields: [authorId], references: [id])
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")
  
  @@map("comment")
}

// Authors table for paper authors
model Author {
  id           String        @id @default(cuid())
  name         String
  orcid        String?       @unique
  institution  String?
  researchAreas String[]
  hIndex       Int?
  citationCount Int?
  bio          String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  
  // Relations
  paperAuthors PaperAuthor[]
  
  @@map("author")
}

// Junction table for many-to-many relationship between Papers and Authors
model PaperAuthor {
  paperId  String
  authorId String
  order    Int     @default(0) // Author order in the paper
  
  // Relations
  paper  Paper  @relation(fields: [paperId], references: [id])
  author Author @relation(fields: [authorId], references: [id])
  
  @@id([paperId, authorId])
  @@map("paper_author")
}


