name: Tag Protection Bypasses
on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      merge_sha:
        description: "Merge commit SHA to tag"
        required: true
        type: string
permissions:
  contents: write
  pull-requests: read
jobs:
  tag-if-bypassed:
    if: github.event_name == 'workflow_dispatch' || github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 1

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check if protections were bypassed
        run: |
          # Use manual inputs or PR event data
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            MERGE_SHA=${{ inputs.merge_sha }}

            # Look up PR number from commit
            echo "Looking up PR number from commit $MERGE_SHA..."
            PR_NUMBER=$(gh api repos/${{ github.repository }}/commits/$MERGE_SHA/pulls --jq '.[0].number')
            if [ -z "$PR_NUMBER" ]; then
              echo "Error: Could not find PR associated with commit $MERGE_SHA"
              exit 1
            fi
            echo "Found PR #$PR_NUMBER"

            git fetch --depth=1 origin $MERGE_SHA
          else
            PR_NUMBER=${{ github.event.pull_request.number }}
            MERGE_SHA=${{ github.event.pull_request.merge_commit_sha }}
          fi

          echo "Checking PR #$PR_NUMBER (SHA: $MERGE_SHA)"

          # Get rulesets for main branch
          RULESET_ID=$(gh api repos/${{ github.repository }}/rulesets --jq '.[] | select(.target == "branch") | .id' | head -1)

          if [ -z "$RULESET_ID" ]; then
            echo "Warning: No rulesets found"
            exit 0
          fi

          echo "Using ruleset ID: $RULESET_ID"
          RULESET=$(gh api repos/${{ github.repository }}/rulesets/$RULESET_ID)

          # Check reviews requirement
          REQUIRED_REVIEWS=$(echo "$RULESET" | jq -r '.rules[] | select(.type == "pull_request") | .parameters.required_approving_review_count // 0')
          ACTUAL_REVIEWS=$(gh pr view $PR_NUMBER --json reviews --jq '[.reviews[] | select(.state == "APPROVED")] | length')

          # Check status checks requirement
          REQUIRED_CHECK_CONTEXTS=$(echo "$RULESET" | jq -r '.rules[] | select(.type == "required_status_checks") | .parameters.required_status_checks[].context' | wc -l)

          # Get PR status checks
          STATUS_CHECKS=$(gh pr view $PR_NUMBER --json statusCheckRollup --jq '.statusCheckRollup')
          PASSED_CHECKS=$(echo "$STATUS_CHECKS" | jq '[.[] | select(.conclusion == "SUCCESS")] | length')

          echo "Required reviews: $REQUIRED_REVIEWS, Actual: $ACTUAL_REVIEWS"
          echo "Required checks: $REQUIRED_CHECK_CONTEXTS, Passed: $PASSED_CHECKS"

          # Tag if bypassed
          if [ "$ACTUAL_REVIEWS" -lt "$REQUIRED_REVIEWS" ] || [ "$PASSED_CHECKS" -lt "$REQUIRED_CHECK_CONTEXTS" ]; then
            TIMESTAMP=$(date +%s)
            TAG_NAME="forced-${TIMESTAMP}"
            git tag -a "$TAG_NAME" $MERGE_SHA -m "Protection bypassed on PR #$PR_NUMBER"
            git push origin "$TAG_NAME"
            echo "Tagged: Protection bypass detected"
          else
            echo "No bypass detected"
          fi
        env:
          GH_TOKEN: ${{ secrets.METTA_PROTECTION_BYPASS_TAG_PAT }}
