name: "Setup uv"
description: "Set up uv and activate the environment"
inputs:
  include-dev:
    description: "Whether to include dev dependencies"
    required: false
    default: "true"
  install-mode:
    description: "Installation mode: 'full' (default), 'testing', or 'linting'"
    required: false
    default: "full"

runs:
  using: "composite"
  steps:
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "0.7.3"
        enable-cache: true
        cache-local-path: "~/.cache/uv"
        prune-cache: false
        cache-suffix: "${{ inputs.install-mode }}-${{ inputs.include-dev }}"

    - name: Create virtual environment with uv
      shell: bash
      run: |
        uv venv

        # Export environment variables
        echo "VIRTUAL_ENV=$(pwd)/.venv" >> $GITHUB_ENV
        echo "$(pwd)/.venv/bin" >> $GITHUB_PATH

        # Handle different installation modes
        case "${{ inputs.install-mode }}" in

          "testing")
            uv sync --no-install-workspace
            uv pip install --no-deps -e .
            uv pip install --no-deps -e ./common
            uv pip install --no-deps -e ./agent
            uv pip install --no-deps -e ./app_backend
            uv pip install scikit-build-core pytest pytest-cov gcovr
            ;;

          "linting")
            uv pip install ruff cpplint
            ;;

          "full"|*)
            if [ "${{ inputs.include-dev }}" = "true" ]; then
              uv sync
            else
              uv sync --no-default-groups
            fi
            ;;

        esac
