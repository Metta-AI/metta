name: "Setup Tests"
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'merge_group' && github.event.merge_group.head_ref || github.ref }}
  cancel-in-progress: true
on:
  pull_request:
    types: [opened, synchronize, ready_for_review]
  push:
    branches: [main]
  merge_group:
    types: [checks_requested]
    branches: [main]
  workflow_dispatch:
    inputs:
      run_test:
        description: "Run tests"
        type: boolean
        default: true

# Set default permissions
permissions:
  checks: write
  pull-requests: write

jobs:
  # check if CI should run based on Graphite's stack position
  graphite-ci-optimizer:
    name: "Graphite CI Optimizer"
    if: |
      github.event.pull_request.draft == false ||
      github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'merge_group'
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.graphite_ci.outputs.skip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Graphite CI Optimizer
        id: graphite_ci
        uses: withgraphite/graphite-ci-action@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          graphite_token: ${{ secrets.GRAPHITE_TOKEN }}

  # check if any source code files have changed
  setup-checks:
    name: "Set up for source code checks"
    needs: [graphite-ci-optimizer]
    if: |
      (needs.graphite-ci-optimizer.outputs.should_skip == 'false') &&
      (github.event.pull_request.draft == false ||
        github.event_name == 'push' ||
        github.event_name == 'workflow_dispatch' ||
        github.event_name == 'merge_group')
    runs-on: ubuntu-latest
    outputs:
      has_relevant_changes: ${{ steps.check_files.outputs.has_relevant_changes }}
      run_test: ${{ steps.determine_tasks.outputs.run_test }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for file changes
        id: check_files
        uses: ./.github/actions/file-changes
        with:
          patterns: "**/*.py,**/pyproject.toml,**/pytest.ini,.github/workflows/*.yml"
          specific_files: "uv.lock"
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine which tasks to run
        id: determine_tasks
        run: |
          # Default behavior based on event type and file changes
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Use workflow dispatch inputs for manual runs
            RUN_TEST="${{ github.event.inputs.run_test }}"
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ steps.check_files.outputs.has_relevant_changes }}" == "false" ]]; then
            # Skip everything for PRs with no relevant changes
            RUN_TEST="false"
            echo "::notice title=Skipping Tasks::Skipping all tasks because no relevant files have changed"
          else
            # Default to running everything for other events or when changes exist
            RUN_TEST="true"
          fi

          # Output the decisions
          echo "run_test=${RUN_TEST}" >> $GITHUB_OUTPUT

          echo "run test? ${RUN_TEST}"

  setup-tests:
    name: "METTA_TEST_PROFILE=${{ matrix.profile }}"
    needs: [graphite-ci-optimizer, setup-checks]
    if: |
      (needs.graphite-ci-optimizer.outputs.should_skip == 'false') &&
      (needs.setup-checks.outputs.run_test == 'true')
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        profile: [softmax, external, cloud, softmax-docker]
    env:
      METTA_TEST_ENV: 1
      METTA_TEST_PROFILE: ${{ matrix.profile }}
      METTA_TEST_SETUP: 1
      AWS_SSO_NONINTERACTIVE: 1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup uv
        uses: ./.github/actions/setup-uv

      - name: Run metta setup integration tests
        env:
          METTA_TEST_ENV: 1
          METTA_TEST_SETUP: 1
          METTA_TEST_PROFILE: ${{ env.METTA_TEST_PROFILE }}
          AWS_SSO_NONINTERACTIVE: 1
        run: |
          echo "Running setup integration tests..."
          metta pytest tests/setup -v
