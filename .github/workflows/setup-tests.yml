name: "Setup Tests"
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'merge_group' && github.event.merge_group.head_ref || github.ref }}
  cancel-in-progress: true
on:
  pull_request:
    types: [opened, synchronize, ready_for_review]
  push:
    branches: [main]
  merge_group:
    types: [checks_requested]
    branches: [main]
  workflow_dispatch:
    inputs:
      run_test:
        description: "Run tests"
        type: boolean
        default: true

# Set default permissions
permissions:
  checks: write
  pull-requests: write

jobs:
  # check if any source code files have changed
  setup-checks:
    name: "Set up for source code checks"
    if: |
      github.event.pull_request.draft == false ||
      github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'merge_group'
    runs-on: ubuntu-latest
    outputs:
      has_relevant_changes: ${{ steps.check_files.outputs.has_relevant_changes }}
      run_test: ${{ steps.determine_tasks.outputs.run_test }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for file changes
        id: check_files
        uses: ./.github/actions/file-changes
        with:
          patterns: "metta/setup/**/*.py,tests/setup/**/*.py,**/pyproject.toml,**/pytest.ini,.github/workflows/setup-tests.yml,.github/actions/setup-uv/**"
          specific_files: "uv.lock"
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine which tasks to run
        id: determine_tasks
        run: |
          # Default behavior based on event type and file changes
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Use workflow dispatch inputs for manual runs
            RUN_TEST="${{ github.event.inputs.run_test }}"
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ steps.check_files.outputs.has_relevant_changes }}" == "false" ]]; then
            # Skip everything for PRs with no relevant changes
            RUN_TEST="false"
            echo "::notice title=Skipping Tasks::Skipping all tasks because no relevant files have changed"
          else
            # Default to running everything for other events or when changes exist
            RUN_TEST="true"
          fi

          # Output the decisions
          echo "run_test=${RUN_TEST}" >> $GITHUB_OUTPUT

          echo "run test? ${RUN_TEST}"

  setup-tests:
    name: "Setup Tests"
    needs: [setup-checks]
    if: needs.setup-checks.outputs.run_test == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        profile: [softmax, external, cloud, softmax-docker]
    env:
      METTA_TEST_ENV: 1
      METTA_TEST_PROFILE: ${{ matrix.profile }}
      METTA_TEST_SETUP: 1
      AWS_SSO_NONINTERACTIVE: 1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup uv
        uses: ./.github/actions/setup-uv

      - name: Cache pytest-testmon database
        uses: actions/cache@v4
        with:
          path: |
            .testmondata
            */..testmondata
          key: setup-testmon-${{ runner.os }}-${{ matrix.profile }}-${{ github.ref }}
          restore-keys: |
            setup-testmon-${{ runner.os }}-${{ matrix.profile }}-refs/heads/main
            setup-testmon-${{ runner.os }}-${{ matrix.profile }}-

      - name: Run setup tests
        run: |
          echo "Running setup integration tests with pytest-testmon..."

          # Use different coverage based on event type
          # Production quality gate: full branch coverage for main branch merges and merge queue
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.event_name }}" == "merge_group" ]]; then
            PYTEST_ARGS="tests/setup --cov --cov-branch --cov-report=xml -v --durations=10 --junitxml=junit.xml -o junit_family=legacy"
            echo "Running setup tests with full branch coverage for production merge"
          else
            # Fast testmon for PRs and development (fast feedback)
            PYTEST_ARGS="tests/setup --testmon --cov --cov-report=xml -v --durations=10 --junitxml=junit.xml -o junit_family=legacy"
            echo "Running setup tests with testmon for fast development feedback"
          fi

          # If no .testmondata exists, do a full run first to build the database
          if [ ! -f ".testmondata" ]; then
            echo "No testmon database found."
          else
            echo "Found testmon database. Running only affected setup tests..."
            # Show which tests would be selected (dry run)
            echo "Setup tests that would be selected by testmon:"
            uv run pytest tests/setup --testmon --collect-only -q || echo "No tests selected or collection failed"
          fi

          uv run pytest $PYTEST_ARGS

      - name: Upload setup test coverage to Codecov
        if: needs.setup-checks.outputs.has_relevant_changes == 'true'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: setup-tests
          name: setup-tests
          fail_ci_if_error: false

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
