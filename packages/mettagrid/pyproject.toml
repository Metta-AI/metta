[build-system]
requires = [
  "setuptools>=61.0",
  "wheel",
  "numpy>=1.26.4,<2",
  "pybind11==2.10.4",
  "setuptools_scm>=8",
]
build-backend = "bazel_build"
backend-path = ["."]

[project]
name = "mettagrid" # Do not change! Has to be 'mettagrid' for our PyPi package
dynamic = ["version"]
description = "A fast grid-based open-ended MARL environment"
authors = [{ name = "David Bloomin", email = "daveey@gmail.com" }]
requires-python = ">=3.11,<3.12"
license = "MIT"
readme = "README.md"
urls = { Homepage = "https://daveey.github.io", Repository = "https://github.com/Metta-AI/mettagrid" }
keywords = ["gridworld", "minigrid", "rl", "reinforcement-learning", "environment", "gym"]
dependencies = [
  "boto3>=1.38.32",
  "botocore>=1.38.29",
  "gymnasium==0.29.1",
  "pettingzoo>=1.24.1,<1.25",
  "pufferlib-core",
  "pydantic>=2.11.5",
  "pyyaml>=6.0.2",
]

[dependency-groups]
dev = ["pytest>=8.3.3", "pytest-benchmark>=5.1.0", "pytest-xdist>=3.8.0"]

[tool.bazel]
# Bazel build configuration
# Set DEBUG=1 environment variable to build with debug configuration
# Otherwise builds with optimizations enabled
build.config = "opt" # or "dbg" for debug builds

[tool.pytest.ini_options]
markers = ["slow: marks tests as slow (deselect with '-m \"not slow\"')"]
testpaths = ["tests", "benchmarks"]
pythonpath = ["python/src", "cpp/src"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
python_classes = ["Test*"]
# Exclude the generic Bazel C++ test runner script (not a pytest test)
addopts = "--ignore=tests/run_test.py"
filterwarnings = ["ignore:Gym has been unmaintained:UserWarning"]

[tool.uv]
cache-keys = [
  { file = "pyproject.toml" },
  { file = "BUILD.bazel" },
  { file = "cpp/BUILD.bazel" },
  { file = "MODULE.bazel" },
  { file = "cpp/**/*.{cpp,hpp}" },
]

[tool.setuptools.packages.find]
where = ["python/src", "cpp/src"]
include = ["mettagrid", "mettagrid.*"]

[tool.setuptools.package-data]
"mettagrid" = ["py.typed", "*.so", "*.pyi", "*.pyd", "*.dylib"]

[tool.uv.sources]
metta-common = { workspace = true }

[tool.coverage.run]
source = ["mettagrid"]

[project.scripts]
demo = "mettagrid.demo:main"

[tool.setuptools_scm]
tag_regex = "^mettagrid-v(?P<version>\\d+\\.\\d+\\.\\d+(?:\\.\\d+)?)$"
version_scheme = "no-guess-dev"
local_scheme = "node-and-date"
root = "../.."
fallback_version = "0.0.0"
