diff -r sky/provision/docker_utils.py sky-patched/provision/docker_utils.py
51a52,66
>         server = d[constants.DOCKER_SERVER_ENV_VAR]
>         if server.endswith(".amazonaws.com"):
>             # AWS ECR; rewrite region to the current region if we're running on AWS
>             import socket
>             import re
> 
>             hostname = socket.getfqdn()
>             hostname_parts = hostname.split(".")
>             if hostname_parts[-2] == "compute" and hostname_parts[-1] == "internal":
>                 # looks like AWS
>                 region = hostname_parts[-3]
>                 server = re.sub(
>                     r"\.[\w-]+\.amazonaws\.com", f".{region}.amazonaws.com", server
>                 )
> 
55c70
<             server=d[constants.DOCKER_SERVER_ENV_VAR],
---
>             server=server,
236a252,268
>             elif docker_login_config.server.endswith(".amazonaws.com") and ".ecr." in docker_login_config.server:
>                 # Handle AWS ECR authentication
>                 server = docker_login_config.server
>                 if server.endswith(".amazonaws.com") and ".ecr." in server:
>                     self._run('sudo apt install -y amazon-ecr-credential-helper')
>                     # Create the docker config directory if it doesn't exist
>                     self._run('mkdir -p ~/.docker')
>                     # Create or update the docker config.json file with ECR credentials helper
>                     config_json = {
>                         "credHelpers": {
>                             server: "ecr-login"
>                         }
>                     }
>                     # Write the config to a temporary file and move it to the right location
>                     import json
>                     self._run(f'echo \'{json.dumps(config_json, indent=2)}\' > /tmp/docker_config.json && '
>                               f'mv /tmp/docker_config.json ~/.docker/config.json')
diff -r sky/resources.py sky-patched/resources.py
1702,1704d1701
<         if self._docker_login_config is not None:
<             config['_docker_login_config'] = dataclasses.asdict(
<                 self._docker_login_config)
