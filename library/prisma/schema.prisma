// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User authentication tables (NextAuth.js)
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  authenticators Authenticator[]
  posts         Post[]
  userPaperInteractions UserPaperInteraction[]
  
  @@map("user")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@id([provider, providerAccountId])
  @@map("account")
}

model Session {
  sessionToken String   @id
  userId       String
  expires      DateTime
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("session")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  
  @@id([identifier, token])
  @@map("verificationToken")
}

model Authenticator {
  credentialID           String
  userId                 String
  providerAccountId      String
  credentialPublicKey    String
  counter                Int
  credentialDeviceType   String
  credentialBackedUp     Boolean
  transports             String?
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@id([userId, credentialID])
  @@unique([credentialID])
  @@map("authenticator")
}

// Posts table for social feed
model Post {
  id        String   @id @default(cuid())
  authorId  String
  title     String
  content   String?
  postType  String   @default("user-post")
  likes     Int      @default(0)
  retweets  Int      @default(0)
  replies   Int      @default(0)
  paperId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  
  // Relations
  author User @relation(fields: [authorId], references: [id])
  paper  Paper? @relation(fields: [paperId], references: [id])
  
  @@map("post")
}

// Papers table for research content
model Paper {
  id           String   @id @default(cuid())
  title        String
  abstract     String?
  authors      String[]
  institutions String[]
  tags         String[]
  link         String?
  source       String?
  externalId   String?
  stars        Int      @default(0)
  starred      Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  
  // Relations
  posts                Post[]
  userPaperInteractions UserPaperInteraction[]
  
  @@map("paper")
}

// User paper interactions table
model UserPaperInteraction {
  userId   String
  paperId  String
  starred  Boolean @default(false)
  readAt   DateTime?
  queued   Boolean @default(false)
  notes    String?
  
  // Relations
  user  User  @relation(fields: [userId], references: [id])
  paper Paper @relation(fields: [paperId], references: [id])
  
  @@id([userId, paperId])
  @@map("user_paper_interaction")
} 