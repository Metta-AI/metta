name: "Claude Review: Einops"
on:
  pull_request:
    types: [opened, reopened]
    paths: ["**/*.py"]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull Request number to review'
        required: true
        type: string

permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:
  review:
    uses: ./.github/workflows/claude-review-base.yml
    with:
      review_name: "Einops Suggestions"
      file_pattern: "\.py$"
      tools: "Edit,Replace,Bash(git diff HEAD~1)"
      pr_number: ${{ inputs.pr_number || '' }}
      prompt: |
        Please review the Python diff for PyTorch tensor operations that perform dimension reordering or reshaping via calls like `permute`, `transpose`, `view`, `reshape`, or `unsqueeze`.

        **IMPORTANT**: Only create a PR comment if you find tensor operations that would benefit from `einops.rearrange`. If there are no such improvements to suggest, do not comment on the PR at all.

        When you find a sequence of such operations that could be expressed more clearly with `einops.rearrange`:
        1. Create a GitHub suggestion showing how to use `einops.rearrange` to accomplish the same transformation
        2. Explain briefly why `einops.rearrange` is preferable (e.g., more readable, self-documenting, less error-prone)
        3. Keep suggestions concise and only modify the code needed to demonstrate the `einops.rearrange` usage

        Focus particularly on:
        - Multiple chained tensor operations that could be a single einops call
        - Complex permutations that are hard to understand
        - Reshape operations where the intent isn't clear from the dimensions
        - Cases where dimension names would clarify the transformation

        Example transformations to look for:
        - `x.permute(0, 2, 1).reshape(batch_size, -1)` → `rearrange(x, 'b h w -> b (w h)')`
        - `x.transpose(1, 2).contiguous().view(b, -1, c)` → `rearrange(x, 'b h w c -> b (h w) c')`

        If the code already uses einops well, or if the existing PyTorch operations are already optimal/clear, simply exit without commenting.
    secrets:
      anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
