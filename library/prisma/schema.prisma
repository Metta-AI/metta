generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique(map: "user_email_unique")
  emailVerified         DateTime?
  image                 String?
  accounts              Account[]
  authenticators        Authenticator[]
  posts                 Post[]
  comments              Comment[]
  sessions              Session[]
  userPaperInteractions UserPaperInteraction[]
  userInstitutions      UserInstitution[]
  createdInstitutions   Institution[]
  userGroups            UserGroup[]
  createdGroups         Group[]

  // Ban information
  isBanned              Boolean                @default(false)
  bannedAt              DateTime?
  banReason             String?
  bannedByUserId        String?
  bannedBy              User?                  @relation("UserBannedBy", fields: [bannedByUserId], references: [id])
  bannedUsers           User[]                 @relation("UserBannedBy")

  // Notifications
  receivedNotifications Notification[]         @relation("NotificationRecipient")
  triggeredNotifications Notification[]        @relation("NotificationActor")

  @@map("user")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("account")
}

model Session {
  sessionToken String   @id
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime @db.Timestamp(6)

  @@id([identifier, token])
  @@map("verificationToken")
}

model Authenticator {
  credentialID         String  @unique(map: "authenticator_credentialID_unique")
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticator")
}

model Post {
  id        String     @id @default(cuid())
  authorId  String
  title     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  content   String?
  postType  String     @default("user-post")
  queues    Int        @default(0)
  replies   Int        @default(0)
  paperId   String?
  images    String[]   @default([]) // Array of image URLs
  author    User       @relation(fields: [authorId], references: [id])
  paper     Paper?     @relation(fields: [paperId], references: [id])
  comments  Comment[]
  notifications Notification[] // Notifications related to this post

  @@map("post")
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  postId    String
  authorId  String
  parentId  String?
  isBot     Boolean   @default(false)
  botType   String?   // e.g., "library_bot"
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")
  notifications Notification[] // Notifications related to this comment

  @@map("comment")
}

model Author {
  id              String        @id @default(cuid())
  name            String        @unique
  username        String?       @unique // "@username" format
  email           String?
  avatar          String?       // Profile image URL or initials
  institution     String?       // Legacy: will be migrated to institutionId
  institutionId   String?
  institutionRef  Institution?  @relation("AuthorInstitution", fields: [institutionId], references: [id])
  department      String?       // Academic department
  title           String?       // Academic title
  expertise       String[]      // Array of expertise tags
  hIndex          Int?          @default(0)
  totalCitations  Int?          @default(0)
  claimed         Boolean       @default(false)
  recentActivity  DateTime?
  orcid           String?       @unique
  googleScholarId String?
  arxivId         String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt
  paperAuthors    PaperAuthor[]

  @@map("author")
}

model Paper {
  id                    String                 @id @default(cuid())
  title                 String
  abstract              String?
  institutions          String[]               // Legacy: will be migrated to PaperInstitution
  institutionIds        String[]               @default([]) // References to Institution IDs
  paperInstitutions     PaperInstitution[]     // Many-to-many relation
  tags                  String[]
  link                  String?
  source                String?
  externalId            String?
  stars                 Int                    @default(0)
  starred               Boolean                @default(false)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @default(now()) @updatedAt
  llmAbstract           Json?                  // LLM-generated enhanced abstract
  llmAbstractGeneratedAt DateTime?             // When LLM abstract was generated
  paperAuthors          PaperAuthor[]
  posts                 Post[]
  userPaperInteractions UserPaperInteraction[]

  @@map("paper")
}

model PaperAuthor {
  paperId  String
  authorId String
  author   Author @relation(fields: [authorId], references: [id], onDelete: Cascade)
  paper    Paper  @relation(fields: [paperId], references: [id], onDelete: Cascade)

  @@id([paperId, authorId])
  @@map("paper_author")
}

model UserPaperInteraction {
  userId  String
  paperId String
  starred Boolean?  @default(false)
  readAt  DateTime? @db.Timestamp(6)
  queued  Boolean?  @default(false)
  notes   String?
  paper   Paper     @relation(fields: [paperId], references: [id])
  user    User      @relation(fields: [userId], references: [id])

  @@id([userId, paperId], map: "user_paper_interaction_userId_paperId_pk")
  @@map("user_paper_interaction")
}

model Institution {
  id               String              @id @default(cuid())
  name             String              @unique
  domain           String?             @unique // e.g., "softmax.com"
  description      String?
  website          String?
  location         String?
  type             InstitutionType     @default(COMPANY)
  isVerified       Boolean             @default(false)
  requiresApproval Boolean             @default(false) // Whether joining requires admin approval
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @default(now()) @updatedAt
  createdByUserId  String?
  userInstitutions UserInstitution[]
  authors          Author[]            @relation("AuthorInstitution") // Authors affiliated with this institution
  papers           PaperInstitution[]  // Papers from this institution
  groups           Group[]             // Groups belonging to this institution
  createdBy        User?               @relation(fields: [createdByUserId], references: [id])

  @@map("institution")
}

model UserInstitution {
  id            String                     @id @default(cuid())
  userId        String
  institutionId String
  role          String?                    // e.g., "researcher", "admin", "student"
  department    String?
  title         String?
  status        UserInstitutionStatus      @default(APPROVED) // approval status
  isActive      Boolean                    @default(true)
  joinedAt      DateTime                   @default(now())
  user          User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  institution   Institution                @relation(fields: [institutionId], references: [id], onDelete: Cascade)

  @@unique([userId, institutionId])
  @@map("user_institution")
}

model PaperInstitution {
  id            String      @id @default(cuid())
  paperId       String
  institutionId String
  paper         Paper       @relation(fields: [paperId], references: [id], onDelete: Cascade)
  institution   Institution @relation(fields: [institutionId], references: [id], onDelete: Cascade)

  @@unique([paperId, institutionId])
  @@map("paper_institution")
}

model Group {
  id              String      @id @default(cuid())
  name            String
  description     String?
  isPublic        Boolean     @default(true) // Public groups can be discovered, private are invite-only
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @default(now()) @updatedAt
  createdByUserId String?
  institutionId   String
  userGroups      UserGroup[]
  createdBy       User?       @relation(fields: [createdByUserId], references: [id])
  institution     Institution @relation(fields: [institutionId], references: [id], onDelete: Cascade)

  @@unique([name, institutionId]) // Group names are unique within an institution
  @@map("group")
}

model UserGroup {
  id       String   @id @default(cuid())
  userId   String
  groupId  String
  role     String?  @default("member") // admin, member
  joinedAt DateTime @default(now())
  isActive Boolean  @default(true)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("user_group")
}

enum InstitutionType {
  UNIVERSITY
  COMPANY
  RESEARCH_LAB
  NONPROFIT
  GOVERNMENT
  OTHER
}

enum UserInstitutionStatus {
  PENDING   // Awaiting admin approval
  APPROVED  // Approved and active
  REJECTED  // Rejected by admin
}

model Notification {
  id          String            @id @default(cuid())
  userId      String            // Who receives the notification
  type        NotificationType
  isRead      Boolean           @default(false)
  title       String
  message     String?
  actionUrl   String?           // Optional URL to navigate to
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now()) @updatedAt

  // Actor who triggered the notification (optional)
  actorId     String?
  actor       User?             @relation("NotificationActor", fields: [actorId], references: [id], onDelete: Cascade)

  // Related content (optional)
  postId      String?
  post        Post?             @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId   String?
  comment     Comment?          @relation(fields: [commentId], references: [id], onDelete: Cascade)

  // Mention-specific data (optional)
  mentionText String?           // The exact mention used (@username, @/group, etc.)

  // Recipient user
  user        User              @relation("NotificationRecipient", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([userId, isRead])
  @@map("notification")
}

enum NotificationType {
  MENTION           // @-mention in post or comment
  COMMENT           // Comment on user's post
  REPLY             // Reply to user's comment
  LIKE              // Like on post/comment (future)
  FOLLOW            // User followed (future)
  PAPER_SUGGESTION  // AI paper suggestion (future)
  SYSTEM            // System announcements (future)
}


