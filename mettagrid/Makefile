.PHONY: help build build-prod benchmark test coverage lint tidy clean install pytest

# Default target
help:
	@echo "Available targets:"
	@echo "  build          - Debug build with tests and coverage"
	@echo "  build-prod     - Release build (no tests)"
	@echo "  benchmark      - Build and run benchmarks"
	@echo "  test           - Run unit tests"
	@echo "  coverage       - Generate coverage report"
	@echo "  lint           - Run cpplint"
	@echo "  tidy           - Run clang-tidy"
	@echo "  pytest         - Run Python tests"
	@echo "  clean          - Clean all build artifacts"
	@echo "  install        - Install package in editable mode"

# Debug build with tests and coverage
build:
	@echo "🔨 Building debug with tests and coverage..."
	bazel build --config=dbg //:mettagrid_c

# Production release build
build-prod:
	@echo "🔨 Building release..."
	bazel build --config=opt //:mettagrid_c

# Build and run benchmarks
benchmark:
	@echo "🔨 Building C++ benchmarks..."
	bazel build --config=opt //benchmarks:test_mettagrid_env_benchmark
	@echo "📂 Creating build-release directory..."
	mkdir -p build-release
	@echo "📋 Copying benchmark binaries..."
	cp -f bazel-bin/benchmarks/test_mettagrid_env_benchmark build-release/
	chmod +x build-release/test_mettagrid_env_benchmark
	@echo "🏃 Running C++ benchmarks..."
	bazel run //benchmarks:test_mettagrid_env_benchmark
	@echo "🏃 Running Python benchmarks..."
	uv run pytest benchmarks/test_mettagrid_env_benchmark.py -v --benchmark-only

# Run unit tests
test: build
	@echo "🧪 Running unit tests..."
	bazel test //:test_stats_tracker //:test_grid_object //:test_mettagrid //:test_observations

# Generate coverage report
coverage:
	@echo "🔨 Building with coverage..."
	bazel coverage --combined_report=lcov //:test_stats_tracker //:test_grid_object //:test_mettagrid //:test_observations
	@echo "📊 Processing coverage data..."
	@./generate_coverage.py

# Code quality
lint:
	@echo "🔍 Running cpplint..."
	@bash ./tests/cpplint.sh

compile_commands: build
	@echo "📝 Generating compile_commands.json..."
	@python3 generate_compile_commands.py

tidy: compile_commands
	@echo "🔍 Running clang-tidy..."
	@bash clang-tidy.sh

# Python
install:
	@echo "📦 Installing package..."
	UV_PROJECT_ENVIRONMENT=../.venv uv sync --active --inexact --frozen

pytest: install
	@echo "🐍 Running Python tests..."
	UV_PROJECT_ENVIRONMENT=../.venv uv run --active pytest

# Cleanup
clean:
	@echo "🧹 Cleaning build artifacts..."
	bazel clean
	rm -rf .venv uv.lock
	rm -f coverage.info *.gcda *.gcno *.profraw *.profdata
