name: Claude Assistant

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  pull_request_review:
    types: [submitted]

permissions:
  contents: write
  pull-requests: write
  issues: write
  id-token: write

jobs:
  claude-response:
    if: contains(github.event.comment.body, '@claude')
    runs-on: ubuntu-latest

    steps:
      - name: Debug - Workflow Context
        run: |
          echo "=== WORKFLOW DEBUG INFO ==="
          echo "Event: ${{ github.event_name }}"
          echo "Action: ${{ github.event.action }}"
          echo "Issue/PR Number: ${{ github.event.issue.number }}"
          echo "Comment Body: ${{ github.event.comment.body }}"
          echo "Comment Author: ${{ github.event.comment.user.login }}"
          echo "Repository: ${{ github.repository }}"
          echo "Is Pull Request: ${{ !!github.event.issue.pull_request }}"
          echo "==========================="

      - name: Check for PR creation request
        id: check_action
        run: |
          echo "=== ACTION DETECTION DEBUG ==="
          echo "Full comment: ${{ github.event.comment.body }}"
          if echo "${{ github.event.comment.body }}" | grep -q "@claude open-pr"; then
            echo "✅ Detected: PR creation request"
            echo "action=create_pr" >> $GITHUB_OUTPUT
            echo "fetch_depth=0" >> $GITHUB_OUTPUT
          else
            echo "✅ Detected: Regular comment request"
            echo "action=comment" >> $GITHUB_OUTPUT
            echo "fetch_depth=1" >> $GITHUB_OUTPUT
          fi
          echo "=============================="

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ steps.check_action.outputs.fetch_depth == '0' && 0 || 1 }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "Claude Assistant"
          git config --global user.email "claude-assistant@users.noreply.github.com"

      - name: Debug - Check Secrets
        run: |
          echo "=== SECRETS DEBUG ==="
          if [ -n "${{ secrets.ANTHROPIC_API_KEY }}" ]; then
            echo "✅ ANTHROPIC_API_KEY is set"
          else
            echo "❌ ANTHROPIC_API_KEY is missing!"
          fi
          echo "=================="

      # Regular Claude responses for comments/questions
      - name: Claude Comment Response
        if: steps.check_action.outputs.action == 'comment'
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          model: "claude-4-sonnet-20250514"
          timeout_minutes: 30
          allowed_tools: "Bash(git status),Bash(git log --oneline -10),Bash(git show),Bash(git diff *),Bash(git branch -a),View,GlobTool,GrepTool"
          custom_instructions: |
            Follow the project's coding standards defined in CLAUDE.md.
            Provide helpful analysis and suggestions for code improvements.
            Focus on code review, explanations, and suggestions rather than making changes.

      # Determine target branch and generate new branch name
      - name: Determine branches
        if: steps.check_action.outputs.action == 'create_pr'
        id: branches
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let targetBranch = 'main'; // fallback
            let contextInfo = '';
            
            if (context.payload.issue.pull_request) {
              // Comment was made on a PR - target that PR's head branch
              console.log("Comment made on PR, fetching PR details...");
              const prResponse = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number
              });
              
              targetBranch = prResponse.data.head.ref;
              contextInfo = `PR #${context.issue.number} (${targetBranch})`;
              console.log(`Will target PR branch: ${targetBranch}`);
            } else {
              // Comment was made on an issue - use default branch
              const repoResponse = await github.rest.repos.get({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              targetBranch = repoResponse.data.default_branch;
              contextInfo = `issue #${context.issue.number} (${targetBranch})`;
              console.log(`Will target default branch: ${targetBranch}`);
            }
            
            // Generate unique branch name
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 19);
            const newBranch = `claude/auto-${context.issue.number}-${timestamp}`;
            
            console.log(`New branch: ${newBranch} -> ${targetBranch}`);
            
            // Set outputs
            core.setOutput('target_branch', targetBranch);
            core.setOutput('new_branch', newBranch);
            core.setOutput('context_info', contextInfo);
            
            return {
              targetBranch,
              newBranch,
              contextInfo
            };

      # Claude PR creation with improved instructions
      - name: Claude PR Creation
        if: steps.check_action.outputs.action == 'create_pr'
        uses: anthropics/claude-code-action@beta
        id: claude_pr
        continue-on-error: true
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          model: "claude-4-sonnet-20250514"
          timeout_minutes: 45
          direct_prompt: |
            CRITICAL: You MUST follow these exact git steps to create a PR successfully:

            CONTEXT:
            - Request from: ${{ steps.branches.outputs.context_info }}
            - Target branch: ${{ steps.branches.outputs.target_branch }}
            - New branch: ${{ steps.branches.outputs.new_branch }}
            - Title: "${{ github.event.issue.title }}"

            YOUR TASK: "${{ github.event.comment.body }}"

            GIT WORKFLOW (follow exactly):

            1. **Check current state:**
               ```bash
               git status
               git branch --show-current
               ```

            2. **Ensure you're on the correct base branch:**
               ```bash
               git checkout ${{ steps.branches.outputs.target_branch }}
               git pull origin ${{ steps.branches.outputs.target_branch }}
               ```

            3. **Create and checkout your new branch FROM the target branch:**
               ```bash
               git checkout -b ${{ steps.branches.outputs.new_branch }}
               ```

            4. **Implement the requested changes**
               - Make the code changes needed
               - Test if possible

            5. **CRITICAL - Commit your changes:**
               ```bash
               git add .
               git status
               git commit -m "feat: implement changes for ${{ steps.branches.outputs.context_info }}"
               ```

            6. **Push the new branch:**
               ```bash
               git push -u origin ${{ steps.branches.outputs.new_branch }}
               ```

            IMPORTANT RULES:
            - Start from branch: ${{ steps.branches.outputs.target_branch }}
            - Create new branch: ${{ steps.branches.outputs.new_branch }}
            - MUST commit changes with git add + git commit
            - MUST push the branch
            - Do NOT create a pull request yourself
            - If git commands fail, show the error and try to fix it

            SUCCESS = New branch created, changes committed and pushed!
          
          allowed_tools: "Edit,Replace,View,GlobTool,GrepTool,BatchTool,Bash(git status),Bash(git branch),Bash(git branch --show-current),Bash(git checkout *),Bash(git pull origin *),Bash(git checkout -b *),Bash(git add .),Bash(git add *),Bash(git commit -m *),Bash(git push -u origin *),Bash(git push origin *),Bash(git diff),Bash(git diff --cached),Bash(git log --oneline -10),Bash(find . -name '*' -type f -not -path './.git/*' -not -path './node_modules/*'),Bash(ls -la),Bash(cat *)"

      # Verify Claude completed the git workflow
      - name: Verify git state after Claude
        if: steps.check_action.outputs.action == 'create_pr'
        id: verify_git
        run: |
          echo "=== VERIFYING GIT STATE ==="
          echo "Current branch:"
          CURRENT_BRANCH=$(git branch --show-current)
          echo "$CURRENT_BRANCH"
          
          echo "Git status:"
          git status
          
          echo "Recent commits:"
          git log --oneline -5
          
          echo "Remote branches:"
          git branch -r
          
          # Check if we're on the expected branch
          if [ "$CURRENT_BRANCH" = "${{ steps.branches.outputs.new_branch }}" ]; then
            echo "✅ On correct branch: $CURRENT_BRANCH"
            echo "branch_created=true" >> $GITHUB_OUTPUT
            
            # Check if there are commits ahead of target branch
            git fetch origin
            TARGET_BRANCH="${{ steps.branches.outputs.target_branch }}"
            if git rev-list --count origin/$TARGET_BRANCH..$CURRENT_BRANCH > /dev/null 2>&1; then
              COMMIT_COUNT=$(git rev-list --count origin/$TARGET_BRANCH..$CURRENT_BRANCH)
              echo "✅ Found $COMMIT_COUNT commits ahead of $TARGET_BRANCH"
              echo "has_commits=true" >> $GITHUB_OUTPUT
              echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT
            else
              echo "❌ No commits found ahead of $TARGET_BRANCH"
              echo "has_commits=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ Wrong branch! Expected: ${{ steps.branches.outputs.new_branch }}, Got: $CURRENT_BRANCH"
            echo "branch_created=false" >> $GITHUB_OUTPUT
            echo "has_commits=false" >> $GITHUB_OUTPUT
          fi
          echo "=========================="

      # Create PR only if git workflow was completed correctly
      - name: Create Pull Request
        if: steps.check_action.outputs.action == 'create_pr' && steps.verify_git.outputs.branch_created == 'true' && steps.verify_git.outputs.has_commits == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              console.log("=== CREATING PULL REQUEST ===");
              
              const targetBranch = "${{ steps.branches.outputs.target_branch }}";
              const newBranch = "${{ steps.branches.outputs.new_branch }}";
              const contextInfo = "${{ steps.branches.outputs.context_info }}";
              const commitCount = "${{ steps.verify_git.outputs.commit_count }}";
              
              console.log(`Creating PR: ${newBranch} -> ${targetBranch}`);
              console.log(`Context: ${contextInfo}`);
              
              // Get latest commit for PR title
              const { execSync } = require('child_process');
              const latestCommit = execSync('git log -1 --pretty=format:"%s"', { encoding: 'utf-8' }).trim();
              
              const prTitle = latestCommit.length > 50 
                ? `${latestCommit.substring(0, 47)}...`
                : latestCommit;
              
              // Create the PR targeting the original branch
              const prResponse = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: prTitle,
                head: newBranch,
                base: targetBranch,
                body: [
                  "🤖 **Automated PR created by Claude**",
                  "",
                  "**Original request:**",
                  "> ${{ github.event.comment.body }}",
                  "",
                  `**Context:** This PR addresses the request from ${contextInfo}`,
                  `**Target:** This PR will merge into \`${targetBranch}\` (not main)`,
                  "",
                  "**Changes made:**",
                  `- ${commitCount} commit(s) with: ${latestCommit}`,
                  "",
                  `**Branch flow:** \`${newBranch}\` → \`${targetBranch}\``,
                  "",
                  "---",
                  "*This PR was automatically created by Claude Code Assistant. It targets the original feature branch for iterative development.*"
                ].join('\n')
              });
              
              console.log(`✅ Created PR #${prResponse.data.number}: ${prResponse.data.html_url}`);
              
              // Post success comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: [
                  "🚀 **PR Created Successfully!**",
                  "",
                  `I've implemented your request and created PR #${prResponse.data.number}:`,
                  `${prResponse.data.html_url}`,
                  "",
                  `**Branch flow:** \`${newBranch}\` → \`${targetBranch}\``,
                  `**Commits:** ${commitCount}`,
                  `**Changes:** ${latestCommit}`,
                  "",
                  context.payload.issue.pull_request 
                    ? `This PR targets your feature branch \`${targetBranch}\` for iterative development! 🔄`
                    : "This PR is ready for review! 🎉"
                ].join('\n')
              });
              
            } catch (error) {
              console.error('Error creating PR:', error);
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: [
                  "❌ **Failed to create PR**",
                  "",
                  `Error: ${error.message}`,
                  "",
                  "**Debug info:**",
                  `- New branch: \`${{ steps.branches.outputs.new_branch }}\``,
                  `- Target branch: \`${{ steps.branches.outputs.target_branch }}\``,
                  `- Branch created: ${{ steps.verify_git.outputs.branch_created }}`,
                  `- Has commits: ${{ steps.verify_git.outputs.has_commits }}`,
                  `- Commit count: ${{ steps.verify_git.outputs.commit_count }}`,
                  "",
                  "Please check the Actions logs for more details."
                ].join('\n')
              });
            }

      # Handle case where Claude didn't follow git workflow
      - name: Handle git workflow failure
        if: steps.check_action.outputs.action == 'create_pr' && (steps.verify_git.outputs.branch_created != 'true' || steps.verify_git.outputs.has_commits != 'true')
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let reason = "Unknown issue";
            
            if ("${{ steps.verify_git.outputs.branch_created }}" !== 'true') {
              reason = "Claude didn't create the required branch";
            } else if ("${{ steps.verify_git.outputs.has_commits }}" !== 'true') {
              reason = "Claude didn't commit any changes";
            }
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: [
                "⚠️ **Unable to create PR**",
                "",
                `**Reason:** ${reason}`,
                "",
                "**Debug info:**",
                `- Expected branch: \`${{ steps.branches.outputs.new_branch }}\``,
                `- Target branch: \`${{ steps.branches.outputs.target_branch }}\``,
                `- Branch created: ${{ steps.verify_git.outputs.branch_created }}`,
                `- Has commits: ${{ steps.verify_git.outputs.has_commits }}`,
                `- Claude execution: ${{ steps.claude_pr.outcome }}`,
                "",
                "**Possible solutions:**",
                "- Try a simpler, more specific request",
                "- Check if the changes conflict with existing code",
                "- Implement the changes manually if they're complex",
                "",
                "You can view the full execution logs in the Actions tab for more details."
              ].join('\n')
            });

      # Final debug output
      - name: Final Debug Summary
        if: always()
        run: |
          echo "=== FINAL WORKFLOW SUMMARY ==="
          echo "Action type: ${{ steps.check_action.outputs.action }}"
          echo "New branch: ${{ steps.branches.outputs.new_branch }}"
          echo "Target branch: ${{ steps.branches.outputs.target_branch }}"
          echo "Context: ${{ steps.branches.outputs.context_info }}"
          echo "Branch created: ${{ steps.verify_git.outputs.branch_created }}"
          echo "Has commits: ${{ steps.verify_git.outputs.has_commits }}"
          echo "Commit count: ${{ steps.verify_git.outputs.commit_count }}"
          echo "Claude outcome: ${{ steps.claude_pr.outcome }}"
          echo "Workflow status: ${{ job.status }}"
          echo "=============================="