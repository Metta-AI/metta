name: "Launch SkyPilot Training Job"

on:
  workflow_dispatch:
    inputs:
      timeout_hours:
        description: "Job timeout in hours (auto-termination)"
        required: true
        default: 1
        type: number
      trainer_env:
        description: "Training environment configuration"
        required: true
        default: "env/mettagrid/arena/advanced"
        type: string
      commit_to_run:
        description: "The full commit hash to run the job against (required for manual runs)."
        required: true
        type: string
      pr_number:
        description: "PR number (for naming/context if running a PR's commit, leave empty otherwise)"
        required: false
        type: string
      num_gpus:
        description: "Number of GPUs to request (e.g., 1, 4). If empty, defaults to SkyPilot task definition (usually 1)."
        required: false
        type: string
      num_nodes:
        description: "Number of Nodes to request (e.g., 1, 4). If empty, defaults to SkyPilot task definition (usually 1)."
        required: false
        type: string
  push:
    branches: [main]

env:
  DEFAULT_TRAINER_ENV: "env/mettagrid/arena/advanced"
  DEFAULT_TIMEOUT_HOURS: 1
  RUN_NAME_PREFIX: "github.sky"

jobs:
  launch-batch-job:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout specific commit for dispatch
        if: github.event_name == 'workflow_dispatch'
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.commit_to_run }}
          fetch-depth: 1

      - name: Checkout full history for push
        if: github.event_name == 'push'
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Determine PR Number for Push Events
        id: pr_info
        if: github.event_name == 'push'
        shell: bash
        run: |
          PR_FROM_COMMIT=$(git log -1 --pretty=format:"%s" | sed -n 's/.*(#\\([0-9][0-9]*\\)).*/\\1/p')
          echo "Extracted PR number from commit message (if any): $PR_FROM_COMMIT"
          echo "pr_number_for_name_generation=${PR_FROM_COMMIT}" >> $GITHUB_OUTPUT

      - name: Generate Run Name
        id: generate_run_name
        shell: bash
        run: |
          set -eo pipefail
          TIMESTAMP=$(date -u +"%Y%m%d_%H%M%S")
          # SHORT_COMMIT_HASH is derived from the actual checked-out HEAD.
          # This HEAD is set by the conditional 'Checkout code' steps:
          # - For 'push', it's the trigger commit.
          # - For 'workflow_dispatch', it's github.event.inputs.commit_to_run.
          SHORT_COMMIT_HASH=$(git rev-parse --short HEAD)

          # Extract trainer env suffix (everything after env/mettagrid)
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            TRAINER_ENV="${{ github.event.inputs.trainer_env }}"
          else
            TRAINER_ENV="${{ env.DEFAULT_TRAINER_ENV }}"
          fi

          # Extract everything after "env/mettagrid/" and replace slashes with dots
          # e.g., "env/mettagrid/arena/advanced" -> "arena.advanced"
          # e.g., "env/mettagrid/a/b/c" -> "a.b.c"
          TRAINER_ENV_SUFFIX=$(echo "$TRAINER_ENV" | sed 's|^env/mettagrid/||' | sed 's|/|.|g')

          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Manual dispatch: run name is github.sky.<short_hash>.<trainer_env_suffix>.<timestamp>
            # The github.event.inputs.pr_number is not used for the run name itself here.
            if [ -z "${{ github.event.inputs.commit_to_run }}" ]; then
              echo "Error: commit_to_run is required for workflow_dispatch and was not provided."
              exit 1
            fi
            # Sanity check that checked-out commit matches the input
            INPUT_SHORT_HASH=$(echo "${{ github.event.inputs.commit_to_run }}" | cut -c1-7)
            if [ "$SHORT_COMMIT_HASH" != "$INPUT_SHORT_HASH" ]; then
                echo "Warning: Checked out HEAD's short hash ($SHORT_COMMIT_HASH) does not match input commit_to_run's short hash ($INPUT_SHORT_HASH). Using checked out HEAD."
            fi
            RUN_NAME_BASE="${{ env.RUN_NAME_PREFIX }}"
            FINAL_RUN_NAME="$RUN_NAME_BASE.$SHORT_COMMIT_HASH.$TRAINER_ENV_SUFFIX.$TIMESTAMP"
            echo "Manual dispatch: Using commit ($SHORT_COMMIT_HASH). Run name: $FINAL_RUN_NAME"

          elif [ "${{ github.event_name }}" == "push" ]; then
            # Push event: run name includes PR number (if found) or branch name.
            PR_NUMBER_FROM_COMMIT="${{ steps.pr_info.outputs.pr_number_for_name_generation || '' }}"

            if [ -n "$PR_NUMBER_FROM_COMMIT" ]; then
              RUN_NAME_BASE="${{ env.RUN_NAME_PREFIX }}.pr${PR_NUMBER_FROM_COMMIT}"
              echo "Push event: Using PR #$PR_NUMBER_FROM_COMMIT in run name base: $RUN_NAME_BASE"
            else
              BRANCH_NAME_RAW=$(git rev-parse --abbrev-ref HEAD)
              BRANCH_NAME_SANITIZED=$(echo "$BRANCH_NAME_RAW" | sed 's/[^a-zA-Z0-9_-]/-/g')
              RUN_NAME_BASE="${{ env.RUN_NAME_PREFIX }}.${BRANCH_NAME_SANITIZED}"
              echo "Push event: Using branch name '$BRANCH_NAME_SANITIZED' in run name base: $RUN_NAME_BASE (PR number not found in commit)"
            fi
            FINAL_RUN_NAME="$RUN_NAME_BASE.$SHORT_COMMIT_HASH.$TRAINER_ENV_SUFFIX.$TIMESTAMP"
            echo "Push event: Run name: $FINAL_RUN_NAME"
          else
            echo "Error: Unhandled event type ${{ github.event_name }}"
            exit 1
          fi

          echo "Generated run name for SkyPilot: $FINAL_RUN_NAME"
          echo "Trainer environment suffix: $TRAINER_ENV_SUFFIX"
          echo "run_name=$FINAL_RUN_NAME" >> $GITHUB_OUTPUT

      - name: Launch SkyPilot Job via Custom Action
        id: skylaunch
        uses: ./.github/actions/launch-skypilot-job
        with:
          trainer_env: ${{ github.event.inputs.trainer_env || env.DEFAULT_TRAINER_ENV }}
          timeout_hours: ${{ github.event.inputs.timeout_hours || env.DEFAULT_TIMEOUT_HOURS }}
          num_gpus: ${{ github.event.inputs.num_gpus || '' }}
          num_nodes: ${{ github.event.inputs.num_nodes || '' }}
          run_name: ${{ steps.generate_run_name.outputs.run_name }}
          wandb_api_key: ${{ secrets.WANDB_API_KEY }}
          skypilot_service_account_token: ${{ secrets.SKYPILOT_SERVICE_ACCOUNT_TOKEN }}
          observatory_token: ${{ secrets.OBSERVATORY_TOKEN }}
          commit_sha: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.commit_to_run || github.sha }}
          github_pat: ${{ secrets.METTA_STATUS_PAT }} # expires August 2026

      - name: Extract SkyPilot Request ID
        id: extract_request_id
        shell: bash
        run: |
          # Extract the request ID from the launch output
          # Looking for pattern like "Submitted sky.jobs.launch request: c01f1273-4610-4949-8f1c-e24365ad0330"
          REQUEST_ID=$(echo "${{ steps.skylaunch.outputs.launch_output }}" | grep -oP 'Submitted sky.jobs.launch request: \K[a-f0-9-]+' || true)

          if [ -z "$REQUEST_ID" ]; then
            # Try alternate extraction method from stored output
            REQUEST_ID=$(cat /tmp/skypilot_launch_output.txt 2>/dev/null | grep -oP 'Submitted sky.jobs.launch request: \K[a-f0-9-]+' || true)
          fi

          if [ -n "$REQUEST_ID" ]; then
            echo "Extracted request ID: $REQUEST_ID"
            echo "request_id=$REQUEST_ID" >> $GITHUB_OUTPUT
            echo "request_id_short=$(echo $REQUEST_ID | cut -c1-8)" >> $GITHUB_OUTPUT
          else
            echo "Could not extract request ID from launch output"
            echo "request_id=" >> $GITHUB_OUTPUT
            echo "request_id_short=" >> $GITHUB_OUTPUT
          fi

      - name: Get SkyPilot Job ID
        id: get_job_id
        if: steps.extract_request_id.outputs.request_id != ''
        shell: bash
        run: |
          set +e  # Don't exit on error

          # Wait a bit for the job to be submitted
          sleep 5

          # Get the logs and extract the job ID
          echo "Getting logs for request: ${{ steps.extract_request_id.outputs.request_id_short }}"
          LOG_OUTPUT=$(sky api logs ${{ steps.extract_request_id.outputs.request_id_short }} 2>&1 | tail -20)

          # Extract job ID from pattern like "Job submitted, ID: 4700"
          JOB_ID=$(echo "$LOG_OUTPUT" | grep -oP 'Job submitted, ID: \K\d+' || true)

          if [ -n "$JOB_ID" ]; then
            echo "Extracted SkyPilot Job ID: $JOB_ID"
            echo "job_id=$JOB_ID" >> $GITHUB_OUTPUT
            echo "dashboard_url=https://skypilot-api.softmax-research.net/dashboard/jobs/$JOB_ID" >> $GITHUB_OUTPUT
          else
            echo "Could not extract Job ID from logs"
            echo "Log output was:"
            echo "$LOG_OUTPUT"
            echo "job_id=" >> $GITHUB_OUTPUT
            echo "dashboard_url=https://skypilot-api.softmax-research.net/dashboard/jobs" >> $GITHUB_OUTPUT
          fi

          set -e

      - name: Create Job Summary
        shell: bash
        run: |
          echo "## 🚀 SkyPilot Training Job Launched" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Job Information" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Run Name** | \`${{ steps.generate_run_name.outputs.run_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Trigger** | ${{ github.event_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Commit** | \`${{ github.event_name == 'workflow_dispatch' && github.event.inputs.commit_to_run || github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Trainer Env** | \`${{ github.event.inputs.trainer_env || env.DEFAULT_TRAINER_ENV }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Timeout** | ${{ github.event.inputs.timeout_hours || env.DEFAULT_TIMEOUT_HOURS }} hours |" >> $GITHUB_STEP_SUMMARY

          if [ -n "${{ steps.extract_request_id.outputs.request_id }}" ]; then
            echo "| **Request ID** | \`${{ steps.extract_request_id.outputs.request_id_short }}\` |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -n "${{ steps.get_job_id.outputs.job_id }}" ]; then
            echo "| **Job ID** | \`${{ steps.get_job_id.outputs.job_id }}\` |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY

          if [ -n "${{ steps.get_job_id.outputs.job_id }}" ]; then
            echo "- [📊 View Job Dashboard](${{ steps.get_job_id.outputs.dashboard_url }})" >> $GITHUB_STEP_SUMMARY
            echo "- [🤗 W&B Run](https://wandb.ai/metta-research/metta/runs/${{ steps.generate_run_name.outputs.run_name }})" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📝 CLI Commands" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "# View job logs" >> $GITHUB_STEP_SUMMARY
            echo "sky jobs logs ${{ steps.get_job_id.outputs.job_id }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "# Check job status" >> $GITHUB_STEP_SUMMARY
            echo "sky jobs status ${{ steps.get_job_id.outputs.job_id }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "# Cancel job if needed" >> $GITHUB_STEP_SUMMARY
            echo "sky jobs cancel ${{ steps.get_job_id.outputs.job_id }}" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "- [📊 SkyPilot Dashboard](https://skypilot-api.softmax-research.net/dashboard/jobs)" >> $GITHUB_STEP_SUMMARY
            echo "- [🤗 W&B Run](https://wandb.ai/metta-research/metta/runs/${{ steps.generate_run_name.outputs.run_name }})" >> $GITHUB_STEP_SUMMARY

            if [ -n "${{ steps.extract_request_id.outputs.request_id_short }}" ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### 📝 CLI Commands" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
              echo "# Get request logs to find job ID" >> $GITHUB_STEP_SUMMARY
              echo "sky api logs ${{ steps.extract_request_id.outputs.request_id_short }}" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: Create Annotations
        if: always()
        shell: bash
        run: |
          if [ -n "${{ steps.get_job_id.outputs.job_id }}" ]; then
            echo "::notice title=SkyPilot Job Launched::Job ID: ${{ steps.get_job_id.outputs.job_id }} | Run: ${{ steps.generate_run_name.outputs.run_name }} | View logs: sky jobs logs ${{ steps.get_job_id.outputs.job_id }}"
          elif [ -n "${{ steps.extract_request_id.outputs.request_id_short }}" ]; then
            echo "::notice title=SkyPilot Job Submitted::Request ID: ${{ steps.extract_request_id.outputs.request_id_short }} | Run: ${{ steps.generate_run_name.outputs.run_name }} | Get job ID: sky api logs ${{ steps.extract_request_id.outputs.request_id_short }}"
          else
            echo "::notice title=SkyPilot Job Submitted::Run: ${{ steps.generate_run_name.outputs.run_name }} | Check dashboard: https://skypilot-api.softmax-research.net/dashboard/jobs"
          fi

      - name: Print Run Information
        shell: bash
        run: |
          echo "Workflow triggered by: ${{ github.event_name }}"
          echo "SkyPilot Job Name / W&B Run Name: ${{ steps.generate_run_name.outputs.run_name }}"
          echo "SkyPilot Task Name: ${{ steps.generate_run_name.outputs.run_name }}"

          if [ -n "${{ steps.get_job_id.outputs.job_id }}" ]; then
            echo ""
            echo "✅ SkyPilot Job ID: ${{ steps.get_job_id.outputs.job_id }}"
            echo "📝 View logs: sky jobs logs ${{ steps.get_job_id.outputs.job_id }}"
            echo "📊 Dashboard: ${{ steps.get_job_id.outputs.dashboard_url }}"
          elif [ -n "${{ steps.extract_request_id.outputs.request_id_short }}" ]; then
            echo ""
            echo "⏳ Request ID: ${{ steps.extract_request_id.outputs.request_id_short }}"
            echo "📝 Get job ID: sky api logs ${{ steps.extract_request_id.outputs.request_id_short }}"
          else
            echo "To see logs for this job in SkyPilot, check the dashboard at https://skypilot-api.softmax-research.net/dashboard/jobs"
          fi
