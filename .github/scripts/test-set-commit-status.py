#!/usr/bin/env -S uv run
# /// script
# requires-python = ">=3.11"
# dependencies = [
#   "httpx>=0.27",
#   "metta-common",
# ]
# ///
"""
Minimal, real-API smoke test for posting a GitHub commit status using
metta.common.util.github.post_commit_status, plus an autogenerated comment.

Inputs via env:
- GITHUB_TOKEN       (provided by Actions)
- INPUT_REF          (PR number or commit/ref)
- INPUT_PASS         ("true"/"false", default true)
- GITHUB_REPOSITORY  ("owner/repo")
- GITHUB_RUN_URL     (Actions run URL, for target_url/comment)
"""

from __future__ import annotations

import os
import sys
from datetime import datetime, timezone

import httpx

from metta.common.util.github import post_commit_status


def gh_request(client: httpx.Client, method: str, url: str, **kwargs):
    resp = client.request(method, url, **kwargs)
    try:
        resp.raise_for_status()
    except httpx.HTTPError as e:
        msg = f"GitHub API error {resp.status_code} for {url}: {resp.text}"
        raise RuntimeError(msg) from e
    return resp.json()


def resolve_sha(client: httpx.Client, owner: str, repo: str, ref: str) -> tuple[str, str | None]:
    """
    Resolve INPUT_REF to a commit SHA.
    Returns (sha, pr_number_or_none).
    If ref is an integer -> treat as PR number and use head.sha.
    Otherwise, resolve as commit/ref.
    """
    base = f"https://api.github.com/repos/{owner}/{repo}"
    if ref.isdigit():
        pr_num = int(ref)
        pr = gh_request(client, "GET", f"{base}/pulls/{pr_num}")
        return pr["head"]["sha"], str(pr_num)
    # Try commit/ref
    commit = gh_request(client, "GET", f"{base}/commits/{ref}")
    return commit["sha"], None


def main() -> int:
    token = os.environ.get("GITHUB_TOKEN")
    if not token:
        print("GITHUB_TOKEN is required", file=sys.stderr)
        return 2

    repo_full = os.environ.get("GITHUB_REPOSITORY")
    if not repo_full or "/" not in repo_full:
        print("GITHUB_REPOSITORY must be 'owner/repo'", file=sys.stderr)
        return 2
    owner, repo = repo_full.split("/", 1)

    ref = (os.environ.get("INPUT_REF") or "").strip()
    if not ref:
        print("INPUT_REF is required", file=sys.stderr)
        return 2

    raw_pass = (os.environ.get("INPUT_PASS") or "true").strip().lower()
    state = "success" if raw_pass == "true" else "failure"

    run_url = os.environ.get("GITHUB_RUN_URL") or ""
    context = "CI/Skypilot"
    now = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S %Z")
    description = f"Manual test: set status '{state}' via Actions @ {now}"
    target_url = run_url if run_url else None

    headers = {
        "Authorization": f"token {token}",
        "Accept": "application/vnd.github.v3+json",
        "User-Agent": "metta-status-test-script",
    }

    with httpx.Client(timeout=20.0, headers=headers) as client:
        try:
            sha, pr_number = resolve_sha(client, owner, repo, ref)
        except RuntimeError as e:
            print(f"Failed to resolve ref '{ref}': {e}", file=sys.stderr)
            return 1

        # Post the status using your helper
        resp = post_commit_status(
            commit_sha=sha,
            state=state,
            repo=f"{owner}/{repo}",
            context=context,
            description=description,
            target_url=target_url,
            token=token,
        )
        print(f"[OK] Posted status on {sha}: {resp.get('state')} ({resp.get('context')})")

        # Always post an autogenerated comment
        base = f"https://api.github.com/repos/{owner}/{repo}"

        emoji = "✅" if state == "success" else "❌"
        comment_body = (
            f"{emoji} **Manual Status Test**\n\n"
            f"- State: `{state}`\n"
            f"- Context: `{context}`\n"
            f"- Commit: `{sha}`\n"
            f"- Run: {run_url or '(none)'}\n"
            f"- Timestamp: {now}\n"
        )

        if pr_number:
            gh_request(
                client,
                "POST",
                f"{base}/issues/{pr_number}/comments",
                json={"body": comment_body},
            )
            print(f"[OK] Commented on PR #{pr_number}")
        else:
            gh_request(
                client,
                "POST",
                f"{base}/commits/{sha}/comments",
                json={"body": comment_body},
            )
            print(f"[OK] Commented on commit {sha}")

    return 0


if __name__ == "__main__":
    raise SystemExit(main())
