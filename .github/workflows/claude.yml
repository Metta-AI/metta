name: Claude PR Assistant

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  claude-response:
    if: contains(github.event.comment.body, '@claude')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "Claude Assistant"
          git config --global user.email "claude-assistant@users.noreply.github.com"

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Parse comment and set context
        id: context
        run: |
          # Create context directory for better organization
          mkdir -p /tmp/claude-context
          
          # Check if this is a PR creation request
          if echo "${{ github.event.comment.body }}" | grep -q "@claude open-pr"; then
            echo "action=create_pr" >> $GITHUB_OUTPUT
          else
            echo "action=comment" >> $GITHUB_OUTPUT
          fi
          
          # Set basic context
          echo "number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          
          # Write complex content to files with proper quoting to handle all edge cases
          cat << 'TITLE_EOF' > /tmp/claude-context/issue_title.txt
          ${{ github.event.issue.title }}
          TITLE_EOF
          
          cat << 'BODY_EOF' > /tmp/claude-context/issue_body.txt
          ${{ github.event.issue.body }}
          BODY_EOF
          
          cat << 'COMMENT_EOF' > /tmp/claude-context/comment_body.txt
          ${{ github.event.comment.body }}
          COMMENT_EOF
          
          # Store file paths in outputs for later steps
          echo "title_file=/tmp/claude-context/issue_title.txt" >> $GITHUB_OUTPUT
          echo "body_file=/tmp/claude-context/issue_body.txt" >> $GITHUB_OUTPUT
          echo "comment_file=/tmp/claude-context/comment_body.txt" >> $GITHUB_OUTPUT
          
          # Determine if this is a PR comment and set base branch
          if [ "${{ github.event.issue.pull_request }}" != "" ]; then
            echo "is_pr_comment=true" >> $GITHUB_OUTPUT
            # Get PR branch info using GitHub CLI with robust error handling
            if command -v gh >/dev/null 2>&1; then
              if PR_DATA=$(gh pr view ${{ github.event.issue.number }} --json headRefName 2>/dev/null); then
                BASE_BRANCH=$(echo "$PR_DATA" | jq -r '.headRefName // "main"')
                echo "Successfully fetched PR branch: $BASE_BRANCH"
              else
                echo "Warning: Could not fetch PR data, using main as base branch"
                BASE_BRANCH="main"
              fi
            else
              echo "Warning: GitHub CLI not available, using main as base branch"
              BASE_BRANCH="main"
            fi
            echo "base_branch=$BASE_BRANCH" >> $GITHUB_OUTPUT
          else
            echo "is_pr_comment=false" >> $GITHUB_OUTPUT
            echo "base_branch=main" >> $GITHUB_OUTPUT
          fi

      - name: Checkout base branch for PR creation
        if: steps.context.outputs.action == 'create_pr'
        run: |
          echo "Base branch for new PR: ${{ steps.context.outputs.base_branch }}"
          if [ "${{ steps.context.outputs.is_pr_comment }}" == "true" ]; then
            echo "Creating new PR from existing PR branch: ${{ steps.context.outputs.base_branch }}"
            if git fetch origin ${{ steps.context.outputs.base_branch }} 2>/dev/null; then
              git checkout ${{ steps.context.outputs.base_branch }}
              echo "Successfully checked out PR branch"
            else
              echo "Warning: Could not fetch PR branch, falling back to main"
              git checkout main
            fi
          else
            echo "Creating new PR from main branch"
            git checkout main
            git pull origin main || echo "Warning: Could not pull latest main, continuing with local main"
          fi
          echo "Current branch: $(git branch --show-current)"
          echo "Latest commit: $(git log --oneline -1)"

      - name: Claude Comment Response
        if: steps.context.outputs.action == 'comment'
        uses: anthropics/claude-code-action@beta
        with:
          prompt: |
            User request from comment: $(cat ${{ steps.context.outputs.comment_file }})
            
            Context:
            - Issue/PR #${{ steps.context.outputs.number }}
            - Title: $(cat ${{ steps.context.outputs.title_file }})
            - Issue/PR Body: $(cat ${{ steps.context.outputs.body_file }})
            
            Please analyze the request and provide a helpful response using the available tools.
          allowed_tools: |
            Bash(git status)
            Bash(git log --oneline -10)
            Bash(git show)
            Bash(git blame *)
            Bash(git diff *)
            Bash(git branch -a)
            Bash(git ls-files)
            Bash(find . -name "*" -type f)
            View
            GlobTool
            GrepTool
            BatchTool
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          max_turns: 10
          timeout_minutes: 8

      - name: Claude PR Creation
        if: steps.context.outputs.action == 'create_pr'
        uses: anthropics/claude-code-action@beta
        with:
          prompt: |
            PR Creation Request from comment: $(cat ${{ steps.context.outputs.comment_file }})
            
            Context:
            - Source: ${{ steps.context.outputs.is_pr_comment == 'true' && 'PR Comment' || 'Issue Comment' }}
            - Issue/PR #${{ steps.context.outputs.number }}
            - Title: $(cat ${{ steps.context.outputs.title_file }})
            - Issue/PR Body: $(cat ${{ steps.context.outputs.body_file }})
            - Base Branch: ${{ steps.context.outputs.base_branch }}
            
            Instructions:
            1. Create a descriptive branch name (e.g., feature/description-of-change)
            2. Implement the requested changes
            3. Commit with clear, conventional commit messages
            4. Push the branch
            5. Create a PR with:
               - Simple, descriptive title (no special chars)
               - Clear description of changes
               - Reference to original issue/PR
            
            Important: Use 'gh pr create' without complex flags. Keep titles and descriptions simple.
          allowed_tools: |
            Bash(git checkout -b *)
            Bash(git add .)
            Bash(git add *)
            Bash(git commit -m *)
            Bash(git push origin *)
            Bash(git push -u origin *)
            Bash(git status)
            Bash(git diff)
            Bash(git diff --cached)
            Bash(git log --oneline -5)
            Bash(git branch)
            Bash(git remote -v)
            Bash(gh pr create)
            Bash(gh pr create --title *)
            Bash(gh pr create --body *)
            Bash(gh pr create --draft)
            Bash(gh pr list)
            Bash(gh repo view)
            View
            Editor
            GlobTool
            GrepTool
            BatchTool
            Bash(find . -name "*" -type f -not -path "./.git/*")
            Bash(ls -la)
            Bash(cat *)
            Bash(head -20 *)
            Bash(tail -20 *)
            Bash(wc -l *)
            Bash(file *)
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          max_turns: 25
          timeout_minutes: 12

      - name: Handle workflow errors
        if: failure()
        run: |
          echo "Workflow failed. Check the logs above for details."
          echo "Common issues:"
          echo "- Authentication problems"
          echo "- Git configuration issues" 
          echo "- Invalid branch names or commit messages"
          echo "- GitHub CLI formatting problems"