name: "C++"
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'merge_group' && github.event.merge_group.head_ref || github.ref }}
  cancel-in-progress: true
on:
  pull_request:
    types: [opened, synchronize, ready_for_review]
  push:
    branches: [main]
  merge_group:
    types: [checks_requested]
    branches: [main]
  workflow_dispatch:
    inputs:
      run_lint:
        description: "Run lint checks"
        type: boolean
        default: true
      run_test:
        description: "Run tests"
        type: boolean
        default: true
      run_benchmark:
        description: "Run benchmarks (requires tests)"
        type: boolean
        default: true

# Set default permissions
permissions:
  checks: write
  pull-requests: write

jobs:
  # check if CI should run based on Graphite's stack position
  graphite-ci-optimizer:
    name: "Graphite CI Optimizer"
    if: |
      github.event.pull_request.draft == false ||
      github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'merge_group'
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.graphite_ci.outputs.skip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Graphite CI Optimizer
        id: graphite_ci
        uses: withgraphite/graphite-ci-action@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          graphite_token: ${{ secrets.GRAPHITE_TOKEN }}

  # check if any C++ files have changed
  setup-checks:
    name: "Set up for C++ checks"
    needs: graphite-ci-optimizer
    if: |
      (needs.graphite-ci-optimizer.outputs.should_skip == 'false') &&
      (github.event.pull_request.draft == false ||
      github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'merge_group')
    runs-on: ubuntu-latest
    outputs:
      has_relevant_changes: ${{ steps.check_cpp_files.outputs.has_relevant_changes }}
      run_lint: ${{ steps.determine_tasks.outputs.run_lint }}
      run_test: ${{ steps.determine_tasks.outputs.run_test }}
      run_benchmark: ${{ steps.determine_tasks.outputs.run_benchmark }}
      cache_key: ${{ steps.set-cache-key.outputs.cache_key }}
      cache_paths: ${{ steps.set-cache-paths.outputs.cache_paths }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for C++ file changes
        id: check_cpp_files
        uses: ./.github/actions/file-changes
        with:
          patterns: "*.cpp,*.cxx,*.cc,*.h,*.hpp"
          directory_paths: "mettagrid/"
          specific_files: "requirements.txt,requirements_pinned.txt,setup.py"
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set cache paths
        id: set-cache-paths
        shell: bash
        run: |
          mkdir -p mettagrid/build/deps
          mkdir -p mettagrid/build/mettagrid
          # Begin multiline output
          echo "cache_paths<<EOF" >> "$GITHUB_OUTPUT"
          echo "mettagrid/build/deps" >> "$GITHUB_OUTPUT"
          echo "mettagrid/build/mettagrid" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Debug cache paths
        run: echo "${{ steps.set-cache-paths.outputs.cache_paths }}"

      - name: Generate cache key
        id: set-cache-key
        run: |
          # Define file types to track
          EXTENSIONS=("cpp" "cxx" "cc" "h" "hpp" "pyx" "pxd")
          SPECIAL_FILES=("mettagrid/Makefile" "setup.py" "requirements.txt" "requirements_pinned.txt")
          
          # Clear the output file
          > /tmp/file_hashes.txt
          
          # Hash source files by extension
          for ext in "${EXTENSIONS[@]}"; do
            find mettagrid -type f -name "*.$ext" -exec sha256sum {} \; >> /tmp/file_hashes.txt 2>/dev/null || true
          done
          
          # Hash special files if they exist
          for file in "${SPECIAL_FILES[@]}"; do
            if [ -f "$file" ]; then
              sha256sum "$file" >> /tmp/file_hashes.txt
            fi
          done
          
          # Add cache paths to hash
          echo "${{ steps.set-cache-paths.outputs.cache_paths }}" | tr -d '\n' | sha256sum | cut -d' ' -f1 >> /tmp/file_hashes.txt
          
          # Generate final hash
          if [ -s "/tmp/file_hashes.txt" ]; then
            HASH=$(sort /tmp/file_hashes.txt | sha256sum | cut -d' ' -f1)
          else
            HASH="empty"
          fi
          
          CACHE_KEY="cpp-build-${HASH}"
          echo "cache_key=${CACHE_KEY}" >> $GITHUB_OUTPUT
          echo "Created content-based hash key ${CACHE_KEY}"

      - name: Determine which tasks to run
        id: determine_tasks
        run: |
          # Default behavior based on event type and file changes
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Use workflow dispatch inputs for manual runs
            RUN_LINT="${{ github.event.inputs.run_lint }}"
            RUN_TEST="${{ github.event.inputs.run_test }}"
            RUN_BENCHMARK="${{ github.event.inputs.run_benchmark }}"
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ steps.check_cpp_files.outputs.has_relevant_changes }}" == "false" ]]; then
            # Skip everything for PRs with no relevant changes
            RUN_LINT="false"
            RUN_TEST="false"
            RUN_BENCHMARK="false"
            echo "::notice title=Skipping Tasks::Skipping all tasks because no relevant files have changed"
          else
            # Default to running everything for other events or when changes exist
            RUN_LINT="true"
            RUN_TEST="true"
            RUN_BENCHMARK="true"
          fi

          # Output the decisions
          echo "run_lint=${RUN_LINT}" >> $GITHUB_OUTPUT
          echo "run_test=${RUN_TEST}" >> $GITHUB_OUTPUT
          echo "run_benchmark=${RUN_BENCHMARK}" >> $GITHUB_OUTPUT

          echo "run lint? ${RUN_LINT}"
          echo "run test? ${RUN_TEST}"
          echo "run benchmark? ${RUN_BENCHMARK}"

  # Build and cache the C++ artifacts
  build-cpp:
    name: "Build C++ artifacts"
    needs: [graphite-ci-optimizer, setup-checks]
    if: |
      (needs.graphite-ci-optimizer.outputs.should_skip == 'false') &&
      (needs.setup-checks.outputs.run_lint == 'true' ||
      needs.setup-checks.outputs.run_test == 'true' ||
      needs.setup-checks.outputs.run_benchmark == 'true')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python and uv
        id: setup-python-uv
        uses: ./.github/actions/setup-python-uv
        with:
          skip_requirements: "true"

      - name: Install Python dependencies
        run: |
          uv pip install --python .venv/bin/python pybind11 numpy

      - name: Restore from build cache
        id: test-cache-cpp
        uses: actions/cache@v4
        with:
          path: ${{ needs.setup-checks.outputs.cache_paths }}
          key: ${{ needs.setup-checks.outputs.cache_key }}

      - name: Install C++ dependencies (cache miss fallback)
        if: steps.test-cache-cpp.outputs.cache-hit != 'true'
        working-directory: mettagrid
        run: make install-dependencies

      - name: Check build dependencies (cache miss fallback)
        if: steps.test-cache-cpp.outputs.cache-hit != 'true'
        working-directory: mettagrid
        run: make check-build-dependencies

      - name: Build C++ artifacts (cache miss fallback)
        if: steps.test-cache-cpp.outputs.cache-hit != 'true'
        working-directory: mettagrid
        run: make build-src-objects

      - name: Check cache paths before saving
        shell: bash
        run: |
          VIRTUAL_ENV="$GITHUB_WORKSPACE/.venv"
          echo "VIRTUAL_ENV is: $VIRTUAL_ENV"
          
          echo "========================================"
          echo "VERIFYING CACHE PATHS BEFORE SAVING"
          echo "========================================"
          echo "Cache paths input:"
          echo "${{ needs.setup-checks.outputs.cache_paths }}"
          echo ""
          
          echo "${{ needs.setup-checks.outputs.cache_paths }}" | while read -r path; do
            echo "========================================="
            echo "🔍 Checking: $path"
            echo "========================================="
            
            if [[ -d "$path" ]]; then
              echo "✅ EXISTS: $path"
              
              # Count total files
              file_count=$(find "$path" -type f | wc -l)
              echo "📁 Total files: $file_count"
              
              # Show directory structure
              echo ""
              echo "📂 Directory structure:"
              tree "$path" 2>/dev/null || find "$path" -type d | head -10
              
              echo ""
              echo "📄 File types breakdown:"
              find "$path" -type f -name "*.o" | wc -l | xargs echo "  Object files (.o):"
              find "$path" -type f -name "*.a" | wc -l | xargs echo "  Archive files (.a):"
              find "$path" -type f -name "*.so" | wc -l | xargs echo "  Shared libraries (.so):"
              find "$path" -type f -name "*.d" | wc -l | xargs echo "  Dependency files (.d):"
              
              echo ""
              echo "📋 Sample files (first 10):"
              find "$path" -type f 2>/dev/null | head -10 > /tmp/sample_files_$.txt || true
              while read -r file; do
                if [[ -n "$file" ]]; then
                  size=$(du -h "$file" 2>/dev/null | cut -f1 || echo "?")
                  echo "  $file ($size)"
                fi
              done < /tmp/sample_files_$.txt
              rm -f /tmp/sample_files_$.txt 2>/dev/null || true
              
              echo ""
              echo "💾 Directory size:"
              du -sh "$path" 2>/dev/null || echo "  Unable to calculate size"
              
            else
              echo "❌ MISSING: $path"
              echo "  This directory does not exist and will not be cached!"
            fi
            
            echo ""
            echo "========================================="
            echo ""
          done
          
          echo "🔍 Overall cache summary:"
          total_size=$(echo "${{ needs.setup-checks.outputs.cache_paths }}" | xargs du -sh 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "unknown")
          echo "  Total cache size: $total_size"

      - name: Save build cache
        if: steps.test-cache-cpp.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ${{ needs.setup-checks.outputs.cache_paths }}
          key: ${{ needs.setup-checks.outputs.cache_key }}

  lint:
    name: "C++ Lint"
    needs: [graphite-ci-optimizer, setup-checks, build-cpp]
    if: |
      (needs.graphite-ci-optimizer.outputs.should_skip == 'false') &&
      (needs.setup-checks.outputs.run_lint == 'true')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install C++ dependencies
        run: |
          sudo apt-get install -y g++ clang-format

      - name: Run clang-format check
        run: |
          echo "Checking C++ formatting..."
          find . -type f \( -name "*.cpp" -o -name "*.h" -o -name "*.hpp" \) \
            -not -path "*/build/*" -not -path "*/venv/*" \
            -exec clang-format --dry-run --Werror {} +

  test:
    name: "C++ Tests"
    needs: [graphite-ci-optimizer, setup-checks, build-cpp]
    if: |
      (needs.graphite-ci-optimizer.outputs.should_skip == 'false') &&
      (needs.setup-checks.outputs.run_test == 'true')
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python and uv
        id: setup-python-uv
        uses: ./.github/actions/setup-python-uv
        with:
          skip_requirements: "true"

      - name: Install Python dependencies
        run: |
          uv pip install --python .venv/bin/python pybind11 numpy

      - name: Restore from build cache
        id: test-cache-cpp
        uses: actions/cache@v4
        with:
          path: ${{ needs.setup-checks.outputs.cache_paths }}
          key: ${{ needs.setup-checks.outputs.cache_key }}

      - name: Install C++ dependencies (cache miss fallback)
        if: steps.test-cache-cpp.outputs.cache-hit != 'true'
        working-directory: mettagrid
        run: make install-dependencies

      - name: Build C++ artifacts (cache miss fallback)
        if: steps.test-cache-cpp.outputs.cache-hit != 'true'
        working-directory: mettagrid
        run: make build

      - name: Debug cache paths and contents
        working-directory: mettagrid
        run: |
          echo "=== CACHE PATHS ==="
          echo "Cache paths: ${{ steps.set-cache-paths.outputs.cache_paths }}"
          echo "Cache key: ${{ steps.set-cache-key.outputs.cache_key }}"
          
          echo ""
          echo "=== BUILD DIRECTORY STRUCTURE ==="
          if [ -d "build" ]; then
            echo "Build directory exists:"
            find build -type f -name "*.o" -o -name "*.a" -o -name "*.so" -o -name "*.d" | head -20
          else
            echo "Build directory does not exist"
          fi
          
          echo ""
          echo "=== SOURCE FILES ==="
          echo "Source files in mettagrid/:"
          find mettagrid -name "*.cpp" -o -name "*.h" -o -name "*.hpp" | head -10
          
          echo ""
          echo "=== DEPENDENCY FILES ==="
          if [ -d "build/.deps" ]; then
            echo "Dependency files exist:"
            find build/.deps -name "*.d" | head -5
            echo "Sample dependency file content:"
            find build/.deps -name "*.d" | head -1 | xargs cat || true
          else
            echo "No dependency files found"
          fi
          
          echo ""
          echo "=== MAKEFILE VARIABLES ==="
          echo "SRC_SOURCES from Makefile:"
          make -n build-tests 2>&1 | grep "No rule to make target" || true

      - name: Check test dependencies
        working-directory: mettagrid
        run: make check-test-dependencies

      - name: Build C++ tests
        working-directory: mettagrid
        run: make build-tests

      - name: Run C++ tests
        working-directory: mettagrid
        run: make test

  benchmark:
    name: "C++ Benchmarks"
    needs: [graphite-ci-optimizer, setup-checks, build-cpp, test]
    if: |
      (needs.graphite-ci-optimizer.outputs.should_skip == 'false') &&
      (needs.setup-checks.outputs.run_benchmark == 'true') &&
      (needs.test.result == 'success' || github.event_name != 'pull_request' )
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python and uv
        id: setup-python-uv
        uses: ./.github/actions/setup-python-uv
        with:
          skip_requirements: "true"

      - name: Install Python dependencies
        run: |
          uv pip install --python .venv/bin/python pybind11 numpy

      - name: Restore from build cache
        id: benchmark-cache-cpp
        uses: actions/cache@v4
        with:
          path: ${{ needs.setup-checks.outputs.cache_paths }}
          key: ${{ needs.setup-checks.outputs.cache_key }}

      - name: Install C++ dependencies (cache miss fallback)
        if: steps.benchmark-cache-cpp.outputs.cache-hit != 'true'
        working-directory: mettagrid
        run: make install-dependencies

      - name: Build C++ artifacts (cache miss fallback)
        if: steps.benchmark-cache-cpp.outputs.cache-hit != 'true'
        working-directory: mettagrid
        run: make build

      - name: Check benchmark dependencies
        working-directory: mettagrid
        run: make check-benchmark-dependencies

      - name: Build C++ benchmarks
        working-directory: mettagrid
        run: make build-benchmarks

      - name: Run benchmarks with JSON output
        working-directory: mettagrid
        run: |
          mkdir -p benchmark_output
          echo "Running benchmarks with JSON output..."
          make bench-json
          echo "Benchmark output files:"
          ls -la benchmark_output/

      - name: Install Bencher CLI
        uses: bencherdev/bencher@main

      - name: Validate Bencher Token
        env:
          BENCHER_API_TOKEN: ${{ secrets.BENCHER_API_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -z "$BENCHER_API_TOKEN" ]; then
            echo "Error: BENCHER_API_TOKEN is empty. Make sure the secret is properly set."
            exit 1
          fi
          echo "Bencher token length: ${#BENCHER_API_TOKEN}"
          echo "Bencher token SHA256: $(echo -n "$BENCHER_API_TOKEN" | sha256sum)"

      # Main Branch Upload section
      # note that "threshold-max-sample-size" has a minimum value of 2 - the new data and the reference
      - name: Upload to Bencher (Main Branch Baseline)
        if: github.ref == 'refs/heads/main'
        env:
          BENCHER_API_TOKEN: ${{ secrets.BENCHER_API_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        working-directory: mettagrid/benchmark_output
        run: |
          ls -al
          if ls *.json 1> /dev/null 2>&1; then
            for file in *.json; do
              bencher run \
                --project mettagrid-sv3f5i2k \
                --token "$BENCHER_API_TOKEN" \
                --branch main \
                --threshold-measure latency \
                --threshold-test percentage \
                --threshold-max-sample-size 2 \
                --threshold-upper-boundary 0.20 \
                --thresholds-reset \
                --testbed ubuntu-latest \
                --adapter cpp_google \
                --github-actions "$GITHUB_TOKEN" \
                --file "$file" > /dev/null
            done
          else
            echo "NO TEST RESULTS FOUND"
          fi
      - name: Check if main branch has benchmark data
        if: github.event_name == 'pull_request' && !github.event.pull_request.head.repo.fork
        id: check-main-benchmark
        env:
          BENCHER_API_TOKEN: ${{ secrets.BENCHER_API_TOKEN }}
        run: |
          # Run the command and capture output in a variable
          bencher_result=$(bencher branch view mettagrid-sv3f5i2k main --token "$BENCHER_API_TOKEN")

          # Print the captured output
          echo "$bencher_result"

          # Save the output to a file for further processing
          echo "$bencher_result" > /tmp/branch_output.json

          # Continue with checking if branch exists and has data
          if [ $? -eq 0 ]; then
            echo "Branch exists, checking if it has benchmark data..."
            # Check if branch output contains a head key
            if jq -e '.head' /tmp/branch_output.json > /dev/null; then
              echo "main_benchmark_exists=true" >> $GITHUB_OUTPUT
              echo "Main branch has benchmark data. Will proceed with PR performance comparison."
            else
              echo "main_benchmark_exists=false" >> $GITHUB_OUTPUT
              echo "Warning: Main branch exists but does not have benchmark data yet. Will skip PR performance comparison."
            fi
          else
            echo "main_benchmark_exists=false" >> $GITHUB_OUTPUT
            echo "Warning: Main branch does not exist or cannot be accessed. Will skip PR performance comparison."
          fi
      # First PR Performance run - Check for improvements (will NOT fail on alerts)
      - name: Check for Performance Improvements
        if: |
          github.event_name == 'pull_request' &&
          !github.event.pull_request.head.repo.fork &&
          steps.check-main-benchmark.outputs.main_benchmark_exists == 'true'
        env:
          BENCHER_API_TOKEN: ${{ secrets.BENCHER_API_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        working-directory: mettagrid/benchmark_output
        run: |
          ls -al
          if ls *.json 1> /dev/null 2>&1; then
            for file in *.json; do
              bencher run \
                --project mettagrid-sv3f5i2k \
                --token "$BENCHER_API_TOKEN" \
                --branch "$GITHUB_HEAD_REF" \
                --start-point "main" \
                --start-point-reset \
                --threshold-measure latency \
                --threshold-test percentage \
                --threshold-max-sample-size 2 \
                --threshold-lower-boundary 0.10 \
                --thresholds-reset \
                --testbed ubuntu-latest \
                --adapter cpp_google \
                --github-actions "$GITHUB_TOKEN" \
                --file "$file" > /dev/null
            done
          else
            echo "NO TEST RESULTS FOUND"
          fi
      # Second PR Performance run - Check for regressions (WILL fail on alerts)
      - name: Check for Performance Regressions
        if: |
          github.event_name == 'pull_request' && 
          !github.event.pull_request.head.repo.fork && 
          steps.check-main-benchmark.outputs.main_benchmark_exists == 'true'
        env:
          BENCHER_API_TOKEN: ${{ secrets.BENCHER_API_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        working-directory: mettagrid/benchmark_output
        run: |
          ls -al
          if ls *.json 1> /dev/null 2>&1; then
            for file in *.json; do
              bencher run \
                --project mettagrid-sv3f5i2k \
                --token "$BENCHER_API_TOKEN" \
                --branch "$GITHUB_HEAD_REF" \
                --start-point "main" \
                --start-point-reset \
                --start-point-clone-thresholds \
                --testbed ubuntu-latest \
                --err \
                --adapter cpp_google \
                --github-actions "$GITHUB_TOKEN" \
                --file "$file" 
            done
          else
            echo "NO TEST RESULTS FOUND"
          fi
