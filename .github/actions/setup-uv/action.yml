name: "Setup uv"
description: "Set up uv and activate the environment"
inputs:
  install-mode:
    description: "Installation mode: 'full' (default), 'testing', 'minimal', or 'linting'"
    required: false
    default: "full"

runs:
  using: "composite"
  steps:
    - name: Install uv with built-in caching
      uses: astral-sh/setup-uv@v6
      with:
        version: "0.7.3"
        enable-cache: true
        cache-suffix: "${{ inputs.install-mode }}"
        cache-dependency-glob: |
          uv.lock
          pyproject.toml
          **/pyproject.toml
        prune-cache: false

    - name: Debug dependencies and cache
      shell: bash
      run: |
        echo "🔍 Dependency files found:"
        find . -name "pyproject.toml" -o -name "uv.lock" | sort | head -20
        echo ""
        echo "🔍 UV cache investigation:"
        echo "Cache directory: $(uv cache dir)"
        echo "Cache size: $(du -sh $(uv cache dir) 2>/dev/null || echo 'N/A')"
        ls -la $(uv cache dir) 2>/dev/null || echo "Cache dir doesn't exist yet"
        echo ""
        echo "🔍 Environment info:"
        echo "RUNNER_OS: ${{ runner.os }}"
        echo "Cache suffix: ${{ inputs.install-mode }}"
        
    - name: Create virtual environment with uv
      shell: bash
      run: |
        # Export environment variables
        echo "VIRTUAL_ENV=$(pwd)/.venv" >> $GITHUB_ENV
        echo "$(pwd)/.venv/bin" >> $GITHUB_PATH

        # Always create fresh venv (using cached packages from uv store)
        echo "🚀 Creating fresh virtual environment..."
        uv venv

        # Handle different installation modes
        case "${{ inputs.install-mode }}" in

          "minimal")
            # don't install any packages
            ;;

          "testing")
            uv sync
            uv pip install pytest pytest-cov pytest-xdist pytest-benchmark gcovr
            ;;

          "linting")
            uv pip install ruff cpplint
            ;;

          "full"|*)
            uv sync
            ;;

        esac
