name: "Setup uv"
description: "Set up uv and activate the environment"
inputs:
  install-mode:
    description: "Installation mode: 'full' (default), 'testing', 'minimal', or 'linting'"
    required: false
    default: "full"

runs:
  using: "composite"
  steps:
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "0.7.3"
        enable-cache: true
        cache-local-path: "${{ github.workspace }}/.uv-cache"
        prune-cache: true
        cache-suffix: "${{ inputs.install-mode }}-${{ hashFiles('.github/actions/setup-uv/action.yml') }}"
      env:
        UV_CACHE_DIR: ${{ github.workspace }}/.uv-cache

    - name: Cache uv store
      uses: actions/cache@v4
      id: cache-uv-store
      with:
        path: |
          .venv
          ~/.cache/uv
        key: uv-store-${{ inputs.install-mode }}-${{ runner.os }}-${{ hashFiles('uv.lock', 'pyproject.toml', '**/pyproject.toml') }}-${{ github.sha }}
        restore-keys: |
          uv-store-${{ inputs.install-mode }}-${{ runner.os }}-${{ hashFiles('uv.lock', 'pyproject.toml', '**/pyproject.toml') }}-
          uv-store-${{ inputs.install-mode }}-${{ runner.os }}-

    - name: Create virtual environment with uv
      shell: bash
      env:
        UV_CACHE_DIR: ${{ github.workspace }}/.uv-cache
      run: |
        # Export environment variables first
        echo "VIRTUAL_ENV=$(pwd)/.venv" >> $GITHUB_ENV
        echo "$(pwd)/.venv/bin" >> $GITHUB_PATH

        # Check if we have a complete venv (either from exact cache hit or restore-key match)
        if [ -d ".venv" ] && [ -f ".venv/pyvenv.cfg" ] && [ -d ".venv/lib" ]; then
          echo "‚úÖ Complete cache hit - skipping uv sync (much faster!)"
          
          # Debug: Check what's in the venv
          echo "üîç Debugging cached venv:"
          echo "  .venv/bin exists: $([ -d '.venv/bin' ] && echo 'yes' || echo 'no')"
          echo "  metta binary exists: $([ -f '.venv/bin/metta' ] && echo 'yes' || echo 'no')"
          if [ -f ".venv/bin/metta" ]; then
            echo "  metta permissions: $(ls -la .venv/bin/metta)"
            echo "  metta first few lines:"
            head -3 .venv/bin/metta || echo "  Cannot read metta binary"
          fi
          echo "  Python in venv: $([ -f '.venv/bin/python' ] && echo 'yes' || echo 'no')"
          if [ -f ".venv/bin/python" ]; then
            echo "  Python version: $(.venv/bin/python --version 2>&1 || echo 'Python not working')"
          fi
          
        else
          echo "‚ùå Cache miss or incomplete venv - running full uv sync"
          uv venv

          # Handle different installation modes
          case "${{ inputs.install-mode }}" in

            "minimal")
              # don't install any packages
              ;;

            "testing")
              uv sync
              uv pip install pytest pytest-cov pytest-xdist pytest-benchmark gcovr
              ;;

            "linting")
              uv pip install ruff cpplint
              ;;

            "full"|*)
              uv sync
              ;;

          esac
        fi
