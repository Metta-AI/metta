#!/usr/bin/env -S uv run

# NumPy 2.0 compatibility for WandB - must be imported before wandb
import logging
import sys

import hydra
import numpy as np

if not hasattr(np, "byte"):
    np.byte = np.int8

import os
from logging import Logger

import wandb
from omegaconf import DictConfig, OmegaConf

from cogweb.cogweb_client import CogwebClient
from metta.common.util.lock import run_once
from metta.common.util.numpy_helpers import clean_numpy_types
from metta.common.util.retry import retry_on_exception
from metta.common.wandb.wandb_context import WandbContext
from metta.sweep.protein_metta import MettaProtein
from metta.sweep.wandb_utils import fetch_protein_observations_from_wandb

logger = logging.getLogger(__name__)


@hydra.main(config_path="../configs", config_name="sweep_job", version_base=None)
def main(cfg: DictConfig) -> int:
    run_once(lambda: setup_next_run(cfg, logger))
    return 0


def setup_next_run(cfg: DictConfig, logger: Logger) -> tuple[str, str]:
    """
    Create a new run for an existing sweep.
    Returns the run ID and the dist_cfg_path.
    """
    # Load sweep metadata
    sweep_metadata = OmegaConf.load(os.path.join(cfg.sweep_dir, "metadata.yaml"))

    # Generate a new run ID for the sweep, e.g. "simple_sweep.r.0"
    # Use centralized database for atomic run ID generation
    backend_url = cfg.sweep_server_uri
    cogweb_client = CogwebClient.get_client(base_url=backend_url)
    run_id = cogweb_client.sweep_client().get_next_run_id(cfg.sweep_name)
    logger.info(f"Creating new run: {run_id}")

    run_dir = os.path.join(cfg.runs_dir, run_id)
    os.makedirs(run_dir, exist_ok=True)

    cfg.run = run_id  # Top-level for training scripts
    cfg.run_dir = run_dir  # Top-level for training scripts
    dist_cfg_path = os.path.join(run_dir, "dist_cfg.yaml")

    def init_run():
        with WandbContext(cfg.wandb, cfg) as wandb_run:
            assert wandb_run, "Wandb should be enabled"
            wandb_run_id = wandb_run.id
            wandb_run.name = run_id

            if not wandb_run.tags:
                wandb_run.tags = ()
            wandb_run.tags += (f"sweep_id:{sweep_metadata.wandb_sweep_id}", f"sweep_name:{sweep_metadata.sweep_name}")

            protein = MettaProtein(cfg.sweep)

            # Load previous observations from WandB, and record them to Protein for
            # next suggestion.
            for observation in fetch_protein_observations_from_wandb(
                sweep_metadata.wandb_entity,
                sweep_metadata.wandb_project,
                sweep_metadata.wandb_sweep_id,
                max_observations=100,  # TODO: Load from config
            ):
                # Extract the observation components and pass them correctly
                protein.observe(
                    suggestion=observation["suggestion"],
                    objective=observation["objective"],
                    cost=observation["cost"],
                    is_failure=observation["is_failure"],
                )
            logger.info(f"Loaded {protein.num_observations} observations from WandB")
            # Suggestions are generated by protein using previous, saved observations.
            # Protein may fail to generate a valid suggestion, in which case it will raise an exception.
            # generate_protein_suggestion will retry up to 10 times, and record failures to the protein.
            try:
                protein_suggestion = generate_protein_suggestion(cfg.sweep_job, protein)
            except Exception as e:
                logger.warning("Failed to generate protein suggestion after 10 attempts. Giving up.")
                raise e

            # Set the run ID in the sweep_job config
            cfg.sweep_job.run = cfg.run

            # Apply Protein suggestions on top of sweep_job overrides
            # Make a deepcopy of the sweep_job config to avoid modifying the original.
            sweep_job_container = OmegaConf.to_container(cfg.sweep_job, resolve=True)
            sweep_job_copy = DictConfig(sweep_job_container)
            apply_protein_suggestion(sweep_job_copy, protein_suggestion)
            wandb_run.summary["protein_suggestion"] = protein_suggestion

            save_path = os.path.join(run_dir, "train_config_overrides.yaml")

            # Save the merged config that will be used for training
            # This mimics train_job.yaml
            sweep_job_final = OmegaConf.to_container(sweep_job_copy, resolve=True)
            assert isinstance(sweep_job_final, dict), "sweep_job_final must be a dictionary"

            # TODO: Use sweep_config_utils.py to save config into run_dir
            train_cfg_overrides = DictConfig(
                {
                    **sweep_job_final,
                    "run": run_id,
                    "run_dir": run_dir,
                    "sweep_name": cfg.sweep_name,  # Needed by sweep_eval.py
                    "wandb": {
                        "group": cfg.sweep_name,  # Group all runs under the sweep name
                        "name": run_id,  # Individual run name
                    },
                }
            )
            OmegaConf.save(train_cfg_overrides, save_path)

            # We are now saving into the run directory directly
            OmegaConf.save(
                {
                    "run": run_id,
                    "wandb_run_id": wandb_run_id,
                },
                dist_cfg_path,
            )

    # TODO: Why are we doing this in wandb.agent? What is WandB agent?
    wandb.agent(
        sweep_metadata.wandb_sweep_id,
        entity=cfg.wandb.entity,
        project=cfg.wandb.project,
        function=init_run,
        count=1,
    )

    logger.info(f"Run created: {run_id}")
    return run_id, dist_cfg_path


def validate_protein_suggestion(config: DictConfig, suggestion: dict):
    """Validate a protein suggestion.
    We only validate constraints related total_timesteps, batch_size, minibatch_size, bppt.
    We must have: minibatch_size divides batch_size, bppt divides minibatch_size.

    Args:
        suggestion: The suggestion to validate
    """
    # Parse the config values first
    config_values = OmegaConf.to_container(config, resolve=True)
    assert isinstance(config_values, dict), "config must be a dictionary"

    trainer_config = config_values["trainer"]
    batch_size = trainer_config.get("batch_size")
    minibatch_size = trainer_config.get("minibatch_size")
    bppt = trainer_config.get("bptt_horizon")

    # Parse the protein suggestion
    if "trainer" in suggestion:
        if "batch_size" in suggestion["trainer"]:
            batch_size = suggestion["trainer"]["batch_size"]
        if "minibatch_size" in suggestion["trainer"]:
            minibatch_size = suggestion["trainer"]["minibatch_size"]
        if "bptt_horizon" in suggestion["trainer"]:
            bppt = suggestion["trainer"]["bptt_horizon"]

    # Validate the suggestion
    if batch_size is not None and minibatch_size is not None and batch_size % minibatch_size != 0:
        raise ValueError(f"Batch size {batch_size} must be divisible by minibatch size {minibatch_size}")
    if minibatch_size is not None and bppt is not None and minibatch_size % bppt != 0:
        raise ValueError(f"Minibatch size {minibatch_size} must be divisible by bppt {bppt}")


@retry_on_exception(max_retries=10, retry_delay=0.1, exceptions=(ValueError,))
def generate_protein_suggestion(config: DictConfig, protein: MettaProtein):
    """Generate a protein suggestion."""
    suggestion, _ = protein.suggest()
    logger.info(f"Protein suggestion: {suggestion}")
    try:
        validate_protein_suggestion(config, suggestion)
    except Exception as e:
        # Catch the invalid exception and record it so Protein can learn from it
        logger.warning(f"Invalid suggestion: {e}")
        protein.observe_failure(suggestion)
        raise e
    return clean_numpy_types(suggestion)


def apply_protein_suggestion(config: DictConfig, suggestion: dict):
    """Apply suggestions to a configuration object using deep merge.

    Args:
        config: The configuration object to modify (must be a DictConfig)
        suggestion: The suggestions to apply (cleaned dict)
    """
    for key, value in suggestion.items():
        if key == "suggestion_uuid":
            continue

        # Clean numpy types from the value before applying
        cleaned_value = clean_numpy_types(value)

        # For nested structures, merge instead of overwrite
        if key in config and isinstance(config[key], DictConfig) and isinstance(cleaned_value, dict):
            config[key] = OmegaConf.merge(config[key], cleaned_value)
        else:
            config[key] = cleaned_value


if __name__ == "__main__":
    sys.exit(main())
