name: Claude Review Base
on:
  workflow_call:
    inputs:
      review_name:
        required: true
        type: string
      file_pattern:
        required: false
        type: string
        default: ".*"
      setup_python:
        required: false
        type: boolean
        default: false
      install_packages:
        required: false
        type: string
        default: ""
      tools:
        required: true
        type: string
      prompt:
        required: true
        type: string
      pr_number:
        required: false
        type: string
        default: ""
    secrets:
      anthropic_api_key:
        required: true

env:
  CLAUDE_MODEL: "claude-opus-4-20250514"

  # Collect suggestions in structured JSON format for inline reviews
  UNIVERSAL_PROMPT_PREFIX: |
    ## GitHub PR Review Instructions - JSON Output Mode

    You are reviewing a GitHub Pull Request. You must output your analysis as a JSON file.

    CRITICAL: You must use the Write tool to save your analysis to a file named
    'claude-review-analysis.json' in the current directory.

    The JSON structure must be:
    {
      "review_summary": "Brief overall assessment of the PR",
      "review_status": "APPROVE|COMMENT|CHANGES_REQUESTED",
      "suggestions": [
        {
          "file": "path/to/file.py",
          "start_line": 23,
          "end_line": 24,
          "side": "RIGHT",
          "severity": "minor|major|blocking|nitpick",
          "reason": "Brief explanation of why this change improves the code",
          "original_code": "exact code from file including any comments",
          "suggested_code": "replacement code"
        }
      ],
      "compliments": [
        {
          "file": "path/to/file.py",
          "line": 45,
          "comment": "Positive feedback about good code"
        }
      ],
      "tldr": [
        "file.py:23-24 - Remove redundant comment",
        "README.md:12 - Update installation command"
      ]
    }

    Review Process:
    1. Analyze the code according to the specific review focus
    2. Build the JSON structure with all findings
    3. Use the Write tool to save to 'claude-review-analysis.json'
    4. Confirm the file was written successfully

    Important: The review_status should reflect the severity of issues found.

    ---
    Now, here are your specific review instructions:

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Initialize Review Summary
        run: |
          echo "# ü§ñ Claude Review: ${{ inputs.review_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Model:** ${{ env.CLAUDE_MODEL }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Time:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Setup PR Context
        id: pr-context
        run: |
          # Determine PR number and checkout if needed
          if [ -n "${{ inputs.pr_number }}" ]; then
            PR_NUMBER="${{ inputs.pr_number }}"
            gh pr checkout $PR_NUMBER
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            PR_NUMBER="${{ github.event.pull_request.number }}"
          else
            echo "No PR context available"
            exit 1
          fi

          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT

          # Get base ref for diff
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            BASE_REF="${{ github.base_ref }}"
          else
            PR_INFO=$(gh pr view $PR_NUMBER --json baseRefName,title,author)
            BASE_REF=$(echo "$PR_INFO" | jq -r '.baseRefName')
            PR_TITLE=$(echo "$PR_INFO" | jq -r '.title')
            PR_AUTHOR=$(echo "$PR_INFO" | jq -r '.author.login')

            echo "## PR Information" >> $GITHUB_STEP_SUMMARY
            echo "- **PR #$PR_NUMBER:** $PR_TITLE" >> $GITHUB_STEP_SUMMARY
            echo "- **Author:** @$PR_AUTHOR" >> $GITHUB_STEP_SUMMARY
            echo "- **Base branch:** $BASE_REF" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          echo "base_ref=$BASE_REF" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check File Changes
        id: check-files
        run: |
          BASE_REF="${{ steps.pr-context.outputs.base_ref }}"
          PATTERN="${{ inputs.file_pattern }}"

          # Get all changed files
          ALL_FILES=$(git diff --name-only origin/$BASE_REF HEAD || echo "")
          TOTAL_CHANGED=$(echo "$ALL_FILES" | grep -v '^$' | wc -l || echo 0)

          # Filter by pattern if provided
          if [ "$PATTERN" != ".*" ]; then
            MATCHED_FILES=$(echo "$ALL_FILES" | grep -E "$PATTERN" || echo "")
          else
            MATCHED_FILES="$ALL_FILES"
          fi

          MATCHED_COUNT=$(echo "$MATCHED_FILES" | grep -v '^$' | wc -l || echo 0)

          echo "## File Analysis" >> $GITHUB_STEP_SUMMARY
          echo "- **Total files changed:** $TOTAL_CHANGED" >> $GITHUB_STEP_SUMMARY
          echo "- **Pattern:** \`$PATTERN\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Files matching pattern:** $MATCHED_COUNT" >> $GITHUB_STEP_SUMMARY

          if [ -n "$MATCHED_FILES" ] && [ "$MATCHED_COUNT" -le 20 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "<details>" >> $GITHUB_STEP_SUMMARY
            echo "<summary>Files to review</summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "$MATCHED_FILES" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -n "$MATCHED_FILES" ]; then
            echo "has_relevant_changes=true" >> $GITHUB_OUTPUT
            echo "matched_count=$MATCHED_COUNT" >> $GITHUB_OUTPUT
          else
            echo "has_relevant_changes=false" >> $GITHUB_OUTPUT
            echo "matched_count=0" >> $GITHUB_OUTPUT
            echo "**Result:** ‚è≠Ô∏è No relevant files to review" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Setup Python
        if: steps.check-files.outputs.has_relevant_changes == 'true' && inputs.setup_python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install Dependencies
        if: steps.check-files.outputs.has_relevant_changes == 'true' && inputs.install_packages != ''
        run: |
          echo "## Setup" >> $GITHUB_STEP_SUMMARY
          echo "- **Python:** $(python --version)" >> $GITHUB_STEP_SUMMARY
          echo "- **Installing:** ${{ inputs.install_packages }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          pip install ${{ inputs.install_packages }}

      # Debug: Log current directory and files before Claude runs
      - name: Debug - Pre-Claude State
        if: steps.check-files.outputs.has_relevant_changes == 'true'
        run: |
          echo "=== PRE-CLAUDE DEBUG ==="
          echo "Current directory: $(pwd)"
          echo "Files in current directory:"
          ls -la
          echo ""
          echo "Git status:"
          git status --short
          echo ""
          echo "PR Context:"
          echo "- PR Number: ${{ steps.pr-context.outputs.pr_number }}"
          echo "- Base Ref: ${{ steps.pr-context.outputs.base_ref }}"
          echo "- Review Name: ${{ inputs.review_name }}"
          echo "- Tools: ${{ inputs.tools }}"
          echo "========================"

      # Stage 1: Run Claude Analysis
      - name: "Stage 1: Claude Analysis"
        id: claude-analysis
        if: steps.check-files.outputs.has_relevant_changes == 'true'
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.anthropic_api_key }}
          anthropic_model: ${{ env.CLAUDE_MODEL }}
          allowed_tools: "${{ inputs.tools }},Write" # Add Write tool to save JSON
          direct_prompt: |
            ${{ env.UNIVERSAL_PROMPT_PREFIX }}

            ${{ inputs.prompt }}

            Remember: You must use the Write tool to save your analysis to 'claude-review-analysis.json'

      # Debug: Check what Claude created
      - name: Debug - Post-Claude State
        if: always() && steps.claude-analysis.outcome != 'skipped'
        run: |
          echo "=== POST-CLAUDE DEBUG ==="
          echo "Claude execution outcome: ${{ steps.claude-analysis.outcome }}"
          echo ""
          echo "Files in current directory:"
          ls -la
          echo ""
          echo "Looking for JSON files:"
          find . -name "*.json" -type f -exec echo "Found: {}" \; -exec head -20 {} \; 2>/dev/null || echo "No JSON files found"
          echo ""
          if [ -f "claude-review-analysis.json" ]; then
            echo "‚úÖ claude-review-analysis.json exists"
            echo "File size: $(stat -c%s claude-review-analysis.json 2>/dev/null || stat -f%z claude-review-analysis.json) bytes"
            echo "First 500 characters:"
            head -c 500 claude-review-analysis.json
            echo ""
          else
            echo "‚ùå claude-review-analysis.json NOT found"
          fi
          echo "========================"

      # Parse the JSON output
      - name: Parse Analysis Results
        id: parse-analysis
        if: steps.claude-analysis.outcome == 'success'
        run: |
          echo "=== PARSING ANALYSIS ==="

          if [ -f "claude-review-analysis.json" ]; then
            echo "‚úÖ Found claude-review-analysis.json"

            # Show raw content for debugging
            echo "Raw JSON content:"
            cat claude-review-analysis.json
            echo ""

            # Validate JSON
            if jq empty claude-review-analysis.json 2>/dev/null; then
              echo "‚úÖ Valid JSON"

              # Extract key information
              REVIEW_STATUS=$(jq -r '.review_status' claude-review-analysis.json)
              SUGGESTION_COUNT=$(jq '.suggestions | length' claude-review-analysis.json)
              HAS_SUGGESTIONS=$([ "$SUGGESTION_COUNT" -gt 0 ] && echo "true" || echo "false")

              # Additional debug info
              COMPLIMENT_COUNT=$(jq '.compliments | length' claude-review-analysis.json 2>/dev/null || echo "0")
              TLDR_COUNT=$(jq '.tldr | length' claude-review-analysis.json 2>/dev/null || echo "0")

              echo "review_status=$REVIEW_STATUS" >> $GITHUB_OUTPUT
              echo "suggestion_count=$SUGGESTION_COUNT" >> $GITHUB_OUTPUT
              echo "has_suggestions=$HAS_SUGGESTIONS" >> $GITHUB_OUTPUT

              echo "üìä Review Status: $REVIEW_STATUS"
              echo "üí° Suggestions: $SUGGESTION_COUNT"
              echo "‚ú® Compliments: $COMPLIMENT_COUNT"
              echo "üìù TLDR items: $TLDR_COUNT"

              # Show first suggestion for debugging
              if [ "$SUGGESTION_COUNT" -gt 0 ]; then
                echo ""
                echo "First suggestion preview:"
                jq '.suggestions[0]' claude-review-analysis.json
              fi
            else
              echo "‚ùå Invalid JSON in claude-review-analysis.json"
              echo "jq error output:"
              jq empty claude-review-analysis.json 2>&1
              echo ""
              echo "Attempting to show parse errors:"
              python3 -m json.tool claude-review-analysis.json 2>&1 || true
              exit 1
            fi
          else
            echo "‚ùå claude-review-analysis.json not found"
            echo "Claude may not have created the file or there were no suggestions"
            echo "has_suggestions=false" >> $GITHUB_OUTPUT
            echo "suggestion_count=0" >> $GITHUB_OUTPUT
            echo "review_status=COMMENT" >> $GITHUB_OUTPUT
          fi

          echo "========================"

      # Upload the JSON as an artifact for debugging
      - name: Upload Analysis Artifact
        if: steps.parse-analysis.outcome == 'success' && steps.parse-analysis.outputs.has_suggestions == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: claude-review-${{ inputs.review_name }}-analysis
          path: claude-review-analysis.json
          retention-days: 7

      # Stage 2: Create GitHub Review
      - name: "Stage 2: Create GitHub Review"
        id: create-review
        if: steps.parse-analysis.outputs.has_suggestions == 'true' || steps.parse-analysis.outputs.review_status == 'APPROVE'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            console.log('=== CREATING GITHUB REVIEW ===');

            // Read the analysis
            let analysis;
            try {
              const content = fs.readFileSync('claude-review-analysis.json', 'utf8');
              analysis = JSON.parse(content);
              console.log(`üìã Loaded analysis with ${analysis.suggestions?.length || 0} suggestions`);
            } catch (error) {
              console.log('Could not read analysis file, creating approval review');
              analysis = {
                review_status: 'APPROVE',
                review_summary: 'No issues found in this review.',
                suggestions: [],
                tldr: []
              };
            }

            // Get PR files
            console.log('Fetching PR files...');
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ steps.pr-context.outputs.pr_number }}
            });
            console.log(`üìÅ Found ${files.length} files in PR`);

            // Build review comments array
            const comments = [];
            const skippedSuggestions = [];

            // Process suggestions
            for (const suggestion of (analysis.suggestions || [])) {
              const file = files.find(f => f.filename === suggestion.file);

              if (!file) {
                console.log(`‚ö†Ô∏è  File ${suggestion.file} not found in PR`);
                skippedSuggestions.push(`${suggestion.file} - file not in PR diff`);
                continue;
              }

              console.log(`Processing suggestion for ${suggestion.file}:${suggestion.start_line}-${suggestion.end_line || suggestion.start_line}`);

              const comment = {
                path: suggestion.file,
                line: suggestion.end_line || suggestion.start_line,
                side: suggestion.side || 'RIGHT',
                body: [
                  `**${suggestion.severity || 'minor'}**: ${suggestion.reason}`,
                  '',
                  '```suggestion',
                  suggestion.suggested_code,
                  '```'
                ].join('\n')
              };

              // Add start_line for multi-line comments
              if (suggestion.start_line && suggestion.end_line && suggestion.start_line !== suggestion.end_line) {
                comment.start_line = suggestion.start_line;
                comment.start_side = suggestion.side || 'RIGHT';
              }

              comments.push(comment);
            }

            // Add compliments
            for (const compliment of (analysis.compliments || [])) {
              const file = files.find(f => f.filename === compliment.file);

              if (file) {
                console.log(`Adding compliment for ${compliment.file}:${compliment.line}`);
                comments.push({
                  path: compliment.file,
                  line: compliment.line,
                  side: 'RIGHT',
                  body: `‚ú® ${compliment.comment}`
                });
              }
            }

            console.log(`üí¨ Prepared ${comments.length} review comments`);
            if (skippedSuggestions.length > 0) {
              console.log(`‚ö†Ô∏è  Skipped ${skippedSuggestions.length} suggestions:`, skippedSuggestions);
            }

            // Create review body
            const reviewName = '${{ inputs.review_name }}' || 'Code';
            const reviewBody = [
              `## ü§ñ Claude ${reviewName} Review`,
              '',
              analysis.review_summary || 'Review completed.',
              '',
              '### Summary',
              `- **Status**: ${(analysis.review_status || 'COMMENT').replace('_', ' ').toLowerCase()}`,
              `- **Suggestions**: ${analysis.suggestions?.length || 0}`,
              `- **Files reviewed**: ${files.length}`,
              '',
              ...(analysis.tldr?.length > 0 ? [
                '### TLDR',
                ...analysis.tldr.map(item => `- ${item}`),
                ''
              ] : []),
              ...(skippedSuggestions.length > 0 ? [
                '### ‚ö†Ô∏è Skipped Suggestions',
                'The following suggestions could not be added as inline comments:',
                ...skippedSuggestions.map(s => `- ${s}`),
                ''
              ] : []),
              '---',
              comments.length > 0
                ? '*Review the inline comments above for specific suggestions. Each suggestion can be committed directly using GitHub\'s "Commit suggestion" button.*'
                : '*No specific code changes suggested in this review.*'
            ].join('\n');

            try {
              console.log('Creating PR review...');
              console.log(`Review type: ${analysis.review_status || 'COMMENT'}`);
              console.log(`Inline comments: ${comments.length}`);

              // Create the review
              const review = await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: ${{ steps.pr-context.outputs.pr_number }},
                body: reviewBody,
                event: analysis.review_status || 'COMMENT',
                comments: comments
              });

              console.log(`‚úÖ Created review #${review.data.id} with ${comments.length} inline comments`);
              console.log(`üìù Review URL: ${review.data.html_url}`);

            } catch (error) {
              console.error('‚ùå Failed to create review:', error.message);

              if (error.status === 422 && error.response?.data) {
                console.log('Validation error details:', JSON.stringify(error.response.data, null, 2));

                // Log specific validation errors
                if (error.response.data.errors) {
                  error.response.data.errors.forEach((err, idx) => {
                    console.log(`Error ${idx + 1}:`, err);
                  });
                }
              }

              // Fallback: Create a simple comment
              console.log('Falling back to regular PR comment...');
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: ${{ steps.pr-context.outputs.pr_number }},
                body: [
                  reviewBody,
                  '',
                  '### ‚ö†Ô∏è Note',
                  'Could not create inline suggestions due to technical limitations. Here are the suggestions:',
                  '',
                  ...(analysis.suggestions || []).map(s => [
                    `**${s.file}:${s.start_line}${s.end_line ? '-' + s.end_line : ''}**`,
                    `${s.severity}: ${s.reason}`,
                    '```diff',
                    ...s.original_code.split('\n').map(line => `- ${line}`),
                    ...s.suggested_code.split('\n').map(line => `+ ${line}`),
                    '```',
                    ''
                  ].flat())
                ].join('\n')
              });
              console.log('‚úÖ Created fallback comment');
            }

            console.log('=== REVIEW CREATION COMPLETE ===');

      - name: Capture Review Results
        if: always()
        run: |
          echo "## Review Results" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.check-files.outputs.has_relevant_changes }}" != "true" ]; then
            echo "- **Status:** ‚è≠Ô∏è Skipped (no matching files)" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.claude-analysis.outcome }}" == "success" ]; then
            echo "- **Status:** ‚úÖ Review completed" >> $GITHUB_STEP_SUMMARY
            echo "- **Review decision:** ${{ steps.parse-analysis.outputs.review_status }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Files reviewed:** ${{ steps.check-files.outputs.matched_count }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Suggestions:** ${{ steps.parse-analysis.outputs.suggestion_count }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Review posted:** Check PR for inline suggestions" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status:** ‚ùå Review failed" >> $GITHUB_STEP_SUMMARY
            echo "- **Error:** Check logs for details" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*[View full logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})*" >> $GITHUB_STEP_SUMMARY

      # Final debug summary
      - name: Debug - Final Summary
        if: always()
        run: |
          echo "=== FINAL DEBUG SUMMARY ==="
          echo "Workflow: ${{ inputs.review_name }}"
          echo "PR: #${{ steps.pr-context.outputs.pr_number }}"
          echo ""
          echo "Step Outcomes:"
          echo "- Check files: ${{ steps.check-files.outcome }}"
          echo "- Claude analysis: ${{ steps.claude-analysis.outcome }}"
          echo "- Parse analysis: ${{ steps.parse-analysis.outcome }}"
          echo "- Create review: ${{ steps.create-review.outcome || 'N/A' }}"
          echo ""
          echo "Analysis Results:"
          echo "- Has relevant changes: ${{ steps.check-files.outputs.has_relevant_changes }}"
          echo "- Review status: ${{ steps.parse-analysis.outputs.review_status || 'N/A' }}"
          echo "- Suggestions count: ${{ steps.parse-analysis.outputs.suggestion_count || '0' }}"
          echo "- Has suggestions: ${{ steps.parse-analysis.outputs.has_suggestions || 'false' }}"
          echo ""
          echo "Artifacts:"
          if [ -f "claude-review-analysis.json" ]; then
            echo "- ‚úÖ claude-review-analysis.json exists ($(wc -c < claude-review-analysis.json) bytes)"
          else
            echo "- ‚ùå claude-review-analysis.json NOT found"
          fi
          echo ""
          echo "Environment:"
          echo "- Model: ${{ env.CLAUDE_MODEL }}"
          echo "- Runner: ${{ runner.os }}"
          echo "- Triggered by: ${{ github.event_name }}"
          echo "==========================="
