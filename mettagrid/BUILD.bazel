# BUILD.bazel file for mettagrid C++ extension module
load("@pybind11_bazel//:build_defs.bzl", "pybind_extension", "pybind_library")

# Optional Raylib integration -------------------------------------------------
# Enable by building with: --define=with_raylib=true (or --config=raylib)

config_setting(
    name = "with_raylib",
    values = {"define": "with_raylib=true"},
)

config_setting(
    name = "with_raylib_macos",
    values = {"define": "with_raylib=true"},
    constraint_values = ["@platforms//os:macos"],
)

config_setting(
    name = "with_raylib_windows",
    values = {"define": "with_raylib=true"},
    constraint_values = ["@platforms//os:windows"],
)

# Basic compiler flags
COPTS = [
    "-std=c++20",
    "-fvisibility=hidden",
    "-DNPY_NO_DEPRECATED_API=NPY_1_7_API_VERSION",
    "-O3",
    "-DNDEBUG",
]

# Library for tests - use pybind_library without hidden visibility
pybind_library(
    name = "mettagrid_lib",
    srcs = glob([
        "src/metta/mettagrid/*.cpp",
        "src/metta/mettagrid/**/*.cpp",
    ]),
    hdrs = glob([
        "src/metta/mettagrid/*.hpp",
        "src/metta/mettagrid/**/*.hpp",
    ]),
    copts = [
        "-std=c++20",
        "-DNPY_NO_DEPRECATED_API=NPY_1_7_API_VERSION",
        "-O3",
        "-DNDEBUG",
    ],  # Removed -fvisibility=hidden
    includes = ["src/metta", "src/metta/mettagrid"],
    visibility = ["//visibility:public"],
)

# Python extension module
pybind_extension(
    name = "mettagrid_c",
    srcs = glob([
        "src/metta/mettagrid/*.cpp",
        "src/metta/mettagrid/**/*.cpp",
        "src/metta/mettagrid/*.hpp",
        "src/metta/mettagrid/**/*.hpp",
    ]),
    # Add macOS SDK minimum when Raylib is on (for std::format)
    copts = COPTS + select({
        ":with_raylib_macos": ["-mmacosx-version-min=13.3"],
        "//conditions:default": [],
    }),
    defines = select({
        ":with_raylib": ["METTA_WITH_RAYLIB"],
        "//conditions:default": [],
    }),
    # Depend on Raylib built from source via rules_foreign_cc (Bzlmod extension)
    deps = select({
        ":with_raylib_macos": ["@raylib_built//:raylib"],
        "//conditions:default": [],
    }),
    linkopts = select({
        ":with_raylib_macos": [
            "-mmacosx-version-min=13.3",
            # Ensure the extension can find the vendored dylib at runtime
            "-Wl,-rpath,@loader_path",
        ],
        "//conditions:default": [],
    }),
    includes = ["src/metta/mettagrid"],
    visibility = ["//visibility:public"],
)

# Export the .clang-tidy config file for use by the linter
exports_files([".clang-tidy"])

# Export source files for test_mettagrid
exports_files(
    glob([
        "src/metta/mettagrid/*.cpp",
        "src/metta/mettagrid/**/*.cpp",
    ]),
    visibility = ["//visibility:public"],
)
