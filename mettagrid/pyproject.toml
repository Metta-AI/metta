[build-system]
requires = ["setuptools>=61.0", "wheel", "numpy>=1.26.4,<2", "pybind11==2.10.4"]
build-backend = "bazel_build"
backend-path = ["."]

[project]
name = "mettagrid" # Do not change! Has to be 'mettagrid' for our PyPi package
version = "0.2.0.1"
description = "A fast grid-based open-ended MARL environment"
authors = [{ name = "David Bloomin", email = "daveey@gmail.com" }]
requires-python = "==3.11.7"
license = "MIT"
readme = "README.md"
urls = { Homepage = "https://daveey.github.io", Repository = "https://github.com/Metta-AI/mettagrid" }
keywords = [
  "gridworld",
  "minigrid",
  "rl",
  "reinforcement-learning",
  "environment",
  "gym",
]
dependencies = [
  "boto3>=1.38.32",
  "botocore>=1.38.29",
  "google-api-python-client>=2.0.0",
  "google-auth>=2.0.0",
  "google-auth-oauthlib>=1.0.0",
  "gymnasium==0.29.1",
  "matplotlib>=3.10.3",
  "numpy>=1.26.4,<2",
  "omegaconf>=2.3.0",
  "duckdb>=1.3.0",
  "pettingzoo>=1.24.1,<1.25",
  "pufferlib>=3.0.0,<3.1.0",
  "pydantic>=2.11.5",
  "pyyaml>=6.0.2",
  "scipy>=1.15.3",
  "wandb>=0.19.11",
]

[dependency-groups]
dev = ["pytest>=8.3.3", "pytest-benchmark>=5.1.0", "pytest-xdist>=3.8.0"]

[tool.bazel]
# Bazel build configuration
# Set DEBUG=1 environment variable to build with debug configuration
# Otherwise builds with optimizations enabled
build.config = "opt" # or "dbg" for debug builds

[tool.pytest.ini_options]
markers = ["slow: marks tests as slow (deselect with '-m \"not slow\"')"]
testpaths = ["tests", "benchmarks"]
pythonpath = ["src"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
python_classes = ["Test*"]
# Exclude the generic Bazel C++ test runner script (not a pytest test)
addopts = "--ignore=tests/run_test.py"

[tool.uv]
cache-keys = [
  { file = "pyproject.toml" },
  { file = "BUILD.bazel" },
  { file = "WORKSPACE" },
  { file = "src/**/*.{cpp,hpp}" },
]

[tool.setuptools.packages.find]
where = ["src"]
include = ["metta.mettagrid", "metta.mettagrid.*"]

[tool.setuptools.package-data]
"metta" = ["__init__.py"]
"metta.mettagrid" = ["py.typed", "*.so", "*.pyi", "*.pyd", "*.dylib"]

[tool.uv.sources]
metta-common = { workspace = true }

[tool.coverage.run]
source = ["metta.mettagrid"]
