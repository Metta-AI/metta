name: "Test and Benchmark"

on:
  pull_request:
    types: [opened, synchronize, ready_for_review]
  push:
    branches: [main]
  merge_group:
    types: [checks_requested]
    branches: [main]
  workflow_dispatch:
    inputs:
      run_lint:
        description: "Run lint checks"
        type: boolean
        default: true
      run_test:
        description: "Run tests"
        type: boolean
        default: true
      run_benchmark:
        description: "Run benchmarks (requires tests)"
        type: boolean
        default: true
      run_id:
        description: "Optional unique identifier for this run (for parallel CI benchmarking)"
        required: false
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'merge_group' && github.event.merge_group.head_ref || github.ref }}-${{ inputs.run_id || 'default' }}
  cancel-in-progress: true

# Set default permissions
permissions:
  checks: write
  pull-requests: write

env:
  HYDRA_FULL_ERROR: 1
  VENV_PATH: .venv
  EVAL_SMOKE_TEST_POLICY: m.av.replay.probe.751 # just the name, no need to include any uri preamble like "wandb://run/"
  EVAL_SMOKE_TEST_MAX_ATTEMPTS: 3
  EVAL_SMOKE_TEST_MIN_REWARD: 0.0

jobs:
  echo-run-id:
    name: Echo run_id
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.run_id != '' }}
    steps:
      - name: Echo run_id
        run: echo "RUN_ID=${{ inputs.run_id }}"

  # check if CI should run based on Graphite's stack position
  graphite-ci-optimizer:
    name: "Graphite CI Optimizer"
    if: |
      github.event.pull_request.draft == false ||
      github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'merge_group'
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.graphite_ci.outputs.skip || 'false' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect PR context
        id: detect-pr
        uses: ./.github/actions/detect-external-pr

      - name: Graphite CI Optimizer
        id: graphite_ci
        if: steps.detect-pr.outputs.is_external != 'true'
        uses: withgraphite/graphite-ci-action@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          graphite_token: ${{ secrets.GRAPHITE_TOKEN }}

  # check if any source code files have changed
  setup-checks:
    name: "Set up for source code checks"
    needs: graphite-ci-optimizer
    if: |
      (needs.graphite-ci-optimizer.outputs.should_skip == 'false') &&
      (github.event.pull_request.draft == false ||
       github.event_name == 'push' ||
       github.event_name == 'workflow_dispatch' ||
       github.event_name == 'merge_group')
    runs-on: ubuntu-latest
    outputs:
      has_relevant_changes: ${{ steps.check_py_files.outputs.has_relevant_changes }}
      observatory_has_changes: ${{ steps.check_observatory_files.outputs.has_relevant_changes }}
      run_lint: ${{ steps.determine_tasks.outputs.run_lint }}
      run_test: ${{ steps.determine_tasks.outputs.run_test }}
      run_benchmark: ${{ steps.determine_tasks.outputs.run_benchmark }}
      is_external: ${{ steps.detect-pr.outputs.is_external }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect PR context
        id: detect-pr
        uses: ./.github/actions/detect-external-pr

      - name: Check for file changes
        id: check_py_files
        uses: ./.github/actions/file-changes
        with:
          patterns: "**/*.py,**/*.cpp,**/*.hpp,**/conftest.py,**/pyproject.toml,**/pytest.ini,.github/workflows/*.yml"
          specific_files: "uv.lock"
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for observatory file changes
        id: check_observatory_files
        uses: ./.github/actions/file-changes
        with:
          patterns: "observatory/**/*.ts,observatory/**/*.tsx,observatory/**/*.js,observatory/**/*.jsx"
          specific_files: "observatory/package.json,observatory/tsconfig.json,observatory/tsconfig.node.json"
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine which tasks to run
        id: determine_tasks
        run: |
          # Default behavior based on event type and file changes
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Use workflow dispatch inputs for manual runs
            RUN_LINT="${{ github.event.inputs.run_lint }}"
            RUN_TEST="${{ github.event.inputs.run_test }}"
            RUN_BENCHMARK="${{ github.event.inputs.run_benchmark }}"
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ steps.check_py_files.outputs.has_relevant_changes }}" == "false" ]]; then
            # Skip everything for PRs with no relevant changes
            RUN_LINT="false"
            RUN_TEST="false"
            RUN_BENCHMARK="false"
            echo "::notice title=Skipping Tasks::Skipping all tasks because no relevant files have changed"
          else
            # Default to running everything for other events or when changes exist
            RUN_LINT="true"
            RUN_TEST="true"
            RUN_BENCHMARK="true"
          fi

          # Output the decisions
          echo "run_lint=${RUN_LINT}" >> $GITHUB_OUTPUT
          echo "run_test=${RUN_TEST}" >> $GITHUB_OUTPUT
          echo "run_benchmark=${RUN_BENCHMARK}" >> $GITHUB_OUTPUT

          echo "run lint? ${RUN_LINT}"
          echo "run test? ${RUN_TEST}"
          echo "run benchmark? ${RUN_BENCHMARK}"

  lint:
    name: "Lint"
    needs: [graphite-ci-optimizer, setup-checks]
    if: |
      (needs.graphite-ci-optimizer.outputs.should_skip == 'false') &&
      (needs.setup-checks.outputs.run_lint == 'true')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup-environment
        with:
          install-mode: "linting"

      - name: Run Ruff linter
        run: |
          uv run ruff format --check .

      - name: Run Ruff formatting
        run: |
          uv run ruff check --exit-non-zero-on-fix .

      - name: Install C++ linter
        run: |
          sudo apt-get install -y clang-format

      - name: Run cpplint
        run: ./packages/mettagrid/tests/cpplint.sh

  observatory-typescript-check:
    name: "Observatory TypeScript Check"
    needs: [graphite-ci-optimizer, setup-checks]
    if: |
      (needs.graphite-ci-optimizer.outputs.should_skip == 'false') &&
      (needs.setup-checks.outputs.observatory_has_changes == 'true')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --filter @softmax/observatory

      - name: TypeScript compilation check
        run: |
          cd observatory
          pnpm run type-check

      - name: Run linting
        run: |
          cd observatory
          pnpm run lint

  unit-tests:
    name: "Unit Tests - Python"
    needs: [graphite-ci-optimizer, setup-checks]
    if: |
      (needs.graphite-ci-optimizer.outputs.should_skip == 'false') &&
      (needs.setup-checks.outputs.run_test == 'true')
    runs-on: ubuntu-8core
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup-environment

      - name: Cache PufferLib clone
        uses: actions/cache@v4
        id: cache-pufferlib
        with:
          path: ~/pufferlib-cache
          key: pufferlib-clone-${{ runner.os }}-${{ hashFiles('**/test_pufferlib_integration.py') }}
          restore-keys: |
            pufferlib-clone-${{ runner.os }}-

      - name: Set PufferLib cache path
        run: |
          echo "PUFFERLIB_CACHE_DIR=$HOME/pufferlib-cache" >> $GITHUB_ENV
          mkdir -p $HOME/pufferlib-cache

      - name: Run all package tests
        shell: bash
        run: .github/scripts/run_package_tests.sh

      - name: Upload python test coverage to Codecov
        if: needs.setup-checks.outputs.is_external != 'true'
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
          SUBPACKAGES: "agent common app_backend mettagrid cogames codebot core"
        run: |
          # We want to set flags per file so the codecov action is not convenient
          # If we change to a matrix of runners we should delete the script
          chmod +x .github/scripts/upload_codecov.py
          .github/scripts/upload_codecov.py

  mettagrid-cpp-build:
    name: "MettaGrid C++ Build & Test"
    needs: [graphite-ci-optimizer, setup-checks]
    if: |
      (needs.graphite-ci-optimizer.outputs.should_skip == 'false') &&
      (needs.setup-checks.outputs.run_test == 'true')
    runs-on: ubuntu-4core
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup-environment
        with:
          install-mode: "testing"

      - name: Setup Bazel caching
        run: |
          # Bazel's default ~/.cache/bazel contains internal state with symlinks,
          # lock files, and files with future timestamps (2035) that cause
          # "File exists" errors when actions/cache tries to extract them.
          #
          # Using --disk_cache and --repository_cache directories avoids these
          # issues by caching only reusable artifacts:
          # - Build outputs (disk_cache)
          # - Downloaded external dependencies (repository_cache)
          #
          # Documentation:
          # - https://bazel.build/reference/command-line-reference#flag--disk_cache
          # - https://bazel.build/reference/command-line-reference#flag--repository_cache
          # - https://bazel.build/remote/caching#disk-cache

          echo "build --disk_cache=$HOME/.bazel-disk-cache" >> packages/mettagrid/.bazelrc
          echo "build --repository_cache=$HOME/.bazel-repo-cache" >> packages/mettagrid/.bazelrc

          mkdir -p $HOME/.bazel-disk-cache
          mkdir -p $HOME/.bazel-repo-cache

      - name: Cache Bazel build artifacts
        uses: actions/cache@v4
        id: bazel-cache
        with:
          path: |
            ~/.bazel-disk-cache
            ~/.bazel-repo-cache
          key: bazel-${{ runner.os }}-${{ hashFiles('packages/mettagrid/MODULE.bazel', 'packages/mettagrid/.bazelrc', '.bazelversion') }}
          restore-keys: |
            bazel-${{ runner.os }}-

      - name: Build MettaGrid C++ (with coverage)
        id: mettagrid_build_check
        run: |
          cd packages/mettagrid
          make coverage VERBOSE=1

      - name: Upload MettaGrid C++ coverage to Codecov
        if: needs.setup-checks.outputs.is_external != 'true'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./packages/mettagrid/build-debug/coverage.info
          flags: mettagrid_cpp
          name: mettagrid-cpp-coverage
          fail_ci_if_error: false
          verbose: true

  unit-tests-summary:
    name: "Tests"
    needs: [unit-tests, mettagrid-cpp-build]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check test results
        run: |
          echo "Test job results: ${{ toJSON(needs) }}"
          if [ "${{ contains(join(needs.*.result, ','), 'failure') }}" == "true" ]; then
            echo "One or more test jobs failed"
            exit 1
          elif [ "${{ contains(join(needs.*.result, ','), 'cancelled') }}" == "true" ]; then
            echo "One or more test jobs were cancelled"
            exit 1
          else
            echo "All test jobs completed successfully"
          fi

  python-benchmark:
    name: "Python Benchmarks"
    needs: [graphite-ci-optimizer, setup-checks]
    if: |
      (needs.graphite-ci-optimizer.outputs.should_skip == 'false') &&
      (needs.setup-checks.outputs.run_benchmark == 'true')
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup-environment
        with:
          install-mode: "testing"

      - name: Run Python benchmarks
        env:
          PYTHONOPTIMIZE: 1 # Disable __debug__ blocks and asserts for accurate benchmarks
        run: |
          PYTEST_BENCHMARK_ARGS="-n 0 --timeout=100 --timeout-method=thread  --benchmark-only -v"

          # Main benchmarks
          pytest $PYTEST_BENCHMARK_ARGS --benchmark-json=main_benchmark_results.json

          # Mettagrid benchmarks
          cd packages/mettagrid
          pytest $PYTEST_BENCHMARK_ARGS --benchmark-json=../mettagrid_benchmark_results.json

      - name: Upload Python benchmark artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-benchmark-results
          path: |
            main_benchmark_results.json
            mettagrid_benchmark_results.json
          retention-days: 1

  cpp-benchmark:
    name: "C++ Benchmarks"
    needs: [graphite-ci-optimizer, setup-checks]
    if: |
      (needs.graphite-ci-optimizer.outputs.should_skip == 'false') &&
      (needs.setup-checks.outputs.run_benchmark == 'true')
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup-environment
        with:
          install-mode: "testing"

      - name: Setup Bazel caching
        run: |
          # Configure Bazel to use specific cache directories
          echo "build --disk_cache=$HOME/.bazel-disk-cache" >> packages/mettagrid/.bazelrc
          echo "build --repository_cache=$HOME/.bazel-repo-cache" >> packages/mettagrid/.bazelrc

          # Ensure directories exist
          mkdir -p $HOME/.bazel-disk-cache
          mkdir -p $HOME/.bazel-repo-cache

      - name: Cache Bazel build artifacts
        uses: actions/cache@v4
        id: bazel-cache
        with:
          path: |
            ~/.bazel-disk-cache
            ~/.bazel-repo-cache
          key: bazel-${{ runner.os }}-${{ hashFiles('packages/mettagrid/MODULE.bazel', 'packages/mettagrid/.bazelrc', '.bazelversion') }}
          restore-keys: |
            bazel-${{ runner.os }}-

      - name: Build C++ benchmarks
        id: benchmark_build_check
        run: |
          cd packages/mettagrid
          make benchmark VERBOSE=1

      - name: Collect benchmarks
        working-directory: ./packages/mettagrid
        run: |
          mkdir -p benchmark_output
          # Use bazel run to execute the benchmark with proper library paths
          bazel run //benchmarks:test_mettagrid_env_benchmark -- --benchmark_format=json > benchmark_output/test_mettagrid_env_benchmark.json

      - name: Upload C++ benchmark artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cpp-benchmark-results
          path: packages/mettagrid/benchmark_output/*.json
          retention-days: 1

  upload-benchmarks:
    name: "Upload Benchmarks"
    needs: [setup-checks, python-benchmark, cpp-benchmark]
    if: |
      (needs.setup-checks.outputs.run_benchmark == 'true') &&
      (always() && (needs.python-benchmark.result == 'success' || needs.cpp-benchmark.result == 'success'))
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Python benchmark results
        uses: actions/download-artifact@v4
        with:
          name: python-benchmark-results
          path: ./benchmarks/
        continue-on-error: true

      - name: Download C++ benchmark results
        uses: actions/download-artifact@v4
        with:
          name: cpp-benchmark-results
          path: ./benchmarks/
        continue-on-error: true

      - name: Debug downloaded artifacts
        shell: bash
        run: |
          echo "=== Checking downloaded artifacts ==="
          ls -la ./benchmarks/ || echo "No benchmarks directory"

          echo "=== Python benchmark files content ==="
          for file in ./benchmarks/main_benchmark_results.json ./benchmarks/mettagrid_benchmark_results.json; do
            if [ -f "$file" ]; then
              echo "--- $file ---"
              echo "File size: $(wc -c < "$file") bytes"
              head -20 "$file" || echo "Could not read $file"
            else
              echo "$file not found"
            fi
          done

      - name: Combine all benchmark results
        uses: ./.github/actions/combine-all-benchmarks
        with:
          python_files: "./benchmarks/main_benchmark_results.json,./benchmarks/mettagrid_benchmark_results.json"
          cpp_files: "./benchmarks/*.json"
          output_file: "unified_benchmark_results.json"

      - name: Validate generated BMF files
        shell: bash
        run: |
          echo "=== Validating generated BMF files ==="

          if [ -f "unified_benchmark_results.json" ]; then
            if jq empty unified_benchmark_results.json; then
              echo "✅ unified_benchmark_results.json is valid JSON"
              echo "File size: $(wc -c < unified_benchmark_results.json) bytes"
              echo "Number of benchmarks: $(jq 'length' unified_benchmark_results.json)"
              echo "Sample benchmark names:"
              jq -r 'keys[0:3][]' unified_benchmark_results.json || echo "No benchmarks found"
            else
              echo "❌ unified_benchmark_results.json is invalid JSON"
              exit 1
            fi
          else
            echo "❌ unified_benchmark_results.json not found"
            exit 1
          fi

      - name: Check for significant performance changes
        if: needs.setup-checks.outputs.is_external != 'true'
        uses: ./.github/actions/call-bencher-api
        with:
          bencher_token: ${{ secrets.BENCHER_API_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          benchmark_file: "unified_benchmark_results.json"
        continue-on-error: true

      - name: Upload benchmark artifacts for debugging
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: processed-benchmark-results
          path: |
            unified_benchmark_results.json
          retention-days: 7
