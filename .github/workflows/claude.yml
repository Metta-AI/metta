name: Claude Assistant

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  pull_request_review:
    types: [submitted]

permissions:
  contents: write
  pull-requests: write
  issues: write
  id-token: write

jobs:
  claude-response:
    if: contains(github.event.comment.body, '@claude')
    runs-on: ubuntu-latest

    steps:
      - name: Debug - Workflow Context
        run: |
          echo "=== WORKFLOW DEBUG INFO ==="
          echo "Event: ${{ github.event_name }}"
          echo "Action: ${{ github.event.action }}"
          echo "Issue/PR Number: ${{ github.event.issue.number }}"
          echo "Comment Body: ${{ github.event.comment.body }}"
          echo "Comment Author: ${{ github.event.comment.user.login }}"
          echo "Repository: ${{ github.repository }}"
          echo "Is Pull Request: ${{ !!github.event.issue.pull_request }}"
          echo "Runner OS: ${{ runner.os }}"
          echo "==========================="

      # Determine action type and fetch depth needed
      - name: Check for PR creation request
        id: check_action
        run: |
          echo "=== ACTION DETECTION DEBUG ==="
          echo "Full comment: ${{ github.event.comment.body }}"
          if echo "${{ github.event.comment.body }}" | grep -q "@claude open-pr"; then
            echo "✅ Detected: PR creation request"
            echo "action=create_pr" >> $GITHUB_OUTPUT
            echo "fetch_depth=0" >> $GITHUB_OUTPUT
          else
            echo "✅ Detected: Regular comment request"
            echo "action=comment" >> $GITHUB_OUTPUT
            echo "fetch_depth=1" >> $GITHUB_OUTPUT
          fi
          echo "Action set to: $(cat $GITHUB_OUTPUT)"
          echo "=============================="

      # Conditional checkout based on action type
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ steps.check_action.outputs.fetch_depth == '0' && 0 || 1 }}
          token: ${{ secrets.GITHUB_TOKEN }}

      # Debug: Verify checkout and git status
      - name: Debug - Git Status
        run: |
          echo "=== GIT DEBUG INFO ==="
          echo "Current directory: $(pwd)"
          echo "Fetch depth used: ${{ steps.check_action.outputs.fetch_depth }}"
          echo "Git status:"
          git status
          echo "Current branch:"
          git branch --show-current
          echo "All branches:"
          git branch -a
          echo "Recent commits:"
          git log --oneline -5 || echo "Limited history due to shallow clone"
          echo "Git remote:"
          git remote -v
          echo "==================="

      - name: Configure Git
        run: |
          git config --global user.name "Claude Assistant"
          git config --global user.email "claude-assistant@users.noreply.github.com"
          echo "Git configuration set:"
          git config --global user.name
          git config --global user.email

      # Debug: Verify secrets are available
      - name: Debug - Check Secrets
        run: |
          echo "=== SECRETS DEBUG ==="
          if [ -n "${{ secrets.ANTHROPIC_API_KEY }}" ]; then
            echo "✅ ANTHROPIC_API_KEY is set"
          else
            echo "❌ ANTHROPIC_API_KEY is missing!"
          fi
          if [ -n "${{ secrets.GITHUB_TOKEN }}" ]; then
            echo "✅ GITHUB_TOKEN is set"
          else
            echo "❌ GITHUB_TOKEN is missing!"
          fi
          echo "=================="

      # Use official action for regular comments and questions
      - name: Claude Comment Response
        if: steps.check_action.outputs.action == 'comment'
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          model: "claude-4-sonnet-20250514"
          timeout_minutes: 30
          allowed_tools: "Bash(git status),Bash(git log --oneline -10),Bash(git show),Bash(git diff *),Bash(git branch -a),View,GlobTool,GrepTool"
          custom_instructions: |
            Follow the project's coding standards defined in CLAUDE.md.
            Provide helpful analysis and suggestions for code improvements.
            Focus on code review, explanations, and suggestions rather than making changes.

      # Debug: Show what will be sent to Claude for PR creation
      - name: Debug - PR Creation Context
        if: steps.check_action.outputs.action == 'create_pr'
        run: |
          echo "=== PR CREATION DEBUG ==="
          echo "Action: ${{ steps.check_action.outputs.action }}"
          echo "Will execute PR creation workflow"
          echo "Comment: ${{ github.event.comment.body }}"
          echo "Issue/PR #: ${{ github.event.issue.number }}"
          echo "Title: ${{ github.event.issue.title }}"
          echo "Is PR Comment: ${{ !!github.event.issue.pull_request }}"
          echo "========================="

      # Custom PR creation workflow for "@claude open-pr" commands
      - name: Claude PR Creation
        if: steps.check_action.outputs.action == 'create_pr'
        uses: anthropics/claude-code-action@beta
        id: claude_pr
        continue-on-error: true
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          model: "claude-4-sonnet-20250514"
          timeout_minutes: 45
          direct_prompt: |
            PR Creation Request: ${{ github.event.comment.body }}

            Context:
            - Issue/PR #${{ github.event.issue.number }}
            - Title: ${{ github.event.issue.title }}
            - This is a ${{ github.event.issue.pull_request && 'PR comment' || 'issue comment' }}

            IMPORTANT INSTRUCTIONS:
            1. Analyze the current codebase to understand the context
            2. Create a new feature branch with a descriptive name (e.g., claude/fix-description)
            3. Implement the requested changes with proper code quality
            4. Make focused, atomic commits with clear conventional commit messages
            5. Push the branch to origin
            6. DO NOT create a PR yourself - the workflow handles that

            Steps to follow:
            1. Use git status and git branch to see current state
            2. Create and checkout a new branch: git checkout -b claude/descriptive-name
            3. Examine relevant files to understand the codebase
            4. Make the necessary code changes
            5. Add and commit changes: git add . && git commit -m "conventional commit message"
            6. Push the branch: git push -u origin branch-name

            Keep commits focused and use clear messages. The workflow will create the PR after you finish.
          allowed_tools: "Edit,Replace,View,GlobTool,GrepTool,BatchTool,Bash(git status),Bash(git branch),Bash(git checkout -b *),Bash(git add .),Bash(git add *),Bash(git commit -m *),Bash(git push -u origin *),Bash(git push origin *),Bash(git diff),Bash(git diff --cached),Bash(git log --oneline -10),Bash(find . -name '*' -type f -not -path './.git/*' -not -path './node_modules/*'),Bash(ls -la),Bash(cat *)"

      # Debug: Check Claude PR creation results
      - name: Debug - Claude PR Results
        if: steps.check_action.outputs.action == 'create_pr'
        run: |
          echo "=== CLAUDE PR CREATION RESULTS ==="
          echo "Claude step outcome: ${{ steps.claude_pr.outcome }}"
          echo "Claude step conclusion: ${{ steps.claude_pr.conclusion }}"
          echo "Current git status after Claude:"
          git status
          echo "Current branch:"
          git branch --show-current
          echo "All branches:"
          git branch -a
          echo "Recent commits:"
          git log --oneline -10
          echo "================================="

      # Create PR automatically after Claude finishes the implementation
      - name: Create Pull Request
        if: steps.check_action.outputs.action == 'create_pr' && (steps.claude_pr.outcome == 'success' || steps.claude_pr.outcome == 'failure')
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { execSync } = require('child_process');

            try {
              console.log("=== PR CREATION DEBUG START ===");
              
              // Get the current branch name (Claude's new branch)
              const currentBranch = execSync('git branch --show-current', { encoding: 'utf-8' }).trim();
              console.log(`Current branch: ${currentBranch}`);
              
              // Determine the target branch based on where the comment was made
              let targetBranch = 'main'; // default fallback
              
              // If this comment was made on a PR, target that PR's branch
              if (context.payload.issue.pull_request) {
                console.log("Comment was made on a PR, fetching PR details...");
                // Get the PR details to find the head branch
                const prResponse = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.issue.number
                });
                
                targetBranch = prResponse.data.head.ref;
                console.log(`PR #${context.issue.number} head branch: ${targetBranch}`);
              } else {
                console.log("Comment was made on an issue, using default branch...");
                // Comment was made on an issue, use default branch
                const repoResponse = await github.rest.repos.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo
                });
                targetBranch = repoResponse.data.default_branch;
                console.log(`Repository default branch: ${targetBranch}`);
              }
              
              console.log(`Target branch determined: ${targetBranch}`);
              
              // Only create PR if we're not on the target branch
              if (currentBranch !== targetBranch) {
                console.log(`Creating PR: ${currentBranch} -> ${targetBranch}`);
                
                // Check if there are any commits on this branch compared to target
                try {
                  const commitCountCmd = `git rev-list --count ${targetBranch}..${currentBranch}`;
                  console.log(`Running: ${commitCountCmd}`);
                  const commitCount = execSync(commitCountCmd, { encoding: 'utf-8' }).trim();
                  console.log(`Commit count: ${commitCount}`);
                  
                  if (parseInt(commitCount) > 0) {
                    // Get the latest commit message for PR title
                    const latestCommit = execSync('git log -1 --pretty=format:"%s"', { encoding: 'utf-8' }).trim();
                    console.log(`Latest commit: ${latestCommit}`);
                    
                    // Create descriptive PR title
                    const prTitle = latestCommit.startsWith('feat:') || latestCommit.startsWith('fix:') || latestCommit.startsWith('refactor:')
                      ? latestCommit
                      : `Claude: ${latestCommit}`;
                    
                    console.log(`Creating PR with title: ${prTitle}`);
                    
                    // Create PR targeting the original branch
                    const prResponse = await github.rest.pulls.create({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      title: prTitle,
                      head: currentBranch,
                      base: targetBranch,
                      body: [
                        "🤖 **Automated PR created by Claude**",
                        "",
                        "**Original request:** ${{ github.event.comment.body }}",
                        "",
                        `**Context:** This PR was created in response to a comment on ${context.payload.issue.pull_request ? 'PR' : 'issue'} #${{ github.event.issue.number }}`,
                        "",
                        `**Target branch:** \`${targetBranch}\``,
                        "",
                        "**Changes:**",
                        latestCommit,
                        "",
                        "**Claude execution status:** ${{ steps.claude_pr.outcome }}",
                        "",
                        "---",
                        "*This PR was automatically created by the Claude Code Assistant. Please review the changes before merging.*"
                      ].join('\n')
                    });
                    
                    console.log(`✅ Created PR #${prResponse.data.number}: ${prResponse.data.html_url}`);
                    console.log(`   Head: ${currentBranch} → Base: ${targetBranch}`);
                    
                    // Post success comment
                    await github.rest.issues.createComment({
                      issue_number: context.issue.number,
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      body: [
                        "🚀 **PR Created Successfully!**",
                        "",
                        `I've implemented the requested changes and created PR #${prResponse.data.number}: ${prResponse.data.html_url}`,
                        "",
                        `**Branch:** \`${currentBranch}\` → \`${targetBranch}\``,
                        "**Claude Status:** ${{ steps.claude_pr.outcome }}",
                        "",
                        "The changes are ready for your review. You can view the diff and test the implementation before merging.",
                        "",
                        "<details>",
                        "<summary>🔍 Debug Info</summary>",
                        "",
                        `- Current branch: \`${currentBranch}\``,
                        `- Target branch: \`${targetBranch}\``,
                        `- Commits made: ${commitCount}`,
                        `- Latest commit: ${latestCommit}`,
                        "</details>"
                      ].join('\n')
                    });
                    
                  } else {
                    console.log('No commits found on the new branch');
                    await github.rest.issues.createComment({
                      issue_number: context.issue.number,
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      body: [
                        "⚠️ **No changes were made**",
                        "",
                        "I wasn't able to implement any changes based on your request.",
                        "",
                        "**Debug info:**",
                        `- Current branch: \`${currentBranch}\``,
                        `- Target branch: \`${targetBranch}\``,
                        "- Claude status: ${{ steps.claude_pr.outcome }}",
                        `- Commits found: ${commitCount}`,
                        "",
                        "This could be because:",
                        "- The request wasn't clear enough",
                        "- The changes are too complex for automated implementation",
                        "- There were technical issues during implementation",
                        "",
                        "Please try rephrasing your request or providing more specific details."
                      ].join('\n')
                    });
                  }
                } catch (commitError) {
                  console.log('Error checking commits:', commitError.message);
                  console.log('Git status:', execSync('git status', { encoding: 'utf-8' }));
                  
                  await github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: [
                      "⚠️ **Unable to verify changes**",
                      "",
                      `I created a branch (\`${currentBranch}\`) but couldn't verify the changes.`,
                      "",
                      "**Debug info:**",
                      `- Current branch: \`${currentBranch}\``,
                      `- Target branch: \`${targetBranch}\``,
                      "- Claude status: ${{ steps.claude_pr.outcome }}",
                      `- Error: ${commitError.message}`,
                      "",
                      "You can manually check the branch and create a PR if needed:",
                      "",
                      "```bash",
                      `git checkout ${currentBranch}`,
                      `git diff ${targetBranch}`,
                      "```"
                    ].join('\n')
                  });
                }
              } else {
                console.log(`Still on target branch (${targetBranch}) - no PR needed`);
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: [
                    "⚠️ **Unable to create PR**",
                    "",
                    "Claude didn't create a new branch for the changes.",
                    "",
                    "**Debug info:**",
                    `- Current branch: \`${currentBranch}\``,
                    `- Target branch: \`${targetBranch}\``,
                    "- Claude status: ${{ steps.claude_pr.outcome }}",
                    "",
                    "This might be because:",
                    "- The changes were too complex to implement automatically",
                    "- There were git conflicts or technical issues",
                    "- The request needs manual implementation",
                    "",
                    "Please try a simpler request or implement the changes manually."
                  ].join('\n')
                });
              }
              
              console.log("=== PR CREATION DEBUG END ===");
              
            } catch (error) {
              console.error('Error in PR creation:', error);
              console.error('Stack trace:', error.stack);
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: [
                  "❌ **Error creating PR**",
                  "",
                  "There was an error during the PR creation process.",
                  "",
                  "**Debug info:**",
                  "- Claude status: ${{ steps.claude_pr.outcome }}",
                  `- Error: ${error.message}`,
                  "",
                  "Please try again or implement the changes manually."
                ].join('\n')
              });
            }

      # Always post a final status update for debugging
      - name: Debug - Final Status
        if: always()
        run: |
          echo "=== FINAL WORKFLOW STATUS ==="
          echo "Workflow conclusion: ${{ job.status }}"
          echo "Check action outcome: ${{ steps.check_action.outcome }}"
          echo "Claude comment outcome: ${{ steps.claude_comment.outcome || 'N/A' }}"
          echo "Claude PR outcome: ${{ steps.claude_pr.outcome || 'N/A' }}"
          echo "Final git status:"
          git status
          echo "Final branch:"
          git branch --show-current
          echo "=============================="
