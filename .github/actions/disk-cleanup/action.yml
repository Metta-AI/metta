name: "Disk Cleanup"
description: "Analyze and optionally clean up disk space on GitHub Actions runners"
author: "Your Organization"

inputs:
  dry-run:
    description: "If true, only show what would be deleted without actually deleting"
    required: false
    default: "true"
  android:
    description: "Remove Android SDK and tools (~8-12GB)"
    required: false
    default: "true"
  dotnet:
    description: "Remove .NET SDK and runtime (~2-5GB)"
    required: false
    default: "true"
  haskell:
    description: "Remove Haskell GHC (~2-5GB)"
    required: false
    default: "true"
  large-packages:
    description: "Remove large packages like Chrome, Firefox, etc. (~2-4GB)"
    required: false
    default: "true"
  docker-images:
    description: "Remove Docker images (~5-20GB)"
    required: false
    default: "true"
  swap-storage:
    description: "Remove swap storage (~4GB)"
    required: false
    default: "true"
  tool-cache:
    description: "Remove unnecessary tool cache versions (~5-10GB)"
    required: false
    default: "true"

outputs:
  space-before:
    description: "Free space before cleanup (GB)"
    value: ${{ steps.run-cleanup.outputs.space-before }}
  space-after:
    description: "Free space after cleanup (GB)"
    value: ${{ steps.run-cleanup.outputs.space-after }}
  space-saved:
    description: "Space saved (GB)"
    value: ${{ steps.run-cleanup.outputs.space-saved }}

runs:
  using: "composite"
  steps:
    - name: Disk cleanup
      id: run-cleanup
      shell: bash
      run: |
        # Colors for output
        RED='\033[0;31m'
        GREEN='\033[0;32m'
        YELLOW='\033[1;33m'
        BLUE='\033[0;34m'
        NC='\033[0m' # No Color

        # Check if we're in dry-run mode
        DRY_RUN="${{ inputs.dry-run }}"

        if [[ "$DRY_RUN" == "true" ]]; then
          echo -e "${BLUE}🔍 Running in DRY-RUN mode - no files will be deleted${NC}"
          echo "=================================================="
        else
          echo -e "${RED}🗑️  Running in DELETE mode - files will be removed${NC}"
          echo "=================================================="
        fi
        echo ""

        # Function to check space
        get_free_space_gb() {
          df -BG / | awk 'NR==2 {print $4}' | sed 's/G//'
        }

        # Function to get size of directory
        get_dir_size() {
          if [ -d "$1" ]; then
            du -sh "$1" 2>/dev/null | cut -f1 || echo "0"
          else
            echo "0"
          fi
        }

        # Function to remove directory with dry-run support
        remove_directory() {
          local path=$1
          local name=$2

          if [ -d "$path" ]; then
            size=$(get_dir_size "$path")
            echo -e "${YELLOW}  - $name${NC} ($size): $path"
            if [[ "$DRY_RUN" != "true" ]]; then
              sudo rm -rf "$path" || true
            fi
          fi
        }

        # Function to remove file with dry-run support
        remove_file() {
          local path=$1
          local name=$2

          if [ -f "$path" ]; then
            size=$(du -sh "$path" 2>/dev/null | cut -f1 || echo "?")
            echo -e "${YELLOW}  - $name${NC} ($size): $path"
            if [[ "$DRY_RUN" != "true" ]]; then
              sudo rm -f "$path" || true
            fi
          fi
        }

        # Initial space
        SPACE_BEFORE=$(get_free_space_gb)
        echo -e "${BLUE}📊 Disk space before:${NC} ${SPACE_BEFORE}GB free"
        df -h /
        echo ""

        # Android SDK and tools
        if [[ "${{ inputs.android }}" == "true" ]]; then
          echo -e "${GREEN}📱 Android SDK and tools:${NC}"
          remove_directory "/usr/local/lib/android" "Android SDK"
          remove_directory "${ANDROID_HOME}" "Android Home"
          remove_directory "${ANDROID_SDK_ROOT}" "Android SDK Root"
          echo ""
        fi

        # .NET
        if [[ "${{ inputs.dotnet }}" == "true" ]]; then
          echo -e "${GREEN}🔷 .NET SDK and runtime:${NC}"
          remove_directory "/usr/share/dotnet" ".NET Core"
          remove_directory "/usr/local/share/dotnet" ".NET Core (local)"
          remove_directory "${DOTNET_ROOT}" ".NET Root"
          echo ""
        fi

        # Haskell
        if [[ "${{ inputs.haskell }}" == "true" ]]; then
          echo -e "${GREEN}🎯 Haskell:${NC}"
          remove_directory "/opt/ghc" "GHC"
          remove_directory "/usr/local/.ghcup" "GHCup"
          remove_directory "/opt/cabal" "Cabal"
          echo ""
        fi

        # Large packages
        if [[ "${{ inputs.large-packages }}" == "true" ]]; then
          echo -e "${GREEN}📦 Large packages:${NC}"
          remove_directory "/usr/local/share/chromium" "Chromium"
          remove_directory "/usr/local/share/chrome" "Chrome"
          remove_directory "/opt/google/chrome" "Google Chrome"
          remove_directory "/usr/lib/firefox" "Firefox"
          remove_directory "/opt/microsoft/msedge" "Microsoft Edge"
          remove_directory "/usr/lib/google-cloud-sdk" "Google Cloud SDK"
          remove_directory "/usr/local/aws-cli" "AWS CLI v2"
          remove_directory "/usr/local/aws" "AWS CLI"
          remove_directory "/usr/share/miniconda" "Miniconda"
          remove_directory "/opt/az" "Azure CLI"
          echo ""
        fi

        # Docker cleanup
        if [[ "${{ inputs.docker-images }}" == "true" ]]; then
          echo -e "${GREEN}🐳 Docker:${NC}"
          if command -v docker &> /dev/null; then
            echo "  Docker disk usage before:"
            docker system df || true

            if [[ "$DRY_RUN" != "true" ]]; then
              echo "  Cleaning Docker resources..."
              docker system prune -a -f --volumes || true
            else
              echo -e "${YELLOW}  - Would remove all Docker images, containers, and volumes${NC}"
            fi
          fi
          echo ""
        fi

        # Swap storage
        if [[ "${{ inputs.swap-storage }}" == "true" ]]; then
          echo -e "${GREEN}💾 Swap:${NC}"
          if [ -f "/swapfile" ]; then
            size=$(get_dir_size "/swapfile")
            echo -e "${YELLOW}  - Swap file${NC} ($size)"
            if [[ "$DRY_RUN" != "true" ]]; then
              sudo swapoff /swapfile || true
              sudo rm -f /swapfile || true
            fi
          fi
          echo ""
        fi

        # Tool cache cleanup
        if [[ "${{ inputs.tool-cache }}" == "true" ]]; then
          echo -e "${GREEN}🛠️  Tool cache cleanup:${NC}"

          # Remove old Go versions (keep latest)
          for version in $(ls ${AGENT_TOOLSDIRECTORY}/go 2>/dev/null | sort -V | head -n -2); do
            remove_directory "${AGENT_TOOLSDIRECTORY}/go/$version" "Go $version"
          done

          # Remove old Node versions (keep latest LTS)
          for version in $(ls ${AGENT_TOOLSDIRECTORY}/node 2>/dev/null | grep -v "lts" | sort -V | head -n -2); do
            remove_directory "${AGENT_TOOLSDIRECTORY}/node/$version" "Node $version"
          done

          # Remove Python 2.x
          remove_directory "${AGENT_TOOLSDIRECTORY}/Python/2*" "Python 2.x"

          # Remove PyPy
          remove_directory "${AGENT_TOOLSDIRECTORY}/PyPy" "PyPy"

          # Remove Ruby (usually not needed)
          remove_directory "${AGENT_TOOLSDIRECTORY}/Ruby" "Ruby"

          # Remove CodeQL
          remove_directory "${AGENT_TOOLSDIRECTORY}/CodeQL" "CodeQL"

          # Other large directories
          remove_directory "/usr/local/share/boost" "Boost"
          remove_directory "/opt/hostedtoolcache/boost" "Boost (tool cache)"
          remove_directory "/usr/local/share/powershell" "PowerShell"
          remove_directory "/usr/share/kotlinc" "Kotlin"
          remove_directory "/usr/share/swift" "Swift"
          remove_directory "/usr/share/sbt" "SBT"
          echo ""
        fi

        # Package manager cleanup (always do this)
        echo -e "${GREEN}🧹 Package manager cleanup:${NC}"
        if [[ "$DRY_RUN" != "true" ]]; then
          echo "  - Cleaning APT cache..."
          sudo apt-get clean || true
          sudo apt-get autoremove -y || true
          sudo rm -rf /var/lib/apt/lists/* || true

          echo "  - Cleaning other caches..."
          pip cache purge 2>/dev/null || true
          npm cache clean --force 2>/dev/null || true
        else
          apt_cache_size=$(get_dir_size "/var/cache/apt")
          echo -e "${YELLOW}  - Would clean APT cache${NC} ($apt_cache_size)"
          echo -e "${YELLOW}  - Would clean pip/npm caches${NC}"
        fi
        echo ""

        # Final space
        SPACE_AFTER=$(get_free_space_gb)
        SPACE_SAVED=$((SPACE_AFTER - SPACE_BEFORE))

        echo "=================================================="
        echo -e "${BLUE}📊 Results:${NC}"
        echo "  Space before: ${SPACE_BEFORE}GB free"
        echo "  Space after:  ${SPACE_AFTER}GB free"
        echo -e "  ${GREEN}Space saved:  ${SPACE_SAVED}GB${NC}"
        echo ""

        if [[ "$DRY_RUN" == "true" ]]; then
          echo -e "${YELLOW}This was a DRY RUN. To actually delete files, set 'dry-run: false'${NC}"
        fi

        # Set outputs
        echo "space-before=${SPACE_BEFORE}" >> $GITHUB_OUTPUT
        echo "space-after=${SPACE_AFTER}" >> $GITHUB_OUTPUT
        echo "space-saved=${SPACE_SAVED}" >> $GITHUB_OUTPUT

        # Show final disk usage
        echo ""
        echo "Final disk usage:"
        df -h /
