#!/usr/bin/env python3
"""
Test script for tribal environment genny bindings.

This tests the high-performance Nim‚ÜíPython bindings generated by genny.
"""

import sys
from pathlib import Path

import numpy as np


def test_genny_bindings():
    """Test the genny-generated tribal bindings."""
    print("üß™ Testing Tribal Environment Genny Bindings")
    print("=" * 55)

    # Test 1: Check if bindings are built
    print("1. Checking if genny bindings are built...")
    bindings_path = Path("mettascope2/bindings/generated")

    if not bindings_path.exists():
        print("‚ùå Bindings directory not found!")
        print("   Run: cd mettascope2 && ./build_bindings.sh")
        return False

    py_file = bindings_path / "Tribal.py"
    so_file = bindings_path / "Tribal.so"

    if not (py_file.exists() and so_file.exists()):
        print("‚ùå Binding files not found!")
        print("   Run: cd mettascope2 && ./build_bindings.sh")
        return False

    print("‚úÖ Genny bindings found")

    # Test 2: Import Python wrapper
    print("2. Testing Python wrapper imports...")
    try:
        # Add tribal source to path
        tribal_src = Path(__file__).parent.parent.parent / "tribal" / "src"
        if tribal_src.exists():
            sys.path.insert(0, str(tribal_src))
        from tribal_genny import make_tribal_env

        print("‚úÖ Python wrapper imported successfully")
    except Exception as e:
        print(f"‚ùå Python wrapper import failed: {e}")
        return False

    # Test 3: Create environment
    print("3. Creating tribal environment...")
    try:
        env = make_tribal_env(num_agents=15, max_steps=100)
        print("‚úÖ Environment created")
        print(f"   - Agents: {env.num_agents}")
        print(f"   - Observation shape: [{env.observation_layers}, {env.observation_height}, {env.observation_width}]")
        print(f"   - Action types: {env.num_action_types}")
    except Exception as e:
        print(f"‚ùå Environment creation failed: {e}")
        return False

    # Test 4: Reset environment
    print("4. Testing environment reset...")
    try:
        obs, info = env.reset(seed=42)
        print("‚úÖ Reset successful")
        print(f"   - Observation shape: {obs.shape}")
        print(f"   - Info: {info}")

        expected_shape = (15, 19, 11, 11)  # [agents, layers, height, width]
        if obs.shape == expected_shape:
            print("‚úÖ Observation shape correct")
        else:
            print(f"‚ö†Ô∏è  Observation shape: got {obs.shape}, expected {expected_shape}")

    except Exception as e:
        print(f"‚ùå Reset failed: {e}")
        return False

    # Test 5: Step environment
    print("5. Testing environment step...")
    try:
        # Create safe actions: [action_type, argument]
        actions = np.zeros((15, 2), dtype=np.int32)
        actions[:, 0] = 1  # Move action
        actions[:, 1] = np.random.randint(0, 4, size=15)  # Random cardinal directions

        obs, rewards, terminals, truncations, info = env.step(actions)

        print("‚úÖ Step successful")
        print(f"   - Observations: {obs.shape}")
        print(f"   - Rewards: {rewards.shape}, sum={rewards.sum():.3f}")
        print(f"   - Terminals: {terminals.sum()} agents")
        print(f"   - Step: {info.get('current_step', 'unknown')}")

    except Exception as e:
        print(f"‚ùå Step failed: {e}")
        return False

    # Test 6: Multiple steps with different actions
    print("6. Testing action variety...")
    try:
        action_types = [0, 1, 2, 3, 4, 5]  # All available actions

        for step in range(5):
            actions = np.zeros((15, 2), dtype=np.int32)
            actions[:, 0] = np.random.choice(action_types, size=15)
            actions[:, 1] = np.random.randint(0, 8, size=15)  # Random arguments

            obs, rewards, terminals, truncations, info = env.step(actions)

            unique_actions = np.unique(actions[:, 0])
            reward_sum = rewards.sum()
            print(f"   Step {step + 1}: actions={unique_actions}, rewards={reward_sum:.3f}")

        print("‚úÖ Action variety test passed")

    except Exception as e:
        print(f"‚ùå Action variety test failed: {e}")
        return False

    # Test 7: Environment info
    print("7. Testing environment information...")
    try:
        stats = env.get_episode_stats()
        current_step = env.current_step
        max_steps = env.max_steps

        print("‚úÖ Environment info accessible")
        print(f"   - Current step: {current_step}")
        print(f"   - Max steps: {max_steps}")
        print(f"   - Has stats: {'stats_text' in stats}")

    except Exception as e:
        print(f"‚ùå Environment info test failed: {e}")
        return False

    print()
    print("üéâ All genny binding tests passed!")
    print()
    print("Performance benefits of genny bindings:")
    print("‚Ä¢ Direct Nim‚ÜíPython object mapping")
    print("‚Ä¢ No JSON serialization overhead")
    print("‚Ä¢ Native Python lists/objects")
    print("‚Ä¢ Automatic memory management")
    print()
    print("Ready for high-performance RL training!")
    print()
    print("Next steps:")
    print("1. Run: uv run ./tools/run.py experiments.recipes.tribal_basic.train run=test_genny")
    print("2. Monitor performance vs pure Python implementations")

    return True


def test_genny_bindings_pytest():
    """Pytest-compatible wrapper for test_genny_bindings."""
    result = test_genny_bindings()
    assert result, "Genny bindings test failed"


if __name__ == "__main__":
    success = test_genny_bindings()
    sys.exit(0 if success else 1)
