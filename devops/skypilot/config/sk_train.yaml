resources:
  cloud: aws
  any_of:
    - region: us-east-1
      use_spot: true
      accelerators: "L4:1"
    - region: us-east-1
      use_spot: true
      accelerators: "A10G:1"
    - region: us-east-1
      accelerators: "L4:1"
    - region: us-east-1
      accelerators: "A10G:1"
    - region: us-west-2
      use_spot: true
      accelerators: "L4:1"
    - region: us-west-2
      use_spot: true
      accelerators: "A10G:1"
    - region: us-west-2
      accelerators: "L4:1"
    - region: us-west-2
      accelerators: "A10G:1"
  cpus: 8+
  image_id: docker:metta:latest
  job_recovery:
    strategy: EAGER_NEXT_REGION
    max_restarts_on_errors: 20

config:
  docker:
    run_options:
      - --cap-add=IPC_LOCK
      - --ulimit memlock=-1:-1
      - --ipc=host
      - --shm-size=4g

file_mounts:
  /mnt/s3/softmax-public:
    source: s3://softmax-public
    mode: MOUNT_CACHED
  /mnt/s3/train_dir:
    source: s3://softmax-train-dir
    mode: MOUNT_CACHED

setup: |
  set -e
  cd /workspace/metta

  # Note that the docker image may start with its own venv - switch to metta venv
  if [ -n "$VIRTUAL_ENV" ]; then
      deactivate 2>/dev/null || true
  fi
  . .venv/bin/activate

  echo "[SETUP] Fetching latest from origin..."
  git fetch --depth=1000 origin "$METTA_GIT_REF" || git fetch origin

  echo "[SETUP] Checking out ref: $METTA_GIT_REF"
  git checkout $METTA_GIT_REF

  uv sync
  mkdir -p $WANDB_DIR

  echo "[SETUP] Creating job secrets..."
  ./devops/skypilot/create_job_secrets.py \
    --wandb-password "$WANDB_PASSWORD" \
    --observatory-token "$OBSERVATORY_TOKEN"

  echo "[SETUP] Setup complete."

run: |
  set -euo pipefail
  cd /workspace/metta

  # Note that the docker image may start with its own venv - switch to metta venv
  if [ -n "$VIRTUAL_ENV" ]; then
      deactivate 2>/dev/null || true
  fi
  . .venv/bin/activate

  echo "[RUN] Starting run phase..."
  echo "[RUN] METTA_RUN_ID: $METTA_RUN_ID"
  echo "[RUN] SKYPILOT_TASK_ID: $SKYPILOT_TASK_ID"

  bash ./devops/skypilot/config/configure_environment.sh

  if [ -f common/src/metta/common/util/skypilot_latency.py ]; then
    echo "[RUN] Collecting skypilot latency..."
    LATENCY_OUTPUT=$(uv run python common/src/metta/common/util/skypilot_latency.py 2>&1) || true
    echo "$LATENCY_OUTPUT"
  else
    echo "[RUN] Latency script is missing!"
  fi

  export NUM_GPUS=$SKYPILOT_NUM_GPUS_PER_NODE
  export NUM_NODES=$SKYPILOT_NUM_NODES
  export MASTER_ADDR=$(echo "$SKYPILOT_NODE_IPS" | head -n1)
  export MASTER_PORT=8008
  export NODE_INDEX=$SKYPILOT_NODE_RANK
  export NCCL_SHM_DISABLE=1

  METTA_ENV_FILE="$(uv run ./common/src/metta/common/util/constants.py METTA_ENV_FILE)"

  if [ -f common/src/metta/common/util/cost_monitor.py ]; then
    echo "[RUN] Collecting instance cost..."
    if uv run python common/src/metta/common/util/cost_monitor.py; then
      source ~/.bashrc || true
      echo "[RUN] METTA_HOURLY_COST set to: $METTA_HOURLY_COST"
    else
      echo "[RUN] Cost monitor script failed to run."
    fi
  else
    echo "[RUN] Cost monitor script is missing!"
  fi

  source "$METTA_ENV_FILE"

  echo "[RUN] Running training script..."
  ./devops/$METTA_CMD.sh \
    run=$METTA_RUN_ID \
    $METTA_CMD_ARGS
  TRAIN_EXIT=$?
  echo "[RUN] Training script exit code: $TRAIN_EXIT"

  echo "[RUN] Job complete."
  exit $TRAIN_EXIT

envs:
  METTA_RUN_ID: ""
  METTA_CMD: train
  METTA_CMD_ARGS: ""
  METTA_GIT_REF: main
  WANDB_DIR: ./wandb
  HEARTBEAT_TIMEOUT: 600

  # s3 mount slows down uv, so we put DATA_DIR outside of /workspace/metta
  DATA_DIR: /mnt/s3/train_dir
  SKYPILOT_DOCKER_USERNAME: ""
  SKYPILOT_DOCKER_PASSWORD: ""
  SKYPILOT_DOCKER_SERVER: 751442549699.dkr.ecr.us-east-1.amazonaws.com

secrets:
  # configured by launch script based on local credentials
  WANDB_PASSWORD: ""
  OBSERVATORY_TOKEN: ""
