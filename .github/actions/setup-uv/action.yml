name: "Setup uv"
description: "Set up uv and activate the environment"
inputs:
  install-mode:
    description: "Installation mode: 'full' (default), 'testing', 'minimal', or 'linting'"
    required: false
    default: "full"

runs:
  using: "composite"
  steps:
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "0.7.3"
        enable-cache: true
        cache-local-path: "${{ github.workspace }}/.uv-cache"
        prune-cache: true
        cache-suffix: "${{ inputs.install-mode }}-${{ hashFiles('.github/actions/setup-uv/action.yml') }}"
      env:
        UV_CACHE_DIR: ${{ github.workspace }}/.uv-cache

    - name: Cache uv store only (safer than caching venv)
      uses: actions/cache@v4
      id: cache-uv-store
      with:
        path: ~/.cache/uv
        key: uv-store-${{ inputs.install-mode }}-${{ runner.os }}-${{ hashFiles('uv.lock', 'pyproject.toml', '**/pyproject.toml') }}
        restore-keys: |
          uv-store-${{ inputs.install-mode }}-${{ runner.os }}-

    - name: Create virtual environment with uv
      shell: bash
      env:
        UV_CACHE_DIR: ${{ github.workspace }}/.uv-cache
      run: |
        # Export environment variables
        echo "VIRTUAL_ENV=$(pwd)/.venv" >> $GITHUB_ENV
        echo "$(pwd)/.venv/bin" >> $GITHUB_PATH

        # Check if we have cached packages
        echo "🔍 Checking cache status:"
        echo "  Cache hit: ${{ steps.cache-uv-store.outputs.cache-hit }}"
        echo "  ~/.cache/uv exists: $([ -d ~/.cache/uv ] && echo 'yes' || echo 'no')"
        if [ -d ~/.cache/uv ]; then
          echo "  Cache size: $(du -sh ~/.cache/uv 2>/dev/null || echo 'unknown')"
        fi
        
        # Always create fresh venv (using cached packages from uv store)
        echo "🚀 Creating fresh virtual environment with cached packages..."
        uv venv

        # Handle different installation modes
        case "${{ inputs.install-mode }}" in

          "minimal")
            # don't install any packages
            echo "✅ Minimal mode - no packages installed"
            ;;

          "testing")
            echo "📦 Installing testing packages..."
            uv sync
            uv pip install pytest pytest-cov pytest-xdist pytest-benchmark gcovr
            echo "✅ Testing packages installed"
            ;;

          "linting")
            echo "📦 Installing linting packages..."
            uv pip install ruff cpplint
            echo "✅ Linting packages installed"
            ;;

          "full"|*)
            echo "📦 Installing full package set..."
            uv sync
            echo "✅ Full package set installed"
            ;;

        esac
