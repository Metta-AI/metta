name: "Claude Review: Types"
on:
  workflow_call:
    inputs:
      pr_number:
        required: true
        type: string

jobs:
  review:
    uses: ./.github/workflows/claude-review-base.yml
    with:
      review_name: "Type Annotations"
      review_type: "types"
      file_pattern: "\\.py$"
      setup_python: true
      install_packages: "mypy"
      tools: "Edit,Replace,Bash(git diff HEAD~1),Bash(python -m mypy --version)"
      pr_number: ${{ inputs.pr_number }}
      prompt: |
        Review the Python code in this PR for MISSING type annotations that would provide real value.

        **CRITICAL INSTRUCTIONS**:
        1. If the code already has adequate type coverage for its use case:
           - Simply respond with "No issues found."
           - DO NOT create any review
        2. ONLY create a review if you find missing annotations that would genuinely improve:
           - Code clarity and understanding
           - IDE support and developer experience
           - Bug prevention through type checking
        3. Never suggest annotations just for coverage - they must add real value

        **HIGHEST PRIORITY - Always flag these**:
        - Missing parameter type annotations on any function
        - Missing return type annotations on public API functions (not prefixed with _)
        - Functions returning Optional values without -> X | None annotation

        **MEDIUM PRIORITY - Flag when beneficial**:
        - Return types for complex functions with multiple return paths
        - Return types for functions where the return isn't obvious from the name
        - Type annotations for empty collections that will hold specific types
        - Complex data structures that would benefit from typing

        **DO NOT FLAG**:
        - Return types for private methods (those prefixed with _)
        - Return types for simple getters/setters/property methods
        - Return types for very short functions (1-3 lines) with obvious returns
        - Variable annotations for assignments with clear type inference
        - Return types for functions defined inside other functions
        - Type annotations that would just repeat what's obvious

        **Modern syntax preferences** (suggest only if already adding types):
        - Use `list[str]` not `List[str]` (Python 3.9+)
        - Use `type | None` not `Optional[type]` (Python 3.10+)
        - Use `dict[str, int]` not `Dict[str, int]`

        **Examples of GOOD suggestions**:
        ```python
        # Missing parameter types (always flag):
        def process_data(data, config):  # Should be: def process_data(data: pd.DataFrame, config: dict[str, Any]):

        # Public API missing return type:
        def get_user_stats(user_id: int):  # Should be: def get_user_stats(user_id: int) -> UserStats:

        # Unclear Optional return:
        def find_user(id: int):  # Should be: def find_user(id: int) -> User | None:
        ```

        **Examples of what NOT to flag**:
        ```python
        # Private method (don't flag):
        def _helper(self, x: int):
            return x * 2

        # Obvious return type (don't flag):
        @property
        def name(self) -> str:
            return self._name

        # Clear type inference (don't flag):
        result = []  # Obviously List[Any]
        count = 0    # Obviously int
        ```

        Remember: The goal is to improve code quality, not achieve 100% coverage. Only suggest
        annotations that make the code meaningfully better. When in doubt, don't suggest it.
