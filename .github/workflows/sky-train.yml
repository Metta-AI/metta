name: "Launch SkyPilot Training Job"

on:
  workflow_dispatch:
    inputs:
      timeout_hours:
        description: "Job timeout in hours (auto-termination)"
        required: true
        default: 1
        type: number
      trainer_env:
        description: "Training environment configuration"
        required: true
        default: "env/mettagrid/simple"
        type: string
      commit_to_run:
        description: "The full commit hash to run the job against (required for manual runs)."
        required: true
        type: string
      pr_number:
        description: "PR number (for naming/context if running a PR's commit, leave empty otherwise)"
        required: false
        type: string
      num_gpus:
        description: "Number of GPUs to request (e.g., 1, 4). If empty, defaults to SkyPilot task definition (usually 1)."
        required: false
        type: string # Keep as string to allow empty, action handles default
  push:
    branches: [main]

env:
  DEFAULT_TRAINER_ENV: "env/mettagrid/simple"
  DEFAULT_TIMEOUT_HOURS: 1
  RUN_NAME_PREFIX: "github.sky" # Define the prefix for run names here

jobs:
  launch-batch-job:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history is useful as the action determines the exact git ref.

      - name: Determine PR Number for Push Events
        id: pr_info
        if: github.event_name == 'push'
        shell: bash
        run: |
          PR_FROM_COMMIT=$(git log -1 --pretty=format:"%s" | sed -n 's/.*(#\\([0-9][0-9]*\\)).*/\\1/p')
          echo "Extracted PR number from commit message (if any): $PR_FROM_COMMIT"
          echo "pr_number_for_name_generation=${PR_FROM_COMMIT}" >> $GITHUB_OUTPUT

      - name: Generate Run Name
        id: generate_run_name
        shell: bash
        run: |
          set -eo pipefail
          PR_NUMBER_TO_USE="${{ github.event.inputs.pr_number || steps.pr_info.outputs.pr_number_for_name_generation || '' }}"

          # Use the provided commit_to_run for SHORT_COMMIT_HASH if available (manual dispatch), otherwise use HEAD
          if [ -n "${{ github.event.inputs.commit_to_run }}" ]; then
            SHORT_COMMIT_HASH=$(echo "${{ github.event.inputs.commit_to_run }}" | cut -c1-7)
            echo "Using provided commit_to_run (${{ github.event.inputs.commit_to_run }}) for run name, short hash: $SHORT_COMMIT_HASH"
          else
            SHORT_COMMIT_HASH=$(git rev-parse --short HEAD)
            echo "Using current HEAD's short commit hash: $SHORT_COMMIT_HASH"
          fi

          if [ -n "$PR_NUMBER_TO_USE" ]; then
            RUN_NAME_BASE="${{ env.RUN_NAME_PREFIX }}.pr${PR_NUMBER_TO_USE}"
            echo "Using PR #$PR_NUMBER_TO_USE in run name"
          else
            BRANCH_NAME_RAW=$(git rev-parse --abbrev-ref HEAD)
            BRANCH_NAME_SANITISED=$(echo "$BRANCH_NAME_RAW" | sed 's/[^a-zA-Z0-9_-]/-/g')
            RUN_NAME_BASE="${{ env.RUN_NAME_PREFIX }}.${BRANCH_NAME_SANITISED}"
            echo "Using branch name '$BRANCH_NAME_SANITISED' in run name (PR number not provided/found)"
          fi

          TIMESTAMP=$(date -u +"%Y%m%d_%H%M%S")
          FINAL_RUN_NAME="$RUN_NAME_BASE.$SHORT_COMMIT_HASH.$TIMESTAMP"

          echo "Generated run name for SkyPilot: $FINAL_RUN_NAME"
          echo "run_name=$FINAL_RUN_NAME" >> $GITHUB_OUTPUT

      - name: Launch SkyPilot Job via Custom Action
        id: skylaunch
        uses: ./.github/actions/launch-skypilot-job
        with:
          trainer_env: ${{ github.event.inputs.trainer_env || env.DEFAULT_TRAINER_ENV }}
          timeout_hours: ${{ github.event.inputs.timeout_hours || env.DEFAULT_TIMEOUT_HOURS }}
          num_gpus: ${{ github.event.inputs.num_gpus || '' }}
          run_name: ${{ steps.generate_run_name.outputs.run_name }} # Pass the fully generated name
          git_ref_override: ${{ github.event.inputs.commit_to_run || '' }} # Pass commit_to_run for manual, default for push

      - name: Print Run Information
        shell: bash
        run: |
          echo "Workflow triggered by: ${{ github.event_name }}"
          echo "SkyPilot Job Name / W&B Run Name (from action output): ${{ steps.skylaunch.outputs.run_name }}"
          echo "SkyPilot Task Name (from action output): ${{ steps.skylaunch.outputs.sky_job_name }}"
          echo "To see logs for this job in SkyPilot, you might use: sky jobs logs ${{ steps.skylaunch.outputs.sky_job_name }} (if job was successfully submitted)"
